'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultipleChoice = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _choiceInput = require('./choice-input');

var _choiceInput2 = _interopRequireDefault(_choiceInput);

var _correctAnswerToggle = require('@pie-lib/correct-answer-toggle');

var _correctAnswerToggle2 = _interopRequireDefault(_correctAnswerToggle);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const styles = {
  corespringChoice: {
    '& *': {
      fontFamily: "'Roboto', Arial, Helvetica, sans-serif", //eslint-disable-line
      '-webkit-font-smoothing': 'antialiased'
    }
  },
  prompt: {
    verticalAlign: 'middle'
  },
  choice: {
    paddingTop: '20px',
    paddingBottom: '10px',
    borderBottom: '1px solid #E0DEE0'
  },
  last: {
    borderBottom: 'none'
  }
};

class MultipleChoice extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.state = {
      showCorrect: false
    };

    this.onToggle = this.onToggle.bind(this);
  }

  onToggle() {
    if (this.props.mode === 'evaluate') {
      this.setState({ showCorrect: !this.state.showCorrect });
    }
  }

  componentWillReceiveProps(nextProps) {
    if (!nextProps.correctResponse) {
      this.setState({ showCorrect: false });
    }
  }

  isSelected(value) {
    if (this.props.session.value) {
      return this.props.session.value.indexOf(value) >= 0;
    } else {
      return false;
    }
  }

  indexToSymbol(index) {
    return (this.props.keyMode === 'numbers' ? index + 1 : String.fromCharCode(97 + index).toUpperCase()).toString();
  }

  render() {
    var _props = this.props;
    const mode = _props.mode,
          disabled = _props.disabled,
          choices = _props.choices,
          choiceMode = _props.choiceMode,
          prompt = _props.prompt,
          onChoiceChanged = _props.onChoiceChanged,
          responseCorrect = _props.responseCorrect,
          classes = _props.classes;
    const showCorrect = this.state.showCorrect;

    const isEvaluateMode = mode === 'evaluate';

    const correctness = c => c === true ? 'correct' : 'incorrect';

    let choiceToTag = (choice, index) => {
      var choiceClass = 'choice' + (index === choices.length - 1 ? ' last' : '');

      const checked = showCorrect ? choice.correct || false : this.isSelected(choice.value);

      const feedback = !isEvaluateMode || showCorrect ? '' : choice.feedback;

      const choiceProps = {
        checked,
        choiceMode,
        disabled,
        feedback,
        value: choice.value,
        correctness: checked && isEvaluateMode ? correctness(choice.correct) : undefined,
        displayKey: this.indexToSymbol(index),
        label: choice.label,
        onChange: mode === 'gather' ? onChoiceChanged : () => {}
      };

      const names = (0, _classnames2.default)(classes.choice, {
        [classes.last]: index === choices.length - 1
      });

      return _react2.default.createElement(
        'div',
        { className: choiceClass, key: index },
        _react2.default.createElement(_choiceInput2.default, _extends({}, choiceProps, { className: names }))
      );
    };

    return _react2.default.createElement(
      'div',
      { className: classes.corespringChoice },
      _react2.default.createElement(_correctAnswerToggle2.default, {
        show: isEvaluateMode && !responseCorrect,
        toggled: this.state.showCorrect,
        onToggle: this.onToggle.bind(this)
      }),
      _react2.default.createElement('div', {
        className: classes.prompt,
        dangerouslySetInnerHTML: { __html: prompt }
      }),
      choices.map(choiceToTag)
    );
  }
}

exports.MultipleChoice = MultipleChoice;
MultipleChoice.propTypes = {
  mode: _propTypes2.default.oneOf(['gather', 'view', 'evaluate']),
  choiceMode: _propTypes2.default.oneOf(['radio', 'checkbox']),
  keyMode: _propTypes2.default.oneOf(['numbers', 'letters']),
  choices: _propTypes2.default.array,
  prompt: _propTypes2.default.string,
  session: _propTypes2.default.object,
  disabled: _propTypes2.default.bool.isRequired,
  onChoiceChanged: _propTypes2.default.func.isRequired,
  responseCorrect: _propTypes2.default.bool,
  classes: _propTypes2.default.object.isRequired,
  correctResponse: _propTypes2.default.array
};
MultipleChoice.defaultProps = {
  session: {
    value: []
  }
};

exports.default = (0, _styles.withStyles)(styles)(MultipleChoice);