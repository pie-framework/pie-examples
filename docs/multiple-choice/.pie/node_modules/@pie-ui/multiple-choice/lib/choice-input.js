'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChoiceInput = exports.StyledRadio = exports.StyledCheckbox = exports.StyledFormControlLabel = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _FormControlLabel = require('@material-ui/core/FormControlLabel');

var _FormControlLabel2 = _interopRequireDefault(_FormControlLabel);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _Checkbox = require('@material-ui/core/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _renderUi = require('@pie-lib/render-ui');

var _feedbackTick = require('./feedback-tick');

var _feedbackTick2 = _interopRequireDefault(_feedbackTick);

var _Radio = require('@material-ui/core/Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _green = require('@material-ui/core/colors/green');

var _green2 = _interopRequireDefault(_green);

var _orange = require('@material-ui/core/colors/orange');

var _orange2 = _interopRequireDefault(_orange);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const styleSheet = {
  label: {
    color: 'var(--choice-input-color, black)',
    display: 'inline-block',
    verticalAlign: 'middle',
    cursor: 'pointer'
  },
  row: {
    display: 'flex',
    alignItems: 'center'
  },
  checkboxHolder: {
    display: 'flex',
    alignItems: 'center',
    width: 'auto',
    '& label': {
      width: 'auto !important'
    }
  }
};

const formStyleSheet = {
  label: {
    color: 'var(--choice-input-color, black)'
  }
};

const StyledFormControlLabel = exports.StyledFormControlLabel = (0, _styles.withStyles)(formStyleSheet, {
  name: 'FormControlLabel'
})(props => _react2.default.createElement(_FormControlLabel2.default, _extends({}, props, { classes: { label: props.classes.label } })));

const CLASS_NAME = 'multiple-choice-component';

const colorStyle = (varName, fallback) => ({
  [`&.${CLASS_NAME}`]: {
    color: `var(--choice-input-${varName}, ${fallback})`
  }
});

const inputStyles = {
  'correct-root': colorStyle('correct-color', 'black'),
  'correct-checked': colorStyle('correct-selected-color', _green2.default[500]),
  'correct-disabled': colorStyle('correct-disabled-color', 'grey'),
  'incorrect-root': colorStyle('incorrect-color', 'black'),
  'incorrect-checked': colorStyle('incorrect-checked', _orange2.default[500]),
  'incorrect-disabled': colorStyle('incorrect-disabled-color', 'grey'),
  root: colorStyle('color', 'black'),
  checked: colorStyle('selected-color', 'black'),
  disabled: colorStyle('disabled-color', 'black')
};

const StyledCheckbox = exports.StyledCheckbox = (0, _styles.withStyles)(inputStyles)(props => {
  const correctness = props.correctness,
        classes = props.classes,
        checked = props.checked,
        onChange = props.onChange,
        disabled = props.disabled;

  const key = k => correctness ? `${correctness}-${k}` : k;

  const resolved = {
    root: classes[key('root')],
    checked: classes[key('checked')],
    disabled: classes[key('disabled')]
  };

  const miniProps = { checked, onChange, disabled };
  return _react2.default.createElement(_Checkbox2.default, _extends({}, miniProps, {
    className: CLASS_NAME,
    classes: {
      root: resolved.root,
      checked: resolved.checked,
      disabled: resolved.disabled
    }
  }));
});

const StyledRadio = exports.StyledRadio = (0, _styles.withStyles)(inputStyles)(props => {
  const correctness = props.correctness,
        classes = props.classes,
        checked = props.checked,
        onChange = props.onChange,
        disabled = props.disabled;

  const key = k => correctness ? `${correctness}-${k}` : k;

  const resolved = {
    root: classes[key('root')],
    checked: classes[key('checked')],
    disabled: classes[key('disabled')]
  };

  const miniProps = { checked, onChange, disabled };

  return _react2.default.createElement(_Radio2.default, _extends({}, miniProps, {
    className: CLASS_NAME,
    classes: {
      root: resolved.root,
      checked: resolved.checked
    }
  }));
});

class ChoiceInput extends _react2.default.Component {

  constructor(props) {
    super(props);
    this.onToggleChoice = this.onToggleChoice.bind(this);
  }

  onToggleChoice() {
    this.props.onChange({
      value: this.props.value,
      selected: !this.props.checked
    });
  }

  render() {
    var _props = this.props;
    const choiceMode = _props.choiceMode,
          disabled = _props.disabled,
          displayKey = _props.displayKey,
          feedback = _props.feedback,
          label = _props.label,
          checked = _props.checked,
          correctness = _props.correctness,
          classes = _props.classes,
          className = _props.className;


    const Tag = choiceMode === 'checkbox' ? StyledCheckbox : StyledRadio;
    const classSuffix = choiceMode === 'checkbox' ? 'checkbox' : 'radio-button';

    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(className, 'corespring-' + classSuffix) },
      _react2.default.createElement(
        'div',
        { className: classes.row },
        _react2.default.createElement(_feedbackTick2.default, { correctness: correctness }),
        _react2.default.createElement(
          'div',
          { className: classes.checkboxHolder },
          _react2.default.createElement(StyledFormControlLabel, {
            disabled: disabled,
            label: displayKey + '. ',
            control: _react2.default.createElement(Tag, {
              checked: checked,
              correctness: correctness,
              onChange: this.onToggleChoice
            })
          }),
          _react2.default.createElement('span', {
            className: classes.label,
            onClick: this.onToggleChoice,
            dangerouslySetInnerHTML: { __html: label }
          })
        )
      ),
      _react2.default.createElement(_renderUi.Feedback, { feedback: feedback, correctness: correctness })
    );
  }
}

exports.ChoiceInput = ChoiceInput;
ChoiceInput.propTypes = {
  choiceMode: _propTypes2.default.oneOf(['radio', 'checkbox']),
  displayKey: _propTypes2.default.string.isRequired,
  checked: _propTypes2.default.bool.isRequired,
  correctness: _propTypes2.default.string,
  disabled: _propTypes2.default.bool.isRequired,
  feedback: _propTypes2.default.string,
  label: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  value: _propTypes2.default.string.isRequired,
  classes: _propTypes2.default.object,
  className: _propTypes2.default.string
};
ChoiceInput.defaultProps = {};
exports.default = (0, _styles.withStyles)(styleSheet)(ChoiceInput);