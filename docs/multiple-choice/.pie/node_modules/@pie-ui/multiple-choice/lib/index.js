'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _main = require('./main');

var _main2 = _interopRequireDefault(_main);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _katex = require('katex');

var _katex2 = _interopRequireDefault(_katex);

var _sessionUpdater = require('./session-updater');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//Auto render requires the katex global
window.katex = _katex2.default;
const renderMathInElement = require('katex/dist/contrib/auto-render.min');

require('katex/dist/katex.css');

const log = (0, _debug2.default)('pie-elements:multiple-choice');

class MultipleChoice extends HTMLElement {
  constructor() {
    super();
    this._model = null;
    this._session = null;

    this._rerender = (0, _debounce2.default)(() => {
      if (this._model && this._session) {
        var element = _react2.default.createElement(_main2.default, {
          model: this._model,
          session: this._session,
          onChoiceChanged: this._onChange.bind(this)
        });
        _reactDom2.default.render(element, this, () => {
          log('render complete - render math');
          renderMathInElement(this);
        });
      } else {
        log('skip');
      }
    }, 50, { leading: false, trailing: true });

    this._dispatchResponseChanged = (0, _debounce2.default)(() => {
      var event = new CustomEvent('session-changed', {
        bubbles: true,
        composed: true,
        detail: {
          complete: this.isComplete(),
          component: this.tagName.toLowerCase()
        }
      });

      this.dispatchEvent(event);
    });

    this._dispatchModelSet = (0, _debounce2.default)(() => {
      this.dispatchEvent(new CustomEvent('model-set', {
        bubbles: true,
        composed: true,
        detail: {
          complete: this.isComplete(),
          component: this.tagName.toLowerCase(),
          hasModel: this._model !== undefined
        }
      }));
    }, 50, { leading: false, trailing: true });
  }

  set model(s) {
    this._model = s;
    this._rerender();
    this._dispatchModelSet();
  }

  get session() {
    return this._session;
  }

  set session(s) {
    this._session = s;
    this._rerender();
    this._dispatchResponseChanged();
  }

  _onChange(data) {
    (0, _sessionUpdater.updateSessionValue)(this._session, this._model.choiceMode, data);
    this._dispatchResponseChanged();
    this._rerender();
  }

  isComplete() {
    const complete = this._model.complete;

    if (complete) {
      var _complete$min = complete.min;
      const min = _complete$min === undefined ? -1 : _complete$min;
      var _complete$max = complete.max;
      const max = _complete$max === undefined ? -1 : _complete$max;

      const choiceCount = this._session && this._session.value ? this._session.value.length : 0;
      const overMin = min === -1 || choiceCount >= min;
      const underMax = max === -1 || choiceCount <= max;
      return overMin && underMax;
    } else {
      return true;
    }
  }

  connectedCallback() {
    this._rerender();
  }
}
exports.default = MultipleChoice;