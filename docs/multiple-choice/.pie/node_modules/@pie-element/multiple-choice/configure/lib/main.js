'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Main = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _editableHtml = require('@pie-lib/editable-html');

var _editableHtml2 = _interopRequireDefault(_editableHtml);

var _configUi = require('@pie-lib/config-ui');

var _styles = require('@material-ui/core/styles');

var _Tabs = require('@material-ui/core/Tabs');

var _Tabs2 = _interopRequireDefault(_Tabs);

var _Tab = require('@material-ui/core/Tab');

var _Tab2 = _interopRequireDefault(_Tab);

var _choiceType = require('./choice-type');

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _scoringConfig = require('@pie-lib/scoring-config');

var _scoringConfig2 = _interopRequireDefault(_scoringConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:multiple-choice:main');

const styles = theme => ({
  promptHolder: {
    width: '100%',
    paddingBottom: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit * 2
  },
  prompt: {
    paddingTop: theme.spacing.unit * 2,
    width: '100%'
  },
  design: {
    paddingTop: theme.spacing.unit * 3
  },
  choiceConfiguration: {
    paddingTop: theme.spacing.unit * 2,
    paddingBottom: theme.spacing.unit * 2
  }
});

const Design = (0, _styles.withStyles)(styles)(props => {
  const classes = props.classes,
        model = props.model,
        onPromptChanged = props.onPromptChanged,
        onChoiceChanged = props.onChoiceChanged,
        onRemoveChoice = props.onRemoveChoice,
        onAddChoice = props.onAddChoice,
        imageSupport = props.imageSupport;


  return _react2.default.createElement(
    'div',
    { className: classes.design },
    _react2.default.createElement(Basics, props),
    _react2.default.createElement(
      _configUi.InputContainer,
      { label: 'Prompt', className: classes.promptHolder },
      _react2.default.createElement(_editableHtml2.default, {
        className: classes.prompt,
        markup: model.prompt,
        onChange: onPromptChanged,
        imageSupport: imageSupport
      })
    ),
    model.choices.map((choice, index) => _react2.default.createElement(_configUi.ChoiceConfiguration, {
      index: index + 1,
      className: classes.choiceConfiguration,
      mode: model.choiceMode,
      key: index,
      data: choice,
      defaultFeedback: {},
      imageSupport: imageSupport,
      onDelete: () => onRemoveChoice(index),
      onChange: c => onChoiceChanged(index, c)
    })),
    _react2.default.createElement('br', null),
    _react2.default.createElement(
      _Button2.default,
      { variant: 'raised', color: 'primary', onClick: () => onAddChoice() },
      'Add a choice'
    )
  );
});

const Basics = props => {
  log('[Basics] props', props);

  const classes = props.classes,
        model = props.model,
        onChoiceModeChanged = props.onChoiceModeChanged,
        onKeyModeChanged = props.onKeyModeChanged;

  return _react2.default.createElement(
    'div',
    { className: classes.baseTypes },
    _react2.default.createElement(_choiceType.ChoiceType, { value: model.choiceMode, onChange: onChoiceModeChanged }),
    _react2.default.createElement(_choiceType.KeyType, { value: model.keyMode, onChange: onKeyModeChanged })
  );
};

Basics.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  model: _propTypes2.default.object.isRequired,
  onChoiceModeChanged: _propTypes2.default.func.isRequired,
  onKeyModeChanged: _propTypes2.default.func.isRequired
};

class Main extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.onTabsChange = (event, index) => {
      this.setState({ index });
    };

    this.state = {
      index: 0
    };
  }

  render() {
    var _props = this.props;
    const model = _props.model,
          onPartialScoringChanged = _props.onPartialScoringChanged;
    const index = this.state.index;


    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Tabs2.default,
        { onChange: this.onTabsChange, value: index },
        _react2.default.createElement(_Tab2.default, { label: 'Design' }),
        _react2.default.createElement(_Tab2.default, { label: 'Scoring' })
      ),
      index === 0 && _react2.default.createElement(Design, this.props),
      index === 1 && _react2.default.createElement(_scoringConfig2.default, {
        partialScoring: model.partialScoring,
        numberOfCorrectResponses: model.choices.filter(choice => choice.correct).length,
        onChange: onPartialScoringChanged
      })
    );
  }
}

exports.Main = Main;
Main.propTypes = {
  model: _propTypes2.default.object.isRequired,
  onPromptChanged: _propTypes2.default.func.isRequired,
  onPartialScoringChanged: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object.isRequired,
  imageSupport: _propTypes2.default.shape({
    add: _propTypes2.default.func.isRequired,
    delete: _propTypes2.default.func.isRequired
  })
};
exports.default = (0, _styles.withStyles)(styles)(Main);