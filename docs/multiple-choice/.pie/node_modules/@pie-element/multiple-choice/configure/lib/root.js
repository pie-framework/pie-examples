'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Main = require('./Main');

var _Main2 = _interopRequireDefault(_Main);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _configUi = require('@pie-lib/config-ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Root extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.onChoiceModeChanged = value => {
      const model = this.state.model;

      model.choiceMode = value;
      if (value === 'radio') {
        let correctFound = false;
        model.choices = model.choices.map(c => {
          if (correctFound) {
            c.correct = false;
            return c;
          }

          if (c.correct) {
            correctFound = true;
          }
          return c;
        });
      }

      this.updateModel(model);
    };

    this.onRemoveChoice = index => {
      const model = this.state.model;

      model.choices.splice(index, 1);
      this.updateModel(model);
    };

    this.onPartialScoringChanged = partialScoring => {
      const model = this.state.model;

      model.partialScoring = partialScoring;
      this.updateModel(model);
    };

    this.modelChanged = () => {
      this.props.onModelChanged(this.state.model);
    };

    this.updateModel = model => {
      this.setState({ model }, () => {
        this.modelChanged();
      });
    };

    this.onAddChoice = () => {
      const model = this.state.model;

      model.choices.push({
        label: 'label',
        value: _configUi.choiceUtils.firstAvailableIndex(model.choices.map(c => c.value), 0),
        feedback: {
          type: 'none'
        }
      });
      this.updateModel(model);
    };

    this.onKeyModeChanged = value => {
      const model = this.state.model;

      model.keyMode = value;
      this.updateModel(model);
    };

    this.onChoiceChanged = (index, choice) => {
      const model = this.state.model;

      if (choice.correct && model.choiceMode === 'radio') {
        model.choices = model.choices.map(c => {
          return (0, _merge2.default)({}, c, { correct: false });
        });
      }

      model.choices.splice(index, 1, choice);
      this.updateModel(model);
    };

    this.onPromptChanged = prompt => {
      const update = (0, _cloneDeep2.default)(this.state.model);
      update.prompt = prompt;
      this.updateModel(update);
    };

    this.state = {
      model: props.model
    };
  }

  render() {
    const props = {
      model: this.state.model,
      onRemoveChoice: this.onRemoveChoice,
      onChoiceModeChanged: this.onChoiceModeChanged,
      onKeyModeChanged: this.onKeyModeChanged,
      onChoiceChanged: this.onChoiceChanged,
      onAddChoice: this.onAddChoice,
      onPromptChanged: this.onPromptChanged,
      onDefaultLangChanged: this.onDefaultLangChanged,
      onPartialScoringChanged: this.onPartialScoringChanged,
      imageSupport: this.props.imageSupport
    };

    return _react2.default.createElement(_Main2.default, props);
  }
}
exports.default = Root;
Root.propTypes = {
  model: _propTypes2.default.object.isRequired,
  onModelChanged: _propTypes2.default.func.isRequired,
  imageSupport: _propTypes2.default.object
};