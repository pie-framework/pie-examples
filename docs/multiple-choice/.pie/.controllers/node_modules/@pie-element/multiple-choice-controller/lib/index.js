'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scoreFromRule = undefined;
exports.model = model;
exports.outcome = outcome;

var _utils = require('./utils');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('pie-elements:multiple-choice:controller');

const prepareChoice = (mode, defaultFeedback) => choice => {
  const out = {
    label: choice.label,
    value: choice.value
  };

  if (mode == 'evaluate') {
    out.correct = !!choice.correct;

    const feedbackType = choice.feedback && choice.feedback.type || 'none';

    if (feedbackType === 'default') {
      out.feedback = defaultFeedback[choice.correct ? 'correct' : 'incorrect'];
    } else if (feedbackType === 'custom') {
      out.feedback = choice.feedback.value;
    }
  }

  return out;
};

function model(question, session, env) {
  return new Promise((resolve, reject) => {
    const defaultFeedback = Object.assign({ correct: 'Correct', incorrect: 'Incorrect' }, question.defaultFeedback);
    const choices = question.choices.map(prepareChoice(env.mode, defaultFeedback));

    const out = {
      disabled: env.mode !== 'gather',
      mode: env.mode,
      prompt: question.prompt,
      choiceMode: question.choiceMode,
      keyMode: question.keyMode,
      choices,

      //TODO: ok to return this in gather mode? gives a clue to how many answers are needed?
      complete: {
        min: question.choices.filter(c => c.correct).length
      },
      responseCorrect: env.mode === 'evaluate' ? (0, _utils.isResponseCorrect)(question, session) : undefined
    };

    resolve(out);
  });
}

const isCorrect = c => c.correct === true;

const normalize = (n, min, max) => Math.max(min, Math.min(max, n));

const scoreFromRule = exports.scoreFromRule = (rule, fallback) => {
  if (!rule || !Number.isFinite(rule.scorePercentage)) {
    return fallback;
  }
  return normalize(rule.scorePercentage, 0, 100) * 0.01;
};

function outcome(config, session, env) {
  return new Promise((resolve, reject) => {
    log('outcome...');
    const maxScore = config.choices.length;

    const chosen = c => !!(session.value || []).find(v => v === c.value);
    const correctAndNotChosen = c => isCorrect(c) && !chosen(c);
    const incorrectAndChosen = c => !isCorrect(c) && chosen(c);
    const correctCount = config.choices.reduce((total, choice) => {
      if (correctAndNotChosen(choice) || incorrectAndChosen(choice)) {
        return total - 1;
      } else {
        return total;
      }
    }, config.choices.length);

    if (!config.partialScoring && correctCount < maxScore) {
      resolve({ score: 0 });
    } else {
      const scoreString = (correctCount / config.choices.length).toFixed(2);

      resolve({ score: parseFloat(scoreString) });
    }
  });
}
//# sourceMappingURL=index.js.map