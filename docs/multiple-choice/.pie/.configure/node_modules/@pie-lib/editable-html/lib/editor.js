'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Editor = exports.serialization = exports.DEFAULT_PLUGINS = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slateReact = require('slate-react');

var _slatePropTypes = require('slate-prop-types');

var _slatePropTypes2 = _interopRequireDefault(_slatePropTypes);

var _serialization = require('./serialization');

var serialization = _interopRequireWildcard(_serialization);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _slate = require('slate');

var _plugins = require('./plugins');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.DEFAULT_PLUGINS = _plugins.DEFAULT_PLUGINS;
exports.serialization = serialization;


var log = (0, _debug2.default)('editable-html:editor');

var Editor = exports.Editor = function (_React$Component) {
  _inherits(Editor, _React$Component);

  function Editor(props) {
    _classCallCheck(this, Editor);

    var _this = _possibleConstructorReturn(this, (Editor.__proto__ || Object.getPrototypeOf(Editor)).call(this, props));

    _this.onPluginBlur = function (e) {
      log('[onPluginBlur]', e.relatedTarget);
      var target = e.relatedTarget;

      var node = target ? (0, _slateReact.findNode)(target, _this.state.value) : null;
      log('[onPluginBlur] node: ', node);
      _this.setState({ focusedNode: node }, function () {
        _this.resetValue();
      });
    };

    _this.onPluginFocus = function (e) {
      log('[onPluginFocus]', e.target);
      var target = e.target;
      if (target) {
        var node = (0, _slateReact.findNode)(target, _this.state.value);
        log('[onPluginFocus] node: ', node);

        var stashedValue = _this.state.stashedValue || _this.state.value;
        _this.setState({ focusedNode: node, stashedValue: stashedValue });
      } else {
        _this.setState({ focusedNode: null });
      }
      _this.stashValue();
    };

    _this.onMathClick = function (node) {
      _this.editor.change(function (c) {
        return c.collapseToStartOf(node);
      });
      _this.setState({ selectedNode: node });
    };

    _this.onEditingDone = function () {
      log('[onEditingDone]');
      _this.setState({ stashedValue: null, focusedNode: null });
      log('[onEditingDone] value: ', _this.state.value);
      _this.props.onChange(_this.state.value);
    };

    _this.onBlur = function (event) {
      log('[onBlur]');
      var target = event.relatedTarget;

      var node = target ? (0, _slateReact.findNode)(target, _this.state.value) : null;

      log('[onBlur] node: ', node);

      return new Promise(function (resolve) {
        _this.setState({ focusedNode: node }, function () {
          _this.resetValue().then(function () {
            return resolve();
          });
        });
      });
    };

    _this.onFocus = function () {
      log('[onFocus]', document.activeElement);
      _this.stashValue();
    };

    _this.stashValue = function () {
      log('[stashValue]');
      if (!_this.state.stashedValue) {
        _this.setState({ stashedValue: _this.state.value });
      }
    };

    _this.resetValue = function () {
      var _this$state = _this.state,
          value = _this$state.value,
          focusedNode = _this$state.focusedNode;


      var stopReset = _this.plugins.reduce(function (s, p) {
        return s || p.stopReset && p.stopReset(_this.state.value);
      }, false);

      log('[resetValue]', value.isFocused, focusedNode, 'stopReset: ', stopReset);
      if (_this.state.stashedValue && !value.isFocused && !focusedNode && !stopReset) {
        log('[resetValue] resetting...');
        log('stashed', _this.state.stashedValue.document.toObject());
        log('current', _this.state.value.document.toObject());

        var newValue = _slate.Value.fromJSON(_this.state.stashedValue.toJSON());

        log('newValue: ', newValue.document);
        return new Promise(function (resolve) {
          setTimeout(function () {
            _this.setState({ value: newValue, stashedValue: null }, function () {
              log('value now: ', _this.state.value.document.toJSON());
              resolve();
            });
          }, 50);
        });
      } else {
        return Promise.resolve({});
      }
    };

    _this.onChange = function (change, done) {
      log('[onChange]');
      _this.setState({ value: change.value }, function () {
        log('[onChange], call done()');
        if (done) {
          done();
        }
      });
    };

    _this.valueToSize = function (v) {
      if (!v) {
        return;
      }

      if (typeof v === 'string') {
        if (v.endsWith('%')) {
          return undefined;
        } else if (v.endsWith('px')) {
          return v;
        } else {
          var value = parseInt(v, 10);
          return isNaN(value) ? value : value + 'px';
        }
      }
      if (typeof v === 'number') {
        return v + 'px';
      }

      return;
    };

    _this.validateNode = function (node) {
      if (node.object !== 'block') return;

      var last = node.nodes.last();
      if (!last) return;

      if (last.type !== 'image') return;

      log('[validateNode] last is image..');

      var parent = last.getParent(last.key);
      var p = _slate.Block.getParent(last.key);
      log('[validateNode] parent:', parent, p);

      return undefined;
    };

    _this.state = {
      value: props.value
    };

    _this.plugins = (0, _plugins.buildPlugins)(props.activePlugins, {
      math: {
        onClick: _this.onMathClick,
        onFocus: _this.onPluginFocus,
        onBlur: _this.onPluginBlur
      },
      image: {
        onDelete: _this.props.imageSupport && _this.props.imageSupport.delete && function (src, done) {
          _this.props.imageSupport.delete(src, function (e) {
            done(e, _this.state.value);
          });
        },
        insertImageRequested: _this.props.imageSupport && function (getHandler) {
          /**
           * The handler is the object through which the outer context
           * communicates file upload events like: fileChosen, cancel, progress
           */
          var handler = getHandler(function () {
            return _this.state.value;
          });
          _this.props.imageSupport.add(handler);
        },
        onFocus: _this.onPluginFocus,
        onBlur: _this.onPluginBlur
      },
      toolbar: {
        /**
         * To minimize converting html -> state -> html
         * We only emit markup once 'done' is clicked.
         */
        disableUnderline: props.disableUnderline,
        autoWidth: props.autoWidthToolbar,
        onDone: function onDone() {
          log('[onDone]');
          _this.setState({ toolbarInFocus: false, focusedNode: null });
          _this.editor.blur();
          _this.onEditingDone();
        }
      },
      table: {
        onFocus: function onFocus() {
          log('[table:onFocus]...');
          _this.onPluginFocus();
        },
        onBlur: function onBlur() {
          log('[table:onBlur]...');
          _this.onPluginBlur();
        }
      }
    });
    return _this;
  }

  /**
   * Reset the value if the user didn't click done.
   */


  _createClass(Editor, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (!props.value.document.equals(this.props.value.document)) {
        this.setState({
          focus: false,
          value: props.value
        });
      }
    }
  }, {
    key: 'buildSizeStyle',
    value: function buildSizeStyle() {
      var _props = this.props,
          width = _props.width,
          height = _props.height;


      return {
        width: this.valueToSize(width),
        height: this.valueToSize(height)
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          disabled = _props2.disabled,
          highlightShape = _props2.highlightShape,
          classes = _props2.classes,
          className = _props2.className;
      var _state = this.state,
          value = _state.value,
          focusedNode = _state.focusedNode;


      log('[render] value: ', value);
      var sizeStyle = this.buildSizeStyle();

      return _react2.default.createElement(
        'div',
        {
          style: sizeStyle,
          className: (0, _classnames2.default)(highlightShape && classes.withBg, className)
        },
        _react2.default.createElement(_slateReact.Editor, {
          plugins: this.plugins,
          ref: function ref(r) {
            return _this2.editor = r;
          },
          value: value,
          onChange: this.onChange,
          onBlur: this.onBlur,
          onFocus: this.onFocus,
          focusedNode: focusedNode,
          readOnly: disabled,
          className: classes.slateEditor
        })
      );
    }
  }]);

  return Editor;
}(_react2.default.Component);

Editor.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  value: _slatePropTypes2.default.value.isRequired,
  imageSupport: _propTypes2.default.object,
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  classes: _propTypes2.default.object.isRequired,
  highlightShape: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  disableUnderline: _propTypes2.default.bool,
  autoWidthToolbar: _propTypes2.default.bool,
  activePlugins: _propTypes2.default.arrayOf(function (values) {
    var allValid = values.every(function (v) {
      return _plugins.DEFAULT_PLUGINS.includes(v);
    });
    return !allValid && new Error('Invalid values: ' + values + ', values must be one of [' + _plugins.DEFAULT_PLUGINS.join(',') + ']');
  }),
  className: _propTypes2.default.string
};


var styles = {
  withBg: {
    backgroundColor: 'rgba(0,0,0,0.06)'
  },
  slateEditor: {
    fontFamily: 'Roboto, sans-serif'
  }
};
exports.default = (0, _styles.withStyles)(styles)(Editor);