'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _delete = require('./delete');

var _delete2 = _interopRequireDefault(_delete);

var _addPoint = require('./add-point');

var _addPoint2 = _interopRequireDefault(_addPoint);

var _box = require('./box');

var _box2 = _interopRequireDefault(_box);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const styles = theme => ({
  pointsColumnContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between'
  },
  pointsRow: {
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'flex-start'
  },
  pointInput: {
    display: 'flex',
    width: '10%',
    margin: theme.spacing.unit * 2,
    marginTop: 0
  },
  maxInputContainer: {
    display: 'flex',
    alignItems: 'center',
    flexWrap: 'wrap',
    justifyContent: 'flex-start'
  },
  maxInput: {
    display: 'flex',
    width: '30px',
    margin: 0,
    marginLeft: theme.spacing.unit * 2
  }
});

class PointConfig extends React.Component {

  render() {
    var _props = this.props;
    const classes = _props.classes,
          withLabels = _props.withLabels,
          model = _props.model,
          config = _props.config,
          addPoint = _props.addPoint,
          onMaxPointsChange = _props.onMaxPointsChange,
          deletePoint = _props.deletePoint,
          onPointValueChange = _props.onPointValueChange,
          onPointLabelChange = _props.onPointLabelChange;


    return React.createElement(
      _box2.default,
      null,
      React.createElement(
        'div',
        { className: classes.pointsColumnContainer },
        model.correctResponse.length === 0 && React.createElement(
          _Typography2.default,
          null,
          'There are currently no points added.'
        ),
        model.correctResponse.map((point, index) => {
          var _point$split = point.split(','),
              _point$split2 = _slicedToArray(_point$split, 2);

          const pointX = _point$split2[0],
                pointY = _point$split2[1];


          return React.createElement(
            'div',
            { className: classes.pointsRow, key: index },
            React.createElement(
              'b',
              null,
              '('
            ),
            React.createElement(_Input2.default, {
              inputProps: {
                min: config.domainMin,
                max: config.domainMax
              },
              className: classes.pointInput,
              type: 'number',
              onChange: onPointValueChange(index, 0),
              value: pointX,
              placeholder: 'Enter Value'
            }),
            React.createElement(
              'b',
              null,
              ','
            ),
            React.createElement(_Input2.default, {
              inputProps: {
                min: config.rangeMin,
                max: config.rangeMax
              },
              className: classes.pointInput,
              type: 'number',
              onChange: onPointValueChange(index, 1),
              value: pointY,
              placeholder: 'Enter Value'
            }),
            React.createElement(
              'b',
              null,
              ')'
            ),
            withLabels && React.createElement(_Input2.default, {
              className: classes.pointInput,
              type: 'text',
              onChange: onPointLabelChange(index),
              value: config.pointLabels[index],
              placeholder: 'Enter Value'
            }),
            React.createElement(_delete2.default, { onDeleteClick: deletePoint(index), disabled: false })
          );
        }),
        React.createElement(_addPoint2.default, { onAddClick: addPoint }),
        React.createElement(
          'div',
          { className: classes.maxInputContainer },
          React.createElement(
            _Typography2.default,
            { type: 'body1' },
            'Maximum number of points a student is allowed to plot (optional):'
          ),
          React.createElement(_Input2.default, {
            inputProps: {
              min: 0,
              max: 20
            },
            className: classes.maxInput,
            type: 'number',
            onChange: onMaxPointsChange,
            value: config.maxPoints,
            placeholder: 'Enter Value'
          })
        )
      )
    );
  }
}

PointConfig.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  withLabels: _propTypes2.default.bool,
  model: _propTypes2.default.object.isRequired,
  config: _propTypes2.default.object.isRequired,
  addPoint: _propTypes2.default.func.isRequired,
  onMaxPointsChange: _propTypes2.default.func.isRequired,
  deletePoint: _propTypes2.default.func.isRequired,
  onPointValueChange: _propTypes2.default.func.isRequired,
  onPointLabelChange: _propTypes2.default.func.isRequired
};
exports.default = (0, _styles.withStyles)(styles)(PointConfig);