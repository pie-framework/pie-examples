'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _domainAndRange = require('./domain-and-range');

var _domainAndRange2 = _interopRequireDefault(_domainAndRange);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _utils = require('./utils');

var _chartingTypes = require('./charting-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var hasPoint = _point.utils.hasPoint,
    trim = _point.utils.trim,
    pointIndex = _point.utils.pointIndex;


var log = (0, _debug2.default)('pie-lib:charting:plot-points');

var PlotPoints = function (_React$Component) {
  _inherits(PlotPoints, _React$Component);

  function PlotPoints() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PlotPoints);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PlotPoints.__proto__ || Object.getPrototypeOf(PlotPoints)).call.apply(_ref, [this].concat(args))), _this), _this.getPointBounds = function (p) {
      return _point.utils.bounds(p, _this.props.domain, _this.props.range);
    }, _this.onDomainClick = function (point) {
      var _this$props = _this.props,
          onAddPoint = _this$props.onAddPoint,
          domain = _this$props.domain,
          range = _this$props.range,
          points = _this$props.points,
          maxNoOfPoints = _this$props.maxNoOfPoints;

      var snapped = {
        x: (0, _utils.snapTo)(domain.min, domain.max, domain.step, point.x),
        y: (0, _utils.snapTo)(range.min, range.max, range.step, point.y)
      };
      var max = maxNoOfPoints || 0;

      if (!hasPoint(points, snapped) && (max === 0 || points.length < max)) {
        //Note: adding the label is outside the scope of this comp.
        onAddPoint(snapped);
      }
    }, _this.selectedIndex = function (p) {
      return pointIndex(_this.props.selection, p);
    }, _this.isSelected = function (p) {
      return hasPoint(_this.props.selection, p);
    }, _this.toggleSelectPoint = function (p) {
      var onSelectionChange = _this.props.onSelectionChange;

      var point = trim(p);
      var index = _this.selectedIndex(point);

      var selection = (_this.props.selection || []).slice();

      if (index === -1) {
        selection.push(point);
      } else {
        selection.splice(index, 1);
      }

      log('[toggleSelectPoint] selection:', selection);

      onSelectionChange(selection);
    }, _this.movePoint = function (from, to) {
      var onMovePoint = _this.props.onMovePoint;

      onMovePoint(trim(from), trim(to));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PlotPoints, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          title = _props.title,
          width = _props.width,
          height = _props.height,
          domain = _props.domain,
          range = _props.range,
          points = _props.points,
          disabled = _props.disabled,
          showPointLabels = _props.showPointLabels,
          showPointCoordinates = _props.showPointCoordinates;


      var preppedPoints = (points || []).map(function (p) {
        return _extends({}, p, {
          selected: _this2.isSelected(p)
        });
      });

      return _react2.default.createElement(
        _domainAndRange2.default,
        {
          title: title,
          disabled: disabled,
          onClick: this.onDomainClick,
          width: width,
          height: height,
          domain: domain,
          range: range
        },
        preppedPoints.map(function (p, index) {
          return _react2.default.createElement(_point2.default, _extends({
            key: index,
            showCoordinates: showPointCoordinates,
            showLabels: showPointLabels
          }, p, {
            disabled: disabled,
            onClick: function onClick() {
              return _this2.toggleSelectPoint(p);
            },
            empty: false,
            bounds: _this2.getPointBounds(p),
            onMove: function onMove(n) {
              return _this2.movePoint(p, n);
            },
            interval: 1
          }));
        })
      );
    }
  }]);

  return PlotPoints;
}(_react2.default.Component);

PlotPoints.propTypes = {
  title: _propTypes2.default.string,
  width: _propTypes2.default.number.isRequired,
  height: _propTypes2.default.number.isRequired,
  points: _propTypes2.default.arrayOf(_chartingTypes.PointType),
  domain: _propTypes2.default.object.isRequired,
  range: _propTypes2.default.object.isRequired,
  disabled: _propTypes2.default.bool.isRequired,
  onAddPoint: _propTypes2.default.func.isRequired,
  onSelectionChange: _propTypes2.default.func.isRequired,
  onMovePoint: _propTypes2.default.func.isRequired,
  selection: _propTypes2.default.arrayOf(_chartingTypes.PointType),
  labels: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.oneOf(['numbers', 'letters'])]),
  showPointCoordinates: _propTypes2.default.bool,
  showPointLabels: _propTypes2.default.bool,
  maxNoOfPoints: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};
PlotPoints.defaultProps = {
  showPointLabels: true
};
exports.default = PlotPoints;