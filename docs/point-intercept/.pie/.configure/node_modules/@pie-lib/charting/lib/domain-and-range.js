'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DomainAndRange = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.ContextTypes = ContextTypes;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _grid = require('@vx/grid');

var _axis = require('@vx/axis');

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _d3Scale = require('d3-scale');

var _chartingTypes = require('./charting-types');

var _utils = require('./utils');

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _arrow = require('./arrow');

var _arrow2 = _interopRequireDefault(_arrow);

var _d3Selection = require('d3-selection');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function ContextTypes() {
  return {
    scale: _propTypes2.default.shape({
      x: _propTypes2.default.func.isRequired,
      y: _propTypes2.default.func.isRequired
    }).isRequired,
    snap: _propTypes2.default.shape({
      x: _propTypes2.default.func.isRequired,
      y: _propTypes2.default.func.isRequired
    }).isRequired
  };
}

var DomainAndRange = exports.DomainAndRange = function (_React$Component) {
  _inherits(DomainAndRange, _React$Component);

  function DomainAndRange() {
    _classCallCheck(this, DomainAndRange);

    return _possibleConstructorReturn(this, (DomainAndRange.__proto__ || Object.getPrototypeOf(DomainAndRange)).apply(this, arguments));
  }

  _createClass(DomainAndRange, [{
    key: 'getScaleFunctions',
    value: function getScaleFunctions() {
      var _props = this.props,
          domain = _props.domain,
          range = _props.range,
          width = _props.width,
          height = _props.height;


      (0, _invariant2.default)(domain.min < domain.max, 'domain: min must be less than max');
      (0, _invariant2.default)(range.min < range.max, 'range: min must be less than max');

      var widthArray = (0, _utils.buildSizeArray)(width, domain.padding);
      var heightArray = (0, _utils.buildSizeArray)(height, range.padding);

      var scale = {
        x: (0, _d3Scale.scaleLinear)().domain([domain.min, domain.max]).range(widthArray),
        y: (0, _d3Scale.scaleLinear)().domain([range.max, range.min]).range(heightArray)
      };

      var snap = {
        x: _utils.snapTo.bind(null, domain.min, domain.max, 1),
        y: _utils.snapTo.bind(null, range.min, range.max, 1)
      };

      return { scale: scale, snap: snap };
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return this.getScaleFunctions();
    }

    /**
     * Note: we use d3 click + mouse to give us domain values directly.
     * Saves us having to calculate them ourselves from a MouseEvent.
     */

  }, {
    key: 'onRectClick',
    value: function onRectClick(rect) {
      var _props2 = this.props,
          disabled = _props2.disabled,
          onClick = _props2.onClick;


      if (disabled) {
        return;
      }

      if (!onClick) {
        return;
      }

      //TODO: should minimize calls to this function - should only rebuild on props update

      var _getScaleFunctions = this.getScaleFunctions(),
          scale = _getScaleFunctions.scale;

      var coords = (0, _d3Selection.mouse)(rect._groups[0][0]);
      var x = scale.x.invert(coords[0]);
      var y = scale.y.invert(coords[1]);
      onClick({ x: x, y: y });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var rect = (0, _d3Selection.select)(this.rect);
      rect.on('click', this.onRectClick.bind(this, rect));
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props3 = this.props,
          className = _props3.className,
          classes = _props3.classes,
          domain = _props3.domain,
          range = _props3.range,
          width = _props3.width,
          height = _props3.height,
          children = _props3.children,
          title = _props3.title,
          disabled = _props3.disabled;

      var _getScaleFunctions2 = this.getScaleFunctions(),
          scale = _getScaleFunctions2.scale;

      return _react2.default.createElement(
        'div',
        { className: className },
        title && _react2.default.createElement(
          'h4',
          { className: classes.title },
          title
        ),
        _react2.default.createElement(
          'svg',
          {
            width: width,
            height: height,
            className: (0, _classnames2.default)(classes.svg, disabled && classes.disabled)
          },
          _react2.default.createElement(_grid.Grid, {
            xScale: scale.x,
            yScale: scale.y,
            width: width,
            height: height,
            numTicksRows: (0, _utils.tickCount)(domain.min, domain.max, domain.step),
            stroke: disabled ? 'rgba(236, 239, 241, 0.5)' : 'rgb(236, 239, 241)',
            numTicksColumns: (0, _utils.tickCount)(range.min, range.max, domain.step)
          }),
          _react2.default.createElement(_axis.Axis, {
            orientation: 'left',
            scale: scale.y,
            top: 0,
            height: height,
            left: scale.x(0),
            numTicks: (0, _utils.tickCount)(range.min, range.max, range.step),
            stroke: 'rgba(144, 164, 174, ' + (disabled ? '0.3' : '1') + ')',
            strokeWidth: 2,
            label: range.label,
            tickTextFill: 'red',
            tickTextDy: 10,
            hideZero: true,
            tickTextFontSize: 20,
            tickText: {
              fontSize: 20
            },
            tickTextAnchor: 'bottom'
          }),
          _react2.default.createElement(_axis.Axis, {
            hideZero: true,
            scale: scale.x,
            numTicks: (0, _utils.tickCount)(domain.min, domain.max, domain.step),
            top: scale.y(0),
            left: 0,
            stroke: 'rgba(144, 164, 174, ' + (disabled ? '0.5' : '1') + ')',
            strokeWidth: 2,
            label: domain.label,
            tickTextFill: '#1b1a1e'
          }),
          _react2.default.createElement('rect', {
            ref: function ref(rect) {
              return _this2.rect = rect;
            }
            //need to have a fill for it to be clickable
            , fill: 'red',
            fillOpacity: '0.0',
            width: width,
            height: height
          }),
          _react2.default.createElement(_arrow2.default, {
            x: width / 2,
            y: 0,
            className: classes.arrow,
            direction: 'up'
          }),
          _react2.default.createElement(_arrow2.default, {
            x: width / 2,
            y: height,
            className: classes.arrow,
            direction: 'down'
          }),
          _react2.default.createElement(_arrow2.default, {
            x: width,
            y: height / 2,
            direction: 'right',
            className: classes.arrow
          }),
          _react2.default.createElement(_arrow2.default, { x: 0, y: height / 2, className: classes.arrow }),
          _react2.default.createElement(_arrow2.default, {
            x: width,
            y: height / 2,
            direction: 'right',
            className: classes.arrow
          }),
          children
        )
      );
    }
  }]);

  return DomainAndRange;
}(_react2.default.Component);

DomainAndRange.childContextTypes = ContextTypes();
DomainAndRange.propTypes = {
  className: _propTypes2.default.string,
  classes: _propTypes2.default.object.isRequired,
  disabled: _propTypes2.default.bool.isRequired,
  children: _propTypes2.default.node.isRequired,
  width: _propTypes2.default.number.isRequired,
  height: _propTypes2.default.number.isRequired,
  domain: _chartingTypes.AxisType.isRequired,
  range: _chartingTypes.AxisType.isRequired,
  title: _propTypes2.default.string,
  onClick: _propTypes2.default.func
};


var styles = {
  title: {
    marginLeft: 'auto',
    marginRight: 'auto',
    textAlign: 'center',
    marginTop: '0'
  },
  svg: {
    cursor: 'pointer'
  },
  disabled: {
    cursor: 'inherit'
  },
  arrow: {
    fill: 'rgb(144, 164, 174)'
  }
};

exports.default = (0, _reactJss2.default)(styles)(DomainAndRange);