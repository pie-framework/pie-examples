'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toolbar = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _toolbarButtons = require('./toolbar-buttons');

var _Check = require('@material-ui/icons/Check');

var _Check2 = _interopRequireDefault(_Check);

var _Delete = require('@material-ui/icons/Delete');

var _Delete2 = _interopRequireDefault(_Delete);

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _slatePropTypes = require('slate-prop-types');

var _slatePropTypes2 = _interopRequireDefault(_slatePropTypes);

var _utils = require('../utils');

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('pie-elements:editable-html:plugins:toolbar');

var ToolbarButton = function ToolbarButton(props) {
  var onToggle = function onToggle() {
    var c = props.onToggle(props.value.change(), props);
    props.onChange(c);
  };

  if (props.isMark) {
    var isActive = (0, _utils.hasMark)(props.value, props.type);
    log('[ToolbarButton] mark:isActive: ', isActive);
    return _react2.default.createElement(
      _toolbarButtons.MarkButton,
      {
        active: isActive,
        label: props.type,
        onToggle: onToggle,
        mark: props.type
      },
      props.icon
    );
  } else {
    var _isActive = props.isActive ? props.isActive(props.value, props.type) : (0, _utils.hasBlock)(props.value, props.type);
    log('[ToolbarButton] block:isActive: ', _isActive);
    return _react2.default.createElement(
      _toolbarButtons.Button,
      {
        onClick: function onClick() {
          return props.onClick(props.value, props.onChange);
        },
        active: _isActive
      },
      props.icon
    );
  }
};

var DefaultToolbar = function DefaultToolbar(_ref) {
  var plugins = _ref.plugins,
      value = _ref.value,
      onChange = _ref.onChange;

  var toolbarPlugins = plugins.filter(function (p) {
    return p.toolbar;
  }).map(function (p) {
    return p.toolbar;
  });
  return _react2.default.createElement(
    'div',
    null,
    toolbarPlugins.map(function (p, index) {
      return _react2.default.createElement(ToolbarButton, _extends({}, p, { key: index, value: value, onChange: onChange }));
    })
  );
};

DefaultToolbar.propTypes = {
  plugins: _propTypes2.default.array.isRequired,
  value: _slatePropTypes2.default.value.isRequired,
  onChange: _propTypes2.default.func.isRequired
};

var Toolbar = exports.Toolbar = function (_React$Component) {
  _inherits(Toolbar, _React$Component);

  function Toolbar(props) {
    _classCallCheck(this, Toolbar);

    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, props));

    _this.hasMark = function (type) {
      var value = _this.props.value;

      return value.marks.some(function (mark) {
        return mark.type == type;
      });
    };

    _this.hasBlock = function (type) {
      var value = _this.props.value;

      return value.blocks.some(function (node) {
        return node.type == type;
      });
    };

    _this.onToggle = function (plugin) {
      var _this$props = _this.props,
          value = _this$props.value,
          onChange = _this$props.onChange;


      if (!plugin.onToggle) return;

      var change = plugin.onToggle(value.change());
      onChange(change);
    };

    _this.onClick = function (e) {
      log('[onClick]');
      e.preventDefault();
    };

    _this.onButtonClick = function (fn) {
      return function (e) {
        e.preventDefault();
        fn();
      };
    };

    return _this;
  }

  _createClass(Toolbar, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          classes = _props.classes,
          onDone = _props.onDone,
          plugins = _props.plugins,
          value = _props.value,
          onChange = _props.onChange,
          isFocused = _props.isFocused;


      var node = (0, _utils.findSingleNode)(value);

      log('[render] node: ', node);

      var plugin = plugins.find(function (p) {
        if (!node) {
          return;
        }

        if (p.toolbar) {
          return p.toolbar.supports && p.toolbar.supports(node);
        }
      });

      log('[render] plugin: ', plugin);

      var CustomToolbar = plugin && plugin.toolbar && plugin.toolbar.customToolbar ? plugin.toolbar.customToolbar(node) : null;

      log('[render] CustomToolbar: ', CustomToolbar);

      var names = (0, _classnames2.default)(classes.toolbar, isFocused && classes.focused);

      var doneFn = this.onButtonClick(onDone);

      var deletable = node && plugin && plugin.deleteNode;

      return _react2.default.createElement(
        'div',
        { className: names, onClick: this.onClick },
        CustomToolbar ? _react2.default.createElement(CustomToolbar, { value: value, onChange: onChange, node: node }) : _react2.default.createElement(DefaultToolbar, { plugins: plugins, value: value, onChange: onChange }),
        _react2.default.createElement(
          'div',
          { className: classes.shared },
          deletable && _react2.default.createElement(
            _IconButton2.default,
            {
              'aria-label': 'Delete',
              style: { width: '28px', height: '28px' },
              className: classes.iconRoot,
              onClick: function onClick(e) {
                return plugin.deleteNode(e, node, value, onChange);
              },
              classes: {
                root: classes.iconRoot
              }
            },
            _react2.default.createElement(_Delete2.default, null)
          ),
          _react2.default.createElement(
            _IconButton2.default,
            {
              'aria-label': 'Done',
              style: { width: '28px', height: '28px' },
              className: classes.iconRoot,
              onClick: plugin && plugin.onDone ? function (e) {
                return plugin.onDone(e, node, value, onChange, doneFn);
              } : doneFn,
              classes: {
                label: classes.label,
                root: classes.iconRoot
              }
            },
            _react2.default.createElement(_Check2.default, null)
          )
        )
      );
    }
  }]);

  return Toolbar;
}(_react2.default.Component);

Toolbar.propTypes = {
  zIndex: _propTypes2.default.number,
  value: _slatePropTypes2.default.value.isRequired,
  plugins: _propTypes2.default.array,
  onImageClick: _propTypes2.default.func,
  onDone: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object.isRequired,
  isFocused: _propTypes2.default.bool,
  onChange: _propTypes2.default.func.isRequired
};


var style = {
  toolbar: {
    position: 'absolute',
    zIndex: 10,
    cursor: 'pointer',
    justifyContent: 'space-between',
    background: 'var(--editable-html-toolbar-bg, #efefef)',
    margin: '0px',
    padding: '2px',
    width: '100%',
    boxShadow: '0px 1px 5px 0px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12)',
    boxSizing: 'border-box',
    display: 'none'
  },
  focused: {
    display: 'flex'
  },
  iconRoot: {
    width: '28px',
    height: '28px'
  },
  label: {
    color: 'var(--editable-html-toolbar-check, #00bb00)'
  }
};
exports.default = (0, _styles.withStyles)(style, { index: 1000 })(Toolbar);