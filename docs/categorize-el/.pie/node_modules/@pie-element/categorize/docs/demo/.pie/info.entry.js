
/** Auto generated by /Users/edeustace/dev/github/pie-framework/pie-cli/lib/apps/info/entry.js */

//pie controllers
let controllers = {};
controllers['categorize-element'] = require('@pie-element/categorize-controller');


//config declarations
import CategorizeElementConfigure from '@pie-element/categorize-configure';
customElements.define('categorize-element-configure', CategorizeElementConfigure);


//pie declarations
import CategorizeElement from '@pie-ui/categorize';
customElements.define('categorize-element', CategorizeElement);

// the catalog ui
import { defineRepoElements } from 'pie-catalog-client';

let initSock = 
function (sockPath){

  let sock = new SockJS(sockPath);

  sock.onopen = function() {
    console.log('sock is open');
  };

  function tryToParse(d){
    try {
     return JSON.parse(d);
    } catch(e){
      return null;
    }
  }

  sock.onmessage = function(e) {
    console.log('sock message', e.data);
    let dataObj = tryToParse(e.data);
    if(dataObj.type === 'reload'){
      window.location.reload(false);
    } else if(dataObj.type == 'error'){
      //TODO - render the errors in the UI?
      alert('webpack errors have occured - check the logs');
    }
  };

  sock.onclose = function() {
    console.log('sock is closed');
  };
}


let init = () => {

  defineRepoElements() 
    .then(() => {
      let entry = document.querySelector('catalog-entry');
      entry.element = window.element;

      entry.config = window.orgRepo;

      if (!window.demo.config) {
        throw new Error('config is missing');
      }
      let demo = document.querySelector('catalog-demo');
      demo.configureMap = {"categorize-element":"categorize-element-configure"};
      demo.config = window.demo.config;
      demo.controllers = controllers;
      demo.markup = window.demo.markup;
      demo.session = window.demo.session;

      setTimeout(() => {
        let c = document.querySelector('catalog-container');
        c.isLoading(false);
      }, 180);
    });

  initSock('/sock');
}

document.addEventListener('DOMContentLoaded', () => {
  init();
}); 