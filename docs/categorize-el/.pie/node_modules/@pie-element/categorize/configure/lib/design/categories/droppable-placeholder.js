'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spec = exports.DroppablePlaceHolder = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _choicePreview = require('./choice-preview');

var _choicePreview2 = _interopRequireDefault(_choicePreview);

var _reactDnd = require('react-dnd');

var _drag = require('@pie-lib/drag');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:categorize:configure');

const Helper = (0, _styles.withStyles)(() => ({
  helper: {
    display: 'flex',
    alignItems: 'center',
    fontSize: '12px',
    color: 'rgba(0,0,0,0.4)',
    width: '100%',
    height: '100%'
  }
}))(({ classes }) => _react2.default.createElement(
  'div',
  { className: classes.helper },
  'Drag your correct answers here'
));

const Previews = ({ choices, onDeleteChoice }) => _react2.default.createElement(
  _react2.default.Fragment,
  null,
  choices.map((c, index) => _react2.default.createElement(_choicePreview2.default, {
    choice: c,
    key: index,
    onDelete: choice => onDeleteChoice(choice, index)
  }))
);

Previews.propTypes = {
  choices: _propTypes2.default.array,
  onDeleteChoice: _propTypes2.default.func
};

class DroppablePlaceHolder extends _react2.default.Component {
  render() {
    var _props = this.props;
    const isOver = _props.isOver,
          choices = _props.choices,
          classes = _props.classes,
          className = _props.className,
          connectDropTarget = _props.connectDropTarget,
          onDeleteChoice = _props.onDeleteChoice;


    return connectDropTarget(_react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(classes.droppablePlaceholder, className) },
      _react2.default.createElement(
        _drag.PlaceHolder,
        { isOver: isOver, className: classes.placeHolder },
        (choices || []).length === 0 ? _react2.default.createElement(Helper, null) : _react2.default.createElement(Previews, { choices: choices, onDeleteChoice: onDeleteChoice })
      )
    ));
  }
}
exports.DroppablePlaceHolder = DroppablePlaceHolder;
DroppablePlaceHolder.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  connectDropTarget: _propTypes2.default.func.isRequired,
  choices: _propTypes2.default.array,
  onDropChoice: _propTypes2.default.func.isRequired,
  isOver: _propTypes2.default.bool,
  onDeleteChoice: _propTypes2.default.func,
  categoryId: _propTypes2.default.string.isRequired
};
DroppablePlaceHolder.defaultProps = {};
const styles = () => ({
  droppablePlaceholder: {
    minHeight: '100px'
  },
  placeHolder: {
    width: '100%',
    minHeight: '100px'
  }
});

const Styled = (0, _styles.withStyles)(styles)(DroppablePlaceHolder);

const spec = exports.spec = {
  drop: (props, monitor) => {
    log('[drop] props: ', props);
    const item = monitor.getItem();
    props.onDropChoice(item, props.categoryId);
  },
  canDrop: (props /*, monitor*/) => {
    return !props.disabled;
  }
};

const WithTarget = (0, _reactDnd.DropTarget)(({ uid }) => uid, spec, (connect, monitor) => ({
  connectDropTarget: connect.dropTarget(),
  isOver: monitor.isOver()
}))(Styled);

exports.default = _drag.uid.withUid(WithTarget);