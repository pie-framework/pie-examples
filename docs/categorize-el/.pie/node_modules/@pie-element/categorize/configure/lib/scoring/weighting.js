'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Weighting = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _panel = require('./panel');

var _panel2 = _interopRequireDefault(_panel);

var _configUi = require('@pie-lib/config-ui');

var _grey = require('@material-ui/core/colors/grey');

var _grey2 = _interopRequireDefault(_grey);

var _Chip = require('@material-ui/core/Chip');

var _Chip2 = _interopRequireDefault(_Chip);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _grid = require('./grid');

var _grid2 = _interopRequireDefault(_grid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:categorize:configure:weighting');


const Percent = ({ percent, className }) => _react2.default.createElement(_Chip2.default, { classes: { root: className }, label: `${percent}%` });

Percent.propTypes = {
  percent: _propTypes2.default.string.isRequired,
  className: _propTypes2.default.string
};

const cell = () => ({
  alignSelf: 'center',
  borderBottom: `solid 1px ${_grey2.default[300]}`
});

const Rule = (0, _styles.withStyles)(() => ({
  label: cell(),
  number: cell(),
  percent: cell()
}))(({ classes, rule, onChange, percent, disabled }) => {
  const changeRule = (event, number) => {
    rule.points = number;
    onChange(rule);
  };
  return _react2.default.createElement(
    _react2.default.Fragment,
    null,
    _react2.default.createElement(_grid.Cell, { html: rule.label }),
    _react2.default.createElement(
      _grid.Cell,
      null,
      _react2.default.createElement(_configUi.NumberTextField, {
        disabled: disabled,
        className: classes.number,
        min: 0,
        max: 20,
        value: rule.points,
        suffix: rule.points === 1 ? 'pt' : 'pts',
        onChange: changeRule
      })
    ),
    _react2.default.createElement(
      _grid.Cell,
      null,
      _react2.default.createElement(Percent, { className: classes.percent, percent: percent })
    )
  );
});

const build = (rules, categories) => {
  return categories.map(c => {
    const rule = rules.find(r => r.category === c.id) || { points: 1 };
    return {
      label: c.label,
      category: c.id,
      points: rule.points
    };
  });
};

class Weighting extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.toggleEnabled = () => {
      var _props = this.props;
      const weighting = _props.weighting,
            onChange = _props.onChange;

      weighting.enabled = !weighting.enabled;
      onChange(weighting);
    }, this.changeRule = rule => {
      var _props2 = this.props;
      const weighting = _props2.weighting,
            onChange = _props2.onChange;


      const index = weighting.rules.findIndex(r => r.category === rule.category);
      const r = { category: rule.category, points: rule.points };
      if (index === -1) {
        weighting.rules.push(r);
      } else {
        weighting.rules.splice(index, 1, r);
      }

      log('[changeRule]: ', weighting);

      onChange(weighting);
    }, this.getPercent = (rule, rules) => {
      const total = rules.reduce((sum, r) => sum + r.points, 0);
      const rawPercent = rule.points / total * 100;
      return rawPercent.toFixed(0);
    }, _temp;
  }

  render() {
    var _props3 = this.props;
    const weighting = _props3.weighting,
          categories = _props3.categories;


    const rules = build(weighting.rules, categories);
    return _react2.default.createElement(
      _panel2.default,
      {
        title: 'Weighting',
        enabled: weighting.enabled,
        onToggleEnabled: this.toggleEnabled
      },
      _react2.default.createElement(
        _grid2.default,
        { headings: ['Category', 'Points', ''], size: '1fr 70px 70px' },
        rules.map((r, index) => _react2.default.createElement(Rule, {
          rule: r,
          disabled: !weighting.enabled,
          percent: this.getPercent(r, rules),
          onChange: this.changeRule,
          key: index
        }))
      )
    );
  }
}
exports.Weighting = Weighting;
Weighting.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  weighting: _propTypes2.default.object,
  onChange: _propTypes2.default.func.isRequired,
  categories: _propTypes2.default.array
};
Weighting.defaultProps = {};
const styles = () => ({
  weighting: {},
  ruleHolder: {
    display: 'grid',
    backgroundColor: 'red',
    gridTemplateColumns: '1fr 70px 70px',
    gridRowGap: '1px',
    gridColumnGap: 0
  }
});
exports.default = (0, _styles.withStyles)(styles)(Weighting);