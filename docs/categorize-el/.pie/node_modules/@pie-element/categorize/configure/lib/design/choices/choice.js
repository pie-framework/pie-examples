'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spec = exports.Choice = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Card = require('@material-ui/core/Card');

var _Card2 = _interopRequireDefault(_Card);

var _CardActions = require('@material-ui/core/CardActions');

var _CardActions2 = _interopRequireDefault(_CardActions);

var _inputHeader = require('../input-header');

var _inputHeader2 = _interopRequireDefault(_inputHeader);

var _configUi = require('@pie-lib/config-ui');

var _buttons = require('../buttons');

var _DragHandle = require('@material-ui/icons/DragHandle');

var _DragHandle2 = _interopRequireDefault(_DragHandle);

var _reactDnd = require('react-dnd');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _drag = require('@pie-lib/drag');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:categorize:configure:choice');

const canDrag = props => {
  const count = props.choice.categoryCount || 0;
  if (count === 0) {
    return true;
  } else {
    return props.correctResponseCount < count;
  }
};

class Choice extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.changeContent = content => {
      var _props = this.props;
      const onChange = _props.onChange,
            choice = _props.choice;

      choice.content = content;
      onChange(choice);
    }, this.changeCategoryCount = () => {
      var _props2 = this.props;
      const onChange = _props2.onChange,
            choice = _props2.choice;

      if (choice.categoryCount === 1) {
        choice.categoryCount = 0;
      } else {
        choice.categoryCount = 1;
      }
      onChange(choice);
    }, _temp;
  }

  render() {
    var _props3 = this.props;
    const classes = _props3.classes,
          className = _props3.className,
          choice = _props3.choice,
          onDelete = _props3.onDelete,
          connectDragSource = _props3.connectDragSource,
          connectDragPreview = _props3.connectDragPreview;


    const draggable = canDrag(this.props);

    return _react2.default.createElement(
      _Card2.default,
      { className: (0, _classnames2.default)(classes.choice, className) },
      _react2.default.createElement(
        _CardActions2.default,
        { className: classes.actions },
        connectDragSource(_react2.default.createElement(
          'span',
          {
            className: (0, _classnames2.default)(classes.dragHandle, draggable === false && classes.dragDisabled)
          },
          _react2.default.createElement(_DragHandle2.default, { color: draggable ? 'primary' : 'disabled' })
        ))
      ),
      connectDragPreview(_react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(_inputHeader2.default, {
          label: choice.content,
          onChange: this.changeContent,
          onDelete: onDelete
        })
      )),
      _react2.default.createElement(
        _CardActions2.default,
        { className: classes.actions },
        _react2.default.createElement(_buttons.DeleteButton, { label: 'delete', onClick: onDelete }),
        _react2.default.createElement(_configUi.Checkbox, {
          mini: true,
          label: 'Remove after placing',
          checked: choice.categoryCount === 1,
          onChange: this.changeCategoryCount
        })
      )
    );
  }
}
exports.Choice = Choice;
Choice.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  choice: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  onDelete: _propTypes2.default.func.isRequired,
  connectDragSource: _propTypes2.default.func.isRequired,
  connectDragPreview: _propTypes2.default.func.isRequired,
  correctResponseCount: _propTypes2.default.number.isRequired
};
Choice.defaultProps = {};
const styles = theme => ({
  actions: {
    padding: 0,
    justifyContent: 'space-between'
  },
  choice: {
    padding: theme.spacing.unit
  },
  dragHandle: {
    cursor: 'move'
  },
  dragDisabled: {
    cursor: 'inherit'
  }
});

const StyledChoice = (0, _styles.withStyles)(styles)(Choice);

const spec = exports.spec = {
  canDrag,
  beginDrag: props => {
    const out = {
      id: props.choice.id
    };
    log('[beginDrag] out:', out);
    return out;
  },
  endDrag: (props, monitor) => {
    if (!monitor.didDrop()) {
      const item = monitor.getItem();
      if (item.categoryId) {
        log('wasnt droppped - what to do?');
        props.onRemoveChoice(item);
      }
    }
  }
};

const DraggableChoice = (0, _reactDnd.DragSource)(({ uid }) => uid, spec, (connect, monitor) => ({
  connectDragSource: connect.dragSource(),
  connectDragPreview: connect.dragPreview(),
  isDragging: monitor.isDragging()
}))(StyledChoice);

exports.default = _drag.uid.withUid(DraggableChoice);