'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Design = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _categories = require('./categories');

var _categories2 = _interopRequireDefault(_categories);

var _choices = require('./choices');

var _choices2 = _interopRequireDefault(_choices);

var _buttons = require('./buttons');

var _builder = require('./builder');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _drag = require('@pie-lib/drag');

var _categorize = require('@pie-lib/categorize');

var _configUi = require('@pie-lib/config-ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IdProvider = _drag.uid.Provider;


const log = (0, _debug2.default)('@pie-element:categorize:configure:design');

class Design extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.apply = applyFn => {
      var _props = this.props;
      const model = _props.model,
            onChange = _props.onChange;


      applyFn(model);

      //Ensure that there are no extra choices in correctResponse, if the user has decided that only one choice may be used.
      model.correctResponse = (0, _categorize.ensureNoExtraChoicesInAnswer)(model.correctResponse || [], model.choices);
      //clean categories
      model.categories = model.categories.map(c => ({
        id: c.id,
        label: c.label
      }));

      model.choices = model.choices.map(h => ({
        id: h.id,
        content: h.content,
        categoryCount: h.categoryCount
      }));
      onChange(model);
    };

    this.changeCategoryColumns = event => {
      this.apply(model => {
        model.config = model.config || {};
        model.config.categories = model.config.categories || { columns: 2 };
        model.config.categories.columns = parseInt(event.target.value, 10);
      });
    };

    this.changeCategories = categories => {
      this.apply(model => model.categories = categories);
    };

    this.changeChoices = choices => {
      log('[changeChoices]', choices);
      this.apply(model => model.choices = choices);
    };

    this.addCategory = () => {
      this.add('categories', id => ({ id, label: 'Category ' + id }));
    };

    this.addChoice = () => {
      this.add('choices', id => ({ id, content: 'Choice ' + id }));
    };

    this.add = (name, build) => {
      this.apply(model => {
        log('name: ', name, model, _configUi.choiceUtils);
        const id = _configUi.choiceUtils.firstAvailableIndex(model[name].map(a => a.id), 0);
        const data = build(id);
        model[name] = model[name].concat([data]);
      });
    };

    this.deleteChoice = choice => {
      log('[deleteChoice] category: ', choice);
      var _props2 = this.props;
      const model = _props2.model,
            onChange = _props2.onChange;

      const index = model.choices.findIndex(a => a.id === choice.id);
      if (index !== -1) {
        model.choices.splice(index, 1);
        model.correctResponse = (0, _categorize.removeAllChoices)(choice.id, model.correctResponse);
        onChange(model);
      }
    };

    this.deleteCategory = category => {
      log('[deleteCategory] category: ', category);
      var _props3 = this.props;
      const model = _props3.model,
            onChange = _props3.onChange;

      const index = model.categories.findIndex(a => a.id === category.id);
      if (index !== -1) {
        model.categories.splice(index, 1);
        model.correctResponse = (0, _categorize.removeCategory)(category.id, model.correctResponse);
        log('correctResponse:', model.correctResponse);
        onChange(model);
      }
    };

    this.addChoiceToCategory = (choice, categoryId) => {
      log('[addChoiceToCategory]', choice, categoryId);

      var _props4 = this.props;
      const model = _props4.model,
            onChange = _props4.onChange;

      model.correctResponse = (0, _categorize.moveChoiceToCategory)(choice.id, undefined, categoryId, 0, model.correctResponse);

      onChange(model);
    };

    this.deleteChoiceFromCategory = (category, choice, choiceIndex) => {
      this.apply(model => {
        log('[deleteChoiceFromCategory]: ', choice, 'from', category, choiceIndex, model.correctResponse);
        const correctResponse = (0, _categorize.removeChoiceFromCategory)(choice.id, category.id, choiceIndex, model.correctResponse);
        log('correctResponse: ', correctResponse);
        model.correctResponse = correctResponse;
      });
    };

    this.countChoiceInCorrectResponse = choice => {
      const model = this.props.model;

      const out = (0, _categorize.countInAnswer)(choice.id, model.correctResponse);
      return out;
    };

    this.changeChoicesConfig = config => {
      var _props5 = this.props;
      const model = _props5.model,
            onChange = _props5.onChange;

      model.config = model.config || {};
      model.config.choices = config;
      onChange(model);
    };

    this.uid = props.uid || _drag.uid.generateId();
  }

  render() {
    var _props6 = this.props;
    const classes = _props6.classes,
          className = _props6.className,
          model = _props6.model;


    const config = model.config || {};
    config.categories = config.categories || { columns: 2 };
    config.choices = config.choices || { label: '', columns: 2 };

    const categories = (0, _builder.buildCategories)(model.categories || [], model.choices || [], model.correctResponse || []);

    const choices = model.choices.map(c => {
      c.correctResponseCount = this.countChoiceInCorrectResponse(c);
      return c;
    });

    return _react2.default.createElement(
      IdProvider,
      { value: this.uid },
      _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(classes.design, className) },
        _react2.default.createElement(
          _Typography2.default,
          { className: classes.text },
          'In Categorize, students may drag & drop answer tiles to the appropriate category area(s).'
        ),
        _react2.default.createElement(_categories2.default, {
          categories: categories,
          columns: config.categories.columns,
          onColumnsChange: this.changeCategoryColumns,
          onChange: this.changeCategories,
          onDeleteChoice: this.deleteChoiceFromCategory,
          onAddChoice: this.addChoiceToCategory,
          onAdd: this.addCategory,
          onDelete: this.deleteCategory
        }),
        _react2.default.createElement(_buttons.Divider, null),
        _react2.default.createElement(_choices2.default, {
          choices: choices,
          config: config.choices,
          onConfigChange: this.changeChoicesConfig,
          onChange: this.changeChoices,
          shuffle: model.shuffle,
          onShuffleChange: this.toggleShuffle,
          onAdd: this.addChoice,
          onDelete: this.deleteChoice
        })
      )
    );
  }
}

exports.Design = Design;
Design.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  model: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  uid: _propTypes2.default.string
};
Design.defaultProps = {};
const styles = theme => ({
  text: {
    paddingTop: theme.spacing.unit * 2,
    paddingBottom: theme.spacing.unit * 2
  },
  design: {
    paddingTop: theme.spacing.unit,
    paddingBottom: theme.spacing.unit
  }
});

exports.default = (0, _drag.withDragContext)((0, _styles.withStyles)(styles)(Design));