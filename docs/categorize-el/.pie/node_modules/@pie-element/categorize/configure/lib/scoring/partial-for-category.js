'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PartialForCategory = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _grey = require('@material-ui/core/colors/grey');

var _grey2 = _interopRequireDefault(_grey);

var _configUi = require('@pie-lib/config-ui');

var _buttons = require('../design/buttons');

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _Cancel = require('@material-ui/icons/Cancel');

var _Cancel2 = _interopRequireDefault(_Cancel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Empty = (0, _styles.withStyles)(theme => ({
  empty: {
    padding: theme.spacing.unit,
    color: _grey2.default[500]
  }
}))(({ classes }) => _react2.default.createElement(
  'div',
  { className: classes.empty },
  'n/a'
));

const Rule = (0, _styles.withStyles)(theme => ({
  rule: {
    display: 'flex',
    alignItems: 'center'
  },
  number: {
    width: '60px',
    margin: 0,
    padding: 0
  },
  small: {
    paddingTop: theme.spacing.unit,
    paddingLeft: theme.spacing.unit,
    flex: '1',
    fontSize: '12px'
  },
  icon: {
    width: '18px',
    height: '18px'
  },
  delete: {
    width: '24px',
    height: '24px'
  }
}))(({ rule, classes, onDelete, onChange }) => {
  const changePercent = (event, number) => {
    rule.percent = number;
    onChange(rule);
  };
  return _react2.default.createElement(
    'div',
    { className: classes.rule },
    _react2.default.createElement(_configUi.NumberTextField, {
      className: classes.number,
      min: 1,
      max: 100,
      value: rule.percent,
      suffix: '%',
      onChange: changePercent
    }),
    _react2.default.createElement(
      'span',
      { className: classes.small },
      'for ',
      rule.count,
      ' correct answer',
      rule.count > 1 ? 's' : ''
    ),
    _react2.default.createElement(
      _IconButton2.default,
      { className: classes.delete, onClick: onDelete },
      _react2.default.createElement(_Cancel2.default, { className: classes.icon })
    )
  );
});

const Box = (0, _styles.withStyles)(theme => ({
  box: {
    paddingTop: theme.spacing.unit,
    paddingBottom: theme.spacing.unit
  },
  addButton: {
    marginTop: theme.spacing.unit
  }
}))(({ classes, rules, canAdd, onDeleteRule, onAddRule, onChange }) => _react2.default.createElement(
  'div',
  { className: classes.box },
  rules.map((r, index) => _react2.default.createElement(Rule, {
    rule: r,
    key: index,
    onChange: onChange,
    onDelete: () => onDeleteRule(r)
  })),
  _react2.default.createElement(_buttons.AddButton, {
    disabled: !canAdd,
    className: classes.addButton,
    mini: true,
    onClick: onAddRule
  })
));

class PartialForCategory extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.deleteRule = rule => {
      var _props = this.props;
      const partial = _props.partial,
            onChange = _props.onChange;

      const index = partial.rules.find(r => r.count === rule.count);

      if (index !== -1) {
        partial.rules.splice(index, 1);
        onChange(partial);
      }
    }, this.addRule = () => {
      var _props2 = this.props;
      const partial = _props2.partial,
            onChange = _props2.onChange;


      const counts = partial.rules.map(r => r.count);
      let count = 0;
      do {
        count += 1;
      } while (counts.indexOf(count) !== -1 && count > 0);
      const rule = {
        count,
        percent: 50
      };
      partial.rules.push(rule);
      onChange(partial);
    }, this.changeRule = rule => {
      var _props3 = this.props;
      const partial = _props3.partial,
            onChange = _props3.onChange;

      partial.rules = partial.rules.map(u => {
        if (u.count === rule.count) {
          return rule;
        } else {
          return u;
        }
      });

      onChange(partial);
    }, _temp;
  }

  render() {
    var _props4 = this.props;
    const classes = _props4.classes,
          className = _props4.className,
          partial = _props4.partial,
          correctResponse = _props4.correctResponse;


    const choices = correctResponse ? correctResponse.choices : [];
    const canAdd = partial.rules.length < choices.length - 1;
    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(classes.partialForCategory, className) },
      !correctResponse || correctResponse.choices.length < 1 ? _react2.default.createElement(Empty, null) : _react2.default.createElement(Box, {
        rules: partial.rules,
        canAdd: canAdd,
        onDeleteRule: this.deleteRule,
        onChange: this.changeRule,
        onAddRule: this.addRule
      })
    );
  }
}
exports.PartialForCategory = PartialForCategory;
PartialForCategory.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  category: _propTypes2.default.object,
  partial: _propTypes2.default.object,
  correctResponse: _propTypes2.default.object,
  onChange: _propTypes2.default.func.isRequired
};
PartialForCategory.defaultProps = {};
const styles = () => ({
  partialForCategory: {}
});
exports.default = (0, _styles.withStyles)(styles)(PartialForCategory);