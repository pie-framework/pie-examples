'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Config = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _List = require('@material-ui/core/List');

var _List2 = _interopRequireDefault(_List);

var _ListItem = require('@material-ui/core/ListItem');

var _ListItem2 = _interopRequireDefault(_ListItem);

var _ListItemText = require('@material-ui/core/ListItemText');

var _ListItemText2 = _interopRequireDefault(_ListItemText);

var _MenuItem = require('@material-ui/core/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _Menu = require('@material-ui/core/Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _configUi = require('@pie-lib/config-ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const positionOptions = [{
  label: 'Above',
  value: 'above',
  secondaryText: 'Label will be shown above choices'
}, {
  label: 'Below',
  value: 'below',
  secondaryText: 'Label will be shown below choices'
}];

const withDefaults = o => _extends({
  label: '',
  columns: 2,
  position: 'above',
  shuffle: false
}, o);
class Config extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      anchorEl: null
    }, this.changeColumns = event => {
      this.apply(config => config.columns = parseInt(event.target.value, 10));
    }, this.apply = fn => {
      const onChange = this.props.onChange;

      const config = withDefaults(this.props.config);
      fn(config);
      onChange(config);
    }, this.changeLabel = event => {
      this.apply(config => config.label = event.target.value);
    }, this.toggleShuffle = () => {
      this.apply(config => config.shuffle = !config.shuffle);
    }, this.changePosition = position => {
      this.apply(config => config.position = position);
      this.setState({ anchorEl: null });
    }, this.handleClickPosition = event => {
      this.setState({ anchorEl: event.currentTarget });
    }, this.handleMenuItemClick = (event, index) => {
      this.setState({ selectedIndex: index, anchorEl: null });
    }, this.handleClose = () => {
      this.setState({ anchorEl: null });
    }, _temp;
  }

  render() {
    const anchorEl = this.state.anchorEl;
    var _props = this.props;
    const classes = _props.classes,
          className = _props.className,
          categoryCountIsOne = _props.categoryCountIsOne,
          onToggleCategoryCount = _props.onToggleCategoryCount;


    const config = withDefaults(this.props.config);
    const positionOption = positionOptions.find(option => option.value === config.position);

    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(classes.config, className) },
      _react2.default.createElement(
        'div',
        { className: classes.row },
        _react2.default.createElement(_TextField2.default, {
          label: 'Choices per row',
          type: 'number',
          inputProps: {
            min: 1,
            max: 4
          },
          value: config.columns,
          onChange: this.changeColumns
        }),
        _react2.default.createElement(_configUi.InputCheckbox, {
          label: 'Remove all tiles after placing',
          checked: categoryCountIsOne,
          onChange: onToggleCategoryCount
        }),
        _react2.default.createElement(_configUi.InputCheckbox, {
          className: classes.shuffleCheckbox,
          label: 'Shuffle',
          value: config.shuffle,
          onChange: this.toggleShuffle
        })
      ),
      _react2.default.createElement(
        'div',
        { className: classes.configuration },
        _react2.default.createElement(_TextField2.default, {
          className: classes.label,
          InputLabelProps: {
            shrink: true
          },
          label: 'Label',
          value: config.label,
          onChange: this.changeLabel
        }),
        _react2.default.createElement(
          _List2.default,
          { component: 'nav' },
          _react2.default.createElement(
            _ListItem2.default,
            {
              button: true,
              'aria-haspopup': 'true',
              onClick: this.handleClickPosition
            },
            _react2.default.createElement(_ListItemText2.default, {
              primary: 'Label Position',
              secondary: positionOption.secondaryText
            })
          )
        ),
        _react2.default.createElement(
          _Menu2.default,
          {
            id: 'lock-menu',
            anchorEl: anchorEl,
            open: Boolean(anchorEl),
            onClose: this.handleClose
          },
          positionOptions.map(option => _react2.default.createElement(
            _MenuItem2.default,
            {
              key: option.value,
              selected: option.value === config.position,
              onClick: () => this.changePosition(option)
            },
            option.label
          ))
        )
      )
    );
  }
}
exports.Config = Config;
Config.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  config: _propTypes2.default.object,
  onChange: _propTypes2.default.func.isRequired,
  categoryCountIsOne: _propTypes2.default.bool,
  onToggleCategoryCount: _propTypes2.default.func
};
Config.defaultProps = {};
const styles = theme => ({
  configuration: {
    display: 'grid',
    alignItems: 'center',
    gridColumnGap: `${theme.spacing.unit}px`,
    gridRowGap: `${theme.spacing.unit}px`,
    gridTemplateColumns: 'repeat(2, 1fr)',
    justifyContent: 'space-between',
    marginBottom: theme.spacing.unit
  },
  choiceConfig: {
    width: '100%',
    maxWidth: 360,
    backgroundColor: theme.palette.background.paper
  },
  row: {
    display: 'grid',
    gridColumnGap: `${theme.spacing.unit}px`,
    gridRowGap: `${theme.spacing.unit}px`,
    gridTemplateColumns: 'repeat(2, 1fr)',
    justifyContent: 'space-between',
    marginTop: theme.spacing.unit,
    marginBottom: theme.spacing.unit
  },
  shuffleCheckbox: {
    gridColumnStart: 2,
    gridColumnEnd: 2
  }
});
exports.default = (0, _styles.withStyles)(styles)(Config);