'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spec = exports.DroppablePlaceholder = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _drag = require('@pie-lib/drag');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDnd = require('react-dnd');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-ui:categorize:droppable-placeholder');

class DroppablePlaceholder extends _react2.default.Component {
  render() {
    var _props = this.props;
    const children = _props.children,
          connectDropTarget = _props.connectDropTarget,
          isOver = _props.isOver,
          className = _props.className,
          grid = _props.grid,
          disabled = _props.disabled;


    return connectDropTarget(_react2.default.createElement(
      'div',
      { style: { height: '100%' } },
      _react2.default.createElement(
        _drag.PlaceHolder,
        {
          className: className,
          isOver: isOver,
          grid: grid,
          disabled: disabled
        },
        children
      )
    ));
  }
}

exports.DroppablePlaceholder = DroppablePlaceholder;
DroppablePlaceholder.propTypes = {
  connectDropTarget: _propTypes2.default.func.isRequired,
  isOver: _propTypes2.default.bool,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired,
  className: _propTypes2.default.string,
  grid: _propTypes2.default.object,
  disabled: _propTypes2.default.bool
};
const spec = exports.spec = {
  drop: (props, monitor) => {
    log('[drop] props: ', props);
    const item = monitor.getItem();
    props.onDropChoice(item);
  },
  canDrop: (props /*, monitor*/) => {
    return !props.disabled;
  }
};

const WithTarget = (0, _reactDnd.DropTarget)(({ uid }) => uid, spec, (connect, monitor) => ({
  connectDropTarget: connect.dropTarget(),
  isOver: monitor.isOver()
}))(DroppablePlaceholder);

exports.default = _drag.uid.withUid(WithTarget);