'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spec = exports.Choice = exports.Layout = exports.ChoiceType = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactDnd = require('react-dnd');

var _drag = require('@pie-lib/drag');

var _Card = require('@material-ui/core/Card');

var _Card2 = _interopRequireDefault(_Card);

var _CardContent = require('@material-ui/core/CardContent');

var _CardContent2 = _interopRequireDefault(_CardContent);

var _green = require('@material-ui/core/colors/green');

var _green2 = _interopRequireDefault(_green);

var _orange = require('@material-ui/core/colors/orange');

var _orange2 = _interopRequireDefault(_orange);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-ui:categorize:choice');

const ChoiceType = exports.ChoiceType = {
  content: _propTypes2.default.string.isRequired,
  id: _propTypes2.default.string
};

class Layout extends _react2.default.Component {
  render() {
    var _props = this.props;
    const classes = _props.classes,
          className = _props.className,
          content = _props.content,
          isDragging = _props.isDragging,
          disabled = _props.disabled,
          correct = _props.correct;


    const rootNames = (0, _classnames2.default)(correct === true && 'correct', correct === false && 'incorrect', classes.choice, isDragging && classes.dragging, disabled && classes.disabled, className);
    const cardNames = (0, _classnames2.default)(classes.card);
    return _react2.default.createElement(
      'div',
      { className: rootNames },
      _react2.default.createElement(
        _Card2.default,
        { className: cardNames },
        _react2.default.createElement(_CardContent2.default, { dangerouslySetInnerHTML: { __html: content } })
      )
    );
  }
}

exports.Layout = Layout;
Layout.propTypes = _extends({}, ChoiceType, {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  correct: _propTypes2.default.bool
});
Layout.defaultProps = {};
const styles = () => ({
  choice: {
    border: 'solid 1px white',
    cursor: 'pointer',
    height: '100%',
    width: '100%',
    '&.correct': {
      border: `solid 1px ${_green2.default[500]}`
    },
    '&.incorrect': {
      border: `solid 1px ${_orange2.default[500]}`
    }
  },
  disabled: {
    cursor: 'inherit'
  },
  dragging: {
    cursor: 'move'
  },
  card: {
    height: '100%',
    width: '100%'
  }
});

const Styled = (0, _styles.withStyles)(styles)(Layout);

class Choice extends _react2.default.Component {

  render() {
    var _props2 = this.props;
    const connectDragSource = _props2.connectDragSource,
          id = _props2.id,
          content = _props2.content,
          disabled = _props2.disabled,
          isDragging = _props2.isDragging,
          correct = _props2.correct;

    return connectDragSource(_react2.default.createElement(
      'div',
      { style: { width: '100%', height: '100%' } },
      _react2.default.createElement(Styled, {
        id: id,
        content: content,
        disabled: disabled,
        correct: correct,
        isDragging: isDragging
      })
    ));
  }
}

exports.Choice = Choice;
Choice.propTypes = _extends({}, ChoiceType, {
  connectDragSource: _propTypes2.default.func.isRequired
});
const spec = exports.spec = {
  canDrag: props => !props.disabled,
  beginDrag: props => {
    const out = {
      id: props.id,
      categoryId: props.categoryId,
      choiceIndex: props.choiceIndex
    };
    log('[beginDrag] out:', out);
    return out;
  },
  endDrag: (props, monitor) => {
    if (!monitor.didDrop()) {
      const item = monitor.getItem();
      if (item.categoryId) {
        log('wasnt droppped - what to do?');
        props.onRemoveChoice(item);
      }
    }
  }
};

const DraggableChoice = (0, _reactDnd.DragSource)(({ uid }) => uid, spec, (connect, monitor) => ({
  connectDragSource: connect.dragSource(),
  isDragging: monitor.isDragging()
}))(Choice);

exports.default = _drag.uid.withUid(DraggableChoice);