'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Categorize = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _choices = require('./choices');

var _choices2 = _interopRequireDefault(_choices);

var _categories = require('./categories');

var _categories2 = _interopRequireDefault(_categories);

var _correctAnswerToggle = require('@pie-lib/correct-answer-toggle');

var _correctAnswerToggle2 = _interopRequireDefault(_correctAnswerToggle);

var _styles = require('@material-ui/core/styles');

var _categorize = require('@pie-lib/categorize');

var _drag = require('@pie-lib/drag');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-ui:categorize');

class Categorize extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.dropChoice = (categoryId, draggedChoice) => {
      var _props = this.props;
      const session = _props.session,
            onAnswersChange = _props.onAnswersChange;

      log('[dropChoice] category: ', draggedChoice.categoryId, 'choice: ', draggedChoice);

      const answers = (0, _categorize.moveChoiceToCategory)(draggedChoice.id, draggedChoice.categoryId, categoryId, draggedChoice.choiceIndex, session.answers);

      onAnswersChange(answers);
    };

    this.removeChoice = c => {
      log('[removeChoice]: ', c);
      var _props2 = this.props;
      const onAnswersChange = _props2.onAnswersChange,
            session = _props2.session;

      const answers = (0, _categorize.removeChoiceFromCategory)(c.id, c.categoryId, c.choiceIndex, session.answers);
      onAnswersChange(answers);
    };

    this.toggleShowCorrect = () => this.setState({ showCorrect: !this.state.showCorrect });

    this.uid = _drag.uid.generateId();

    this.state = {
      showCorrect: false
    };
  }

  componentWillReceiveProps() {
    this.setState({ showCorrect: false });
  }

  render() {
    var _props3 = this.props;
    const classes = _props3.classes,
          model = _props3.model,
          session = _props3.session;
    const showCorrect = this.state.showCorrect;


    const choicePosition = model.config && model.config.choices ? model.config.choices.position : 'above';

    const style = {
      flexDirection: choicePosition === 'above' ? 'column-reverse' : undefined
    };

    var _buildState = (0, _categorize.buildState)(model.categories, model.choices, showCorrect ? model.correctResponse : session.answers, model.correctResponse);

    const categories = _buildState.categories,
          choices = _buildState.choices,
          correct = _buildState.correct;


    log('[render] disabled: ', model.disabled);

    const config = model.config;


    const columns = config.choices.columns / config.categories.columns;

    const maxLength = categories.reduce((acc, c) => {
      if (c.choices.length > acc) {
        return c.choices.length;
      } else {
        return acc;
      }
    }, 0);

    const rows = Math.floor(maxLength / columns) + 1;
    const grid = { rows, columns };
    return _react2.default.createElement(
      _drag.uid.Provider,
      { value: this.uid },
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_correctAnswerToggle2.default, {
          show: showCorrect || correct === false,
          toggled: showCorrect,
          onToggle: this.toggleShowCorrect
        }),
        _react2.default.createElement(
          'div',
          { className: classes.categorize, style: style },
          _react2.default.createElement(_categories2.default, {
            config: model.config.categories,
            disabled: model.disabled,
            categories: categories,
            onDropChoice: this.dropChoice,
            onRemoveChoice: this.removeChoice,
            grid: grid
          }),
          _react2.default.createElement(_choices2.default, {
            disabled: model.disabled,
            config: model.config.choices,
            choices: choices
          })
        )
      )
    );
  }
}
exports.Categorize = Categorize;
Categorize.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  model: _propTypes2.default.shape({
    choices: _propTypes2.default.arrayOf(_propTypes2.default.shape(_choices.ChoiceType)),
    categories: _propTypes2.default.arrayOf(_propTypes2.default.shape(_categories.CategoryType))
  }),
  session: _propTypes2.default.shape({
    answers: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      choice: _propTypes2.default.string,
      category: _propTypes2.default.string
    }))
  }),
  onAnswersChange: _propTypes2.default.func.isRequired
};
Categorize.defaultProps = {
  disabled: false
};
const styles = {
  categorize: {
    display: 'flex',
    flexDirection: 'column'
  }
};
exports.default = (0, _drag.withDragContext)((0, _styles.withStyles)(styles)(Categorize));