'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Categories = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _category = require('./category');

var _category2 = _interopRequireDefault(_category);

var _header = require('../header');

var _header2 = _interopRequireDefault(_header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Categories extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.changeCategory = c => {
      var _props = this.props;
      const onChange = _props.onChange,
            categories = _props.categories;


      const index = categories.findIndex(a => a.id === c.id);
      if (index !== -1) {
        categories.splice(index, 1, c);
        onChange(categories);
      }
    }, _temp;
  }

  render() {
    var _props2 = this.props;
    const columns = _props2.columns,
          classes = _props2.classes,
          className = _props2.className,
          onColumnsChange = _props2.onColumnsChange,
          _onDeleteChoice = _props2.onDeleteChoice,
          categories = _props2.categories,
          onAdd = _props2.onAdd,
          _onDelete = _props2.onDelete,
          onAddChoice = _props2.onAddChoice;


    const holderStyle = {
      gridTemplateColumns: `repeat(${columns}, 1fr)`
    };

    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(classes.categories, className) },
      _react2.default.createElement(_header2.default, { label: 'Categories', buttonLabel: 'ADD A CATEGORY', onAdd: onAdd }),
      _react2.default.createElement(
        'div',
        { className: classes.row },
        _react2.default.createElement(_TextField2.default, {
          label: 'Categories per row',
          type: 'number',
          inputProps: {
            min: 1,
            max: 4
          },
          value: columns,
          onChange: onColumnsChange
        })
      ),
      _react2.default.createElement(
        'div',
        { className: classes.categoriesHolder, style: holderStyle },
        categories.map((category, index) => _react2.default.createElement(_category2.default, {
          key: index,
          category: category,
          onChange: this.changeCategory,
          onDelete: () => _onDelete(category),
          onDeleteChoice: (choice, choiceIndex) => _onDeleteChoice(category, choice, choiceIndex),
          onAddChoice: onAddChoice
        }))
      )
    );
  }
}

exports.Categories = Categories;
Categories.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  columns: _propTypes2.default.number.isRequired,
  onColumnsChange: _propTypes2.default.func.isRequired,
  categories: _propTypes2.default.array,
  onChange: _propTypes2.default.func.isRequired,
  onDeleteChoice: _propTypes2.default.func.isRequired,
  onAddChoice: _propTypes2.default.func.isRequired,
  onAdd: _propTypes2.default.func.isRequired,
  onDelete: _propTypes2.default.func.isRequired
};
Categories.defaultProps = {
  columns: 2
};
const styles = theme => ({
  categories: {
    marginBottom: theme.spacing.unit
  },
  categoriesHolder: {
    display: 'grid',
    gridRowGap: `${theme.spacing.unit}px`,
    gridColumnGap: `${theme.spacing.unit}px`
  },
  row: {
    display: 'grid',
    gridTemplateColumns: 'repeat(2, 1fr)',
    gridColumnGap: `${theme.spacing.unit}px`,
    alignItems: 'baseline',
    width: '100%',
    marginTop: theme.spacing.unit,
    marginBottom: 2 * theme.spacing.unit
  }
});

exports.default = (0, _styles.withStyles)(styles)(Categories);