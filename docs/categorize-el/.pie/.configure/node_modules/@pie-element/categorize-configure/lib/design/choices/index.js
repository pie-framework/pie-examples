'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Choices = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _buttons = require('../buttons');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _choice = require('./choice');

var _choice2 = _interopRequireDefault(_choice);

var _header = require('../header');

var _header2 = _interopRequireDefault(_header);

var _every = require('lodash/every');

var _every2 = _interopRequireDefault(_every);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Choices extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.toggleRemoveAllTiles = () => {
      var _props = this.props;
      const choices = _props.choices,
            onChange = _props.onChange;


      const allAtOne = this.allChoicesHaveCount(1);
      const update = choices.map(c => {
        c.categoryCount = allAtOne ? 0 : 1;
        return c;
      });
      onChange(update);
    }, this.changeChoice = choice => {
      var _props2 = this.props;
      const choices = _props2.choices,
            onChange = _props2.onChange;

      const index = choices.findIndex(h => h.id === choice.id);
      if (index !== -1) {
        choices.splice(index, 1, choice);
        onChange(choices);
      }
    }, this.allChoicesHaveCount = count => {
      const choices = this.props.choices;

      return (0, _every2.default)(choices, c => c.categoryCount === count);
    }, _temp;
  }

  render() {
    var _props3 = this.props;
    const classes = _props3.classes,
          className = _props3.className,
          choices = _props3.choices,
          onAdd = _props3.onAdd,
          _onDelete = _props3.onDelete,
          config = _props3.config,
          onConfigChange = _props3.onConfigChange;


    const categoryCountIsOne = this.allChoicesHaveCount(1);

    const choiceHolderStyle = {
      gridTemplateColumns: `repeat(${config.columns}, 1fr)`
    };
    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(classes.choices, className) },
      _react2.default.createElement(_header2.default, { label: 'Choices', buttonLabel: 'ADD A CHOICE', onAdd: onAdd }),
      _react2.default.createElement(_config2.default, {
        config: config,
        onChange: onConfigChange,
        categoryCountIsOne: categoryCountIsOne,
        onToggleCategoryCount: this.toggleRemoveAllTiles
      }),
      _react2.default.createElement(
        'div',
        { className: classes.choiceHolder, style: choiceHolderStyle },
        choices.map((h, index) => _react2.default.createElement(_choice2.default, {
          choice: h,
          correctResponseCount: h.correctResponseCount,
          key: index,
          onChange: this.changeChoice,
          onDelete: () => _onDelete(h)
        }))
      ),
      _react2.default.createElement(_buttons.Divider, null)
    );
  }
}
exports.Choices = Choices;
Choices.propTypes = {
  config: _propTypes2.default.object.isRequired,
  onConfigChange: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  choices: _propTypes2.default.array.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  onAdd: _propTypes2.default.func.isRequired,
  onDelete: _propTypes2.default.func.isRequired
};
Choices.defaultProps = {};
const styles = theme => ({
  choiceHolder: {
    paddingTop: theme.spacing.unit,
    paddingBottom: theme.spacing.unit,
    display: 'grid',
    gridRowGap: `${theme.spacing.unit}px`,
    gridColumnGap: `${theme.spacing.unit}px`
  },
  choices: {
    paddingTop: theme.spacing.unit * 2,
    paddingBottom: theme.spacing.unit * 2
  },
  label: {}
});
exports.default = (0, _styles.withStyles)(styles)(Choices);