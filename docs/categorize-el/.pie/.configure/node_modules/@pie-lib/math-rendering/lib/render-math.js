'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mathjax = require('mathjax3/mathjax3/mathjax');

var _mathml = require('mathjax3/mathjax3/input/mathml');

var _tex = require('mathjax3/mathjax3/input/tex');

var _chtml = require('mathjax3/mathjax3/output/chtml');

var _browserAdaptor = require('mathjax3/mathjax3/adaptors/browserAdaptor');

var _html = require('mathjax3/mathjax3/handlers/html');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(0, _html.RegisterHTMLHandler)((0, _browserAdaptor.browserAdaptor)());


var log = (0, _debug2.default)('pie-lib:math-rendering');

var instance = null;

/** Add temporary support for a global singleDollar override
 *  <code>
 *   // This will enable single dollar rendering
 *   window.pie = window.pie || {};
 *   window.pie.mathRendering =  {useSingleDollar: true };
 *  </code>
 */
var defaultOpts = function defaultOpts() {
  if (typeof window !== 'undefined') {
    window.pie = window.pie || {};
    return window.pie.mathRendering || {};
  } else {
    return {};
  }
};

var bootstrap = function bootstrap(opts) {
  if (typeof window === 'undefined') {
    return { Typeset: function Typeset() {
        return {};
      } };
  }

  opts = opts || defaultOpts();

  if (opts.useSingleDollar) {
    // eslint-disable-next-line
    console.warn('[math-rendering] using $ is not advisable, please use $$..$$ or \\(...\\)');
  }

  var texConfig = opts.useSingleDollar ? { inlineMath: [['$', '$'], ['\\(', '\\)']], processEscapes: true } : {};

  var mmlConfig = {};

  var htmlConfig = Object.assign({
    fontURL: 'https://cdn.rawgit.com/mathjax/mathjax-v3/3.0.0-beta.1/mathjax2/css'
  }, {});

  var html = _mathjax.MathJax.document(document, {
    InputJax: [new _tex.TeX(texConfig), new _mathml.MathML(mmlConfig)],
    OutputJax: new _chtml.CHTML(htmlConfig)
  });

  return {
    version: _mathjax.MathJax.version,
    html: html,

    Typeset: function Typeset() {
      for (var _len = arguments.length, elements = Array(_len), _key = 0; _key < _len; _key++) {
        elements[_key] = arguments[_key];
      }

      this.html.findMath(elements.length ? { elements: elements } : {}).compile().getMetrics().typeset().updateDocument().clear();
    }
  };
};

var renderMath = function renderMath(el, renderOpts) {
  if (!instance) {
    instance = bootstrap(renderOpts);
  }

  if (!el) {
    log('el is undefined');
    return;
  }

  if (el instanceof Element) {
    instance.Typeset(el);
  } else if (el.length) {
    var _instance;

    var arr = Array.from(el);
    (_instance = instance).Typeset.apply(_instance, _toConsumableArray(arr));
  }
};

exports.default = renderMath;