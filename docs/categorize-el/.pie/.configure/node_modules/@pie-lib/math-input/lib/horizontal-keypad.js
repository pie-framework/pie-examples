'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keypad = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _Backspace = require('@material-ui/icons/Backspace');

var _Backspace2 = _interopRequireDefault(_Backspace);

var _basicOperators = require('./basic-operators');

var _basicOperators2 = _interopRequireDefault(_basicOperators);

var _Clear = require('@material-ui/icons/Clear');

var _Clear2 = _interopRequireDefault(_Clear);

var _KeyboardArrowDown = require('@material-ui/icons/KeyboardArrowDown');

var _KeyboardArrowDown2 = _interopRequireDefault(_KeyboardArrowDown);

var _extras = require('./extras');

var _extras2 = _interopRequireDefault(_extras);

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _KeyboardArrowLeft = require('@material-ui/icons/KeyboardArrowLeft');

var _KeyboardArrowLeft2 = _interopRequireDefault(_KeyboardArrowLeft);

var _numberPad = require('./number-pad');

var _numberPad2 = _interopRequireDefault(_numberPad);

var _KeyboardArrowRight = require('@material-ui/icons/KeyboardArrowRight');

var _KeyboardArrowRight2 = _interopRequireDefault(_KeyboardArrowRight);

var _KeyboardArrowUp = require('@material-ui/icons/KeyboardArrowUp');

var _KeyboardArrowUp2 = _interopRequireDefault(_KeyboardArrowUp);

var _styles = require('./styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _styles2 = require('@material-ui/core/styles');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('math-input:keypad');

var bs = (0, _styles.buttonStyle)();

var topRowStyle = {
  root: (0, _merge2.default)({}, bs.root, {
    backgroundColor: '#eaeadf',
    marginRight: '0'
  }),
  label: bs.label,
  hideRoot: (0, _merge2.default)({}, bs.root, {
    opacity: 0.0
  })
};

var RawIconButton = function RawIconButton(props) {
  var root = props.hide ? props.classes.hideRoot : props.classes.root;
  return React.createElement(
    _IconButton2.default,
    {
      onClick: props.onClick,
      tabIndex: '-1',
      style: props.style,
      classes: { root: root, label: props.classes.label }
    },
    props.children
  );
};

RawIconButton.propTypes = {
  hide: _propTypes2.default.bool,
  style: _propTypes2.default.object,
  classes: _propTypes2.default.object,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired,
  onClick: _propTypes2.default.func
};

var Tr = (0, _styles2.withStyles)(topRowStyle, { name: 'TR' })(RawIconButton);

var cursor = ['Left', 'Right', 'Up', 'Down'];

var icons = {
  Left: _KeyboardArrowLeft2.default,
  Right: _KeyboardArrowRight2.default,
  Up: _KeyboardArrowUp2.default,
  Down: _KeyboardArrowDown2.default
};

var TopRow = function TopRow(props) {
  return React.createElement(
    'div',
    { className: props.className },
    cursor.map(function (c) {
      var Icon = icons[c];
      return React.createElement(
        Tr,
        { hide: props.showingCode, key: c, onClick: function onClick() {
            return props.onClick(c);
          } },
        React.createElement(Icon, null)
      );
    })
  );
};
TopRow.propTypes = {
  className: _propTypes2.default.string,
  showingCode: _propTypes2.default.bool
};

var DeleteAndClear = function DeleteAndClear(props) {
  return React.createElement(
    'div',
    null,
    React.createElement(
      Tr,
      { hide: props.showingCode, onClick: function onClick() {
          return props.onClick('Backspace');
        } },
      React.createElement(_Backspace2.default, null)
    ),
    React.createElement(
      Tr,
      { hide: props.showingCode },
      React.createElement(_Clear2.default, { onClick: function onClick() {
          return props.onClick('clear');
        } })
    )
  );
};

DeleteAndClear.propTypes = {
  showingCode: _propTypes2.default.bool,
  onClick: _propTypes2.default.func
};

var Keypad = exports.Keypad = function (_React$PureComponent) {
  _inherits(Keypad, _React$PureComponent);

  function Keypad(props) {
    _classCallCheck(this, Keypad);

    var _this = _possibleConstructorReturn(this, (Keypad.__proto__ || Object.getPrototypeOf(Keypad)).call(this, props));

    _this.onFocus = function (e) {
      log('onFocus', e);
      if (_this.props.onFocus) {
        _this.props.onFocus(e);
      }
    };

    _this.onTopRowClick = function (value) {
      _this.props.onClick({
        value: value,
        type: 'cursor'
      });
    };

    _this.onNumberPadClick = function (value) {
      _this.props.onClick({
        value: value
      });
    };

    _this.onBasicOperatorsClick = function (value) {
      _this.props.onClick({
        value: value
      });
    };

    _this.onExtrasClick = function (data) {
      _this.props.onClick(data);
    };

    _this.toggleCode = function () {
      _this.setState({ showCode: !_this.state.showCode }, function () {
        _this.props.onToggleCode && _this.props.onToggleCode();
      });
    };

    _this.state = {
      showCode: false
    };
    return _this;
  }

  _createClass(Keypad, [{
    key: 'render',
    value: function render() {
      var classes = this.props.classes;
      var showCode = this.state.showCode;

      var holderClasses = (0, _classnames2.default)(classes.padHolder, showCode && classes.hidden);

      return React.createElement(
        'div',
        { className: classes.root, onFocus: this.onFocus, tabIndex: '-1' },
        React.createElement(
          'div',
          { className: holderClasses },
          React.createElement(_numberPad2.default, { onClick: this.onNumberPadClick }),
          React.createElement(_basicOperators2.default, { onClick: this.onBasicOperatorsClick }),
          React.createElement(_extras2.default, { onClick: this.onExtrasClick }),
          React.createElement(TopRow, { className: classes.topRow, onClick: this.onTopRowClick }),
          React.createElement(DeleteAndClear, { onClick: this.onTopRowClick })
        )
      );
    }
  }]);

  return Keypad;
}(React.PureComponent);

Keypad.propTypes = {
  onClick: _propTypes2.default.func.isRequired,
  onFocus: _propTypes2.default.func,
  onToggleCode: _propTypes2.default.func,
  latex: _propTypes2.default.string,
  classes: _propTypes2.default.object.isRequired
};


var styles = {
  root: {
    minWidth: '350px',
    display: 'grid',
    gridTemplateRows: '1fr 4fr',
    gridColumnGap: '0px',
    '&:focus': {
      outline: 'none'
    }
  },
  hidden: {
    opacity: 0,
    zIndex: -1
  },
  padHolder: {
    display: 'grid',
    gridColumn: '1/8',
    gridRow: '1/4',
    gridTemplateColumns: '3fr 1fr 4fr 1fr 1fr'
  },
  topRow: {}
};

exports.default = (0, _styles2.withStyles)(styles, { name: 'Keypad' })(Keypad);