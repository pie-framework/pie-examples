'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Extras = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _icons = require('./icons');

var _styles = require('./styles');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _styles2 = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Subscript/Superscript section
var subscript = {
  name: 'Subscript',
  icon: _icons.Subscript,
  symbol: 'x_n',
  logic: 'command',
  command: '_',
  shortcut: '',
  category: 'sub-sup'
}; //<sub>n</sub>
var superscript = {
  name: 'Superscript',
  icon: _icons.Superscript,
  symbol: 'x^n',
  logic: 'command',
  command: '^',
  shortcut: '',
  category: 'sub-sup'
}; //<sup>n</sup>
var fraction = {
  name: 'Fraction',
  icon: _icons.Fraction,
  symbol: 'x/n',
  logic: 'command',
  command: '\\frac',
  shortcut: '',
  category: 'fraction'
};
var percentage = {
  name: 'Percentage',
  icon: _icons.Percent,
  symbol: '%',
  logic: 'command',
  command: '%',
  shortcut: '',
  category: 'misc'
};
var sqrt = {
  name: 'Square root',
  icon: _icons.SquareRoot,
  symbol: '&#870',
  logic: 'command',
  command: '\\sqrt',
  shortcut: '',
  category: 'root'
};
var root = {
  name: 'Nth root',
  icon: _icons.NthRoot,
  symbol: 'n&#830',
  logic: 'write',
  command: '\\sqrt[{}]{}',
  shortcut: '',
  category: 'root'
};
var absoluteValue = {
  name: 'Absolute Value',
  icon: _icons.AbsoluteValue,
  symbol: '| |',
  logic: 'command',
  command: '|',
  shortcut: '',
  category: 'misc'
};
var parenthesis = {
  name: 'Parenthesis',
  icon: _icons.Parenthesis,
  symbol: '( )',
  logic: 'command',
  command: '(',
  shortcut: '',
  category: 'misc'
};
var lt = {
  name: 'Less than',
  icon: _icons.LessThan,
  symbol: '<',
  logic: 'command',
  command: '<',
  shortcut: '',
  category: 'comparison'
};
var gt = {
  name: 'Greater than',
  icon: _icons.GreaterThan,
  symbol: '>',
  logic: 'command',
  command: '>',
  shortcut: '',
  category: 'comparison'
};
var degree = {
  name: 'Degree',
  icon: _icons.Degree,
  symbol: '°',
  logic: 'command',
  command: '°',
  shortcut: '',
  category: 'misc'
};
var approx = {
  name: 'Approx',
  icon: _icons.Approx,
  symbol: '&asyp;',
  logic: 'write',
  command: '\\approx',
  shortcut: '',
  category: 'number'
};
var le = {
  name: 'Less than or equal',
  icon: _icons.LessThanEqual,
  symbol: '<=',
  logic: 'command',
  command: '\\le',
  shortcut: '',
  category: 'comparison'
};
var ge = {
  name: 'Greater than or equal',
  icon: _icons.GreaterThanEqual,
  symbol: '>=',
  logic: 'command',
  command: '\\ge',
  shortcut: '',
  category: 'comparison'
};
var x = {
  name: 'X',
  icon: _icons.X,
  symbol: 'x',
  logic: 'command',
  command: 'x',
  shortcut: '',
  category: 'vars'
}; //<sub>n</sub>
var y = {
  name: 'Y',
  icon: _icons.Y,
  symbol: 'y',
  logic: 'command',
  command: 'y',
  shortcut: '',
  category: 'vars'
}; //<sup>n</sup>

var buttons = [superscript, subscript, fraction, percentage, sqrt, root, absoluteValue, parenthesis, lt, gt, degree, approx, le, ge, x, y];

var specialStyle = (0, _merge2.default)({}, (0, _styles.buttonStyle)(), {
  root: {
    display: 'block'
  },
  label: {
    position: 'absolute',
    left: '0px',
    top: '0px',
    right: '0px',
    bottom: '0px'
  }
});

var Special = (0, _styles2.withStyles)(specialStyle, { name: 'Special' })(_styles.OverrideIconButton);

var B = function (_React$Component) {
  _inherits(B, _React$Component);

  function B() {
    _classCallCheck(this, B);

    return _possibleConstructorReturn(this, (B.__proto__ || Object.getPrototypeOf(B)).apply(this, arguments));
  }

  _createClass(B, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          children = _props.children,
          onClick = _props.onClick;


      return _react2.default.createElement(
        'div',
        { className: className, onClick: onClick },
        _react2.default.createElement(
          Special,
          { ref: function ref(r) {
              return _this2.button = r;
            } },
          children
        )
      );
    }
  }]);

  return B;
}(_react2.default.Component);

B.propTypes = {
  className: _propTypes2.default.string,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired,
  onClick: _propTypes2.default.func
};

var Extras = exports.Extras = function (_React$Component2) {
  _inherits(Extras, _React$Component2);

  function Extras() {
    _classCallCheck(this, Extras);

    return _possibleConstructorReturn(this, (Extras.__proto__ || Object.getPrototypeOf(Extras)).apply(this, arguments));
  }

  _createClass(Extras, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          classes = _props2.classes,
          _onClick = _props2.onClick;

      return _react2.default.createElement(
        'div',
        { className: classes.root },
        buttons.map(function (b, index) {
          var Icon = b.icon ? b.icon : 'div';
          return _react2.default.createElement(
            B,
            {
              key: index,
              tabIndex: '-1',
              className: classes.holder,
              onClick: function onClick() {
                return _onClick({ value: b.command, type: b.logic });
              }
            },
            _react2.default.createElement(Icon, null)
          );
        })
      );
    }
  }]);

  return Extras;
}(_react2.default.Component);

Extras.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  onClick: _propTypes2.default.func
};
exports.default = (0, _styles2.withStyles)({
  root: {
    display: 'grid',
    gridTemplateColumns: 'repeat(4, 1fr)',
    gridRowGap: '0px',
    gridColumnGap: '0px'
  },
  holder: {
    position: 'relative',
    width: '100%',
    height: '100%',
    backgroundColor: '#cceeff'
  }
})(Extras);