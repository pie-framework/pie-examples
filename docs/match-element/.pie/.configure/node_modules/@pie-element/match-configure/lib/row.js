'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.choiceTarget = exports.choiceSource = exports.Row = exports.canDrag = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _configUi = require('@pie-lib/config-ui');

var _DragHandle = require('@material-ui/icons/DragHandle');

var _DragHandle2 = _interopRequireDefault(_DragHandle);

var _Radio = require('@material-ui/core/Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Delete = require('@material-ui/icons/Delete');

var _Delete2 = _interopRequireDefault(_Delete);

var _reactDnd = require('react-dnd');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _editableHtml = require('@pie-lib/editable-html');

var _editableHtml2 = _interopRequireDefault(_editableHtml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:categorize:configure:choice');

let canDrag = exports.canDrag = false;

class Row extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.onRowTitleChange = rowIndex => value => {
      var _props = this.props;
      const model = _props.model,
            onChange = _props.onChange;

      const newModel = _extends({}, model);

      newModel.rows[rowIndex].title = value;

      onChange(newModel);
    }, this.onRowValueChange = (rowIndex, rowValueIndex) => event => {
      var _props2 = this.props;
      const model = _props2.model,
            onChange = _props2.onChange;

      const newModel = _extends({}, model);

      if (model.responseType === 'radio') {
        for (let i = 0; i < newModel.rows[rowIndex].values.length; i++) {
          newModel.rows[rowIndex].values[i] = false;
        }
      }

      newModel.rows[rowIndex].values[rowValueIndex] = event.target.checked;

      onChange(newModel);
    }, this.onDeleteRow = idx => () => {
      this.props.onDeleteRow(idx);
    }, this.onMouseDownOnHandle = () => {
      exports.canDrag = canDrag = true;
    }, this.onMouseUpOnHandle = () => {
      exports.canDrag = canDrag = false;
    }, _temp;
  }

  componentDidMount() {
    document.addEventListener('mouseup', this.onMouseUpOnHandle);
  }

  render() {
    var _props3 = this.props;
    const classes = _props3.classes,
          imageSupport = _props3.imageSupport,
          connectDragSource = _props3.connectDragSource,
          connectDropTarget = _props3.connectDropTarget,
          isDragging = _props3.isDragging,
          model = _props3.model,
          row = _props3.row,
          idx = _props3.idx;

    const opacity = isDragging ? 0 : 1;

    const content = _react2.default.createElement(
      'div',
      { style: {
          opacity: opacity
        } },
      _react2.default.createElement(
        'span',
        {
          itemID: 'handle',
          className: classes.dragHandle,
          onMouseDown: this.onMouseDownOnHandle
        },
        _react2.default.createElement(_DragHandle2.default, { color: 'primary' })
      ),
      _react2.default.createElement(
        'div',
        { className: classes.rowContainer },
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)(classes.rowItem, classes.questionText) },
          _react2.default.createElement(_editableHtml2.default, {
            imageSupport: imageSupport,
            autoWidthToolbar: true,
            disableUnderline: true,
            label: 'label',
            markup: row.title,
            onChange: this.onRowTitleChange(idx),
            className: classes.editor
          })
        ),
        row.values.map((rowValue, rowIdx) => _react2.default.createElement(
          'div',
          { key: rowIdx, className: classes.rowItem },
          model.responseType === 'radio' ? _react2.default.createElement(_Radio2.default, {
            onChange: this.onRowValueChange(idx, rowIdx),
            checked: rowValue === true
          }) : _react2.default.createElement(_configUi.Checkbox, {
            onChange: this.onRowValueChange(idx, rowIdx),
            checked: rowValue === true,
            label: ''
          })
        )),
        _react2.default.createElement(
          'div',
          { className: classes.deleteIcon },
          _react2.default.createElement(
            _Button2.default,
            { onClick: this.onDeleteRow(idx) },
            _react2.default.createElement(_Delete2.default, { className: classes.deleteIcon })
          )
        )
      ),
      _react2.default.createElement('hr', { className: classes.separator })
    );

    return connectDragSource(connectDropTarget(content));
  }
}
exports.Row = Row;
Row.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  model: _propTypes2.default.object.isRequired,
  row: _propTypes2.default.object.isRequired,
  idx: _propTypes2.default.number.isRequired,
  isDragging: _propTypes2.default.bool.isRequired,
  onDeleteRow: _propTypes2.default.func.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  connectDragSource: _propTypes2.default.func.isRequired,
  connectDropTarget: _propTypes2.default.func.isRequired,
  onMoveRow: _propTypes2.default.func.isRequired,
  imageSupport: _propTypes2.default.shape({
    add: _propTypes2.default.func.isRequired,
    delete: _propTypes2.default.func.isRequired
  })
};
Row.defaultProps = {};
const styles = theme => ({
  actions: {
    padding: 0,
    justifyContent: 'space-between'
  },
  choice: {
    padding: theme.spacing.unit,
    overflow: 'visible'
  },
  dragHandle: {
    cursor: 'move'
  },
  dragDisabled: {
    cursor: 'inherit'
  },

  container: {
    marginTop: theme.spacing.unit * 2,
    display: 'flex',
    flexDirection: 'column'
  },
  rowContainer: {
    marginTop: theme.spacing.unit * 2,
    display: 'flex',
    alignItems: 'center',
    flex: 1
  },
  rowItem: {
    flex: 1,
    display: 'flex',
    justifyContent: 'center',
    '&> div': {
      width: '100%'
    }
  },
  deleteIcon: {
    flex: 0.5,
    minWidth: '88px'
  },
  questionText: {
    flex: 2,
    display: 'flex',
    justifyContent: 'flex-start'
  },
  separator: {
    marginTop: theme.spacing.unit * 2,
    border: 0,
    borderTop: '2px solid lightgray',
    width: '100%'
  }
});

const StyledRow = (0, _styles.withStyles)(styles)(Row);

const NAME = 'row-config';

const choiceSource = exports.choiceSource = {
  canDrag() {
    return canDrag;
  },
  beginDrag(props) {
    return {
      id: props.row.id,
      index: props.idx
    };
  }
};

const StyledSource = (0, _reactDnd.DragSource)(NAME, choiceSource, (connect, monitor) => ({
  connectDragSource: connect.dragSource(),
  isDragging: monitor.isDragging()
}))(StyledRow);

const choiceTarget = exports.choiceTarget = {
  hover() {
    log('[hover]');
  },
  drop(props, monitor) {
    const item = monitor.getItem();
    log('[drop] item: ', item, 'didDrop?', monitor.didDrop());
    props.onMoveRow(item.index, props.idx);
  }
};

const StyledSourceAndTarget = (0, _reactDnd.DropTarget)(NAME, choiceTarget, connect => ({
  connectDropTarget: connect.dropTarget()
}))(StyledSource);

exports.default = StyledSourceAndTarget;