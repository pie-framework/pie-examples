'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sized = require('./sized');

var _sized2 = _interopRequireDefault(_sized);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Lines = function Lines() {
  var style = {
    fill: 'none',
    stroke: '#BCE2FF',
    strokeWidth: 2,
    strokeMiterlimit: 10
  };

  return _react2.default.createElement(
    'g',
    null,
    _react2.default.createElement('line', { style: style, x1: '-98', y1: '142', x2: '-114.6', y2: '142' }),
    _react2.default.createElement('line', { style: style, x1: '-98', y1: '146.3', x2: '-114.6', y2: '146.3' }),
    _react2.default.createElement('line', { style: style, x1: '-104', y1: '150.7', x2: '-114.6', y2: '150.7' })
  );
};

var Root = function Root(_ref) {
  var children = _ref.children,
      size = _ref.size;
  return _react2.default.createElement(
    _sized2.default,
    { size: size },
    _react2.default.createElement(
      'svg',
      {
        version: '1.1',
        viewBox: '-128 129 31 31',
        style: { enableBackground: 'new -128 129 31 31' }
      },
      children
    )
  );
};

Root.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired,
  size: _propTypes2.default.number
};

var GreyInfo = function GreyInfo() {
  return _react2.default.createElement(
    'g',
    null,
    _react2.default.createElement('rect', {
      x: '-123.9',
      y: '135.3',
      style: {
        fill: '#D0CAC5',
        stroke: '#E6E3E0',
        strokeWidth: 0.75,
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      width: '4.1',
      height: '4.1'
    }),
    _react2.default.createElement('polygon', {
      style: {
        fill: '#D0CAC5',
        stroke: '#E6E3E0',
        strokeWidth: 0.75,
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      points: '-119.8,150.4 -119.8,142.2 -125,142.2 -125,144.9 -122.6,144.9 -122.6,150.4 -125.6,150.4  -125.6,153.2 -116.8,153.2 -116.8,150.4        '
    }),
    _react2.default.createElement('rect', {
      x: '-124.7',
      y: '134.7',
      style: {
        fill: '#B3ABA4',
        stroke: '#CDC7C2',
        strokeWidth: 0.5,
        strokeLinecap: 'round',
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      width: '4.1',
      height: '4.1'
    }),
    _react2.default.createElement('polygon', {
      style: {
        fill: '#B3ABA4',
        stroke: '#CDC7C2',
        strokeWidth: 0.5,
        strokeLinecap: 'round',
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      points: '-120.6,149.8 -120.6,141.5 -125.8,141.5 -125.8,144.3 -123.3,144.3 -123.3,149.8 -126.4,149.8  -126.4,152.5 -117.6,152.5 -117.6,149.8        '
    }),
    _react2.default.createElement('rect', {
      x: '-125.5',
      y: '134',
      style: { fill: '#7FABC6' },
      width: '4.1',
      height: '4.1'
    }),
    _react2.default.createElement('polygon', {
      style: { fill: '#7FABC6' },
      points: '-121.4,149.1 -121.4,140.9 -126.5,140.9 -126.5,143.6 -124.1,143.6 -124.1,149.1 -127.1,149.1  -127.1,151.9 -118.4,151.9 -118.4,149.1        '
    })
  );
};

var BlueInfo = function BlueInfo() {
  return _react2.default.createElement(
    'g',
    null,
    _react2.default.createElement('rect', {
      x: '-123.9',
      y: '135.3',
      style: {
        fill: '#D0CAC5',
        stroke: '#E6E3E0',
        strokeWidth: 0.75,
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      width: '4.1',
      height: '4.1'
    }),
    _react2.default.createElement('polygon', {
      style: {
        fill: '#D0CAC5',
        stroke: '#E6E3E0',
        strokeWidth: 0.75,
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      points: '-119.8,150.4 -119.8,142.2 -125,142.2 -125,144.9 -122.6,144.9 -122.6,150.4 -125.6,150.4  -125.6,153.2 -116.8,153.2 -116.8,150.4        '
    }),
    _react2.default.createElement('rect', {
      x: '-124.7',
      y: '134.7',
      style: {
        fill: '#B3ABA4',
        stroke: '#CDC7C2',
        strokeWidth: 0.5,
        strokeLinecap: 'round',
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      width: '4.1',
      height: '4.1'
    }),
    _react2.default.createElement('polygon', {
      style: {
        fill: '#B3ABA4',
        stroke: '#CDC7C2',
        strokeWidth: 0.5,
        strokeLinecap: 'round',
        strokeLinejoin: 'round',
        strokeMiterlimit: 10
      },
      points: '-120.6,149.8 -120.6,141.5 -125.8,141.5 -125.8,144.3 -123.3,144.3 -123.3,149.8 -126.4,149.8  -126.4,152.5 -117.6,152.5 -117.6,149.8        '
    }),
    _react2.default.createElement('rect', {
      x: '-125.5',
      y: '134',
      style: { fill: '#1A9CFF' },
      width: '4.1',
      height: '4.1'
    }),
    _react2.default.createElement('polygon', {
      style: { fill: '#1A9CFF' },
      points: '-121.4,149.1 -121.4,140.9 -126.5,140.9 -126.5,143.6 -124.1,143.6 -124.1,149.1 -127.1,149.1  -127.1,151.9 -118.4,151.9 -118.4,149.1        '
    })
  );
};

var Instructions = function (_React$Component) {
  _inherits(Instructions, _React$Component);

  function Instructions(props) {
    _classCallCheck(this, Instructions);

    return _possibleConstructorReturn(this, (Instructions.__proto__ || Object.getPrototypeOf(Instructions)).call(this, props));
  }

  _createClass(Instructions, [{
    key: 'render',
    value: function render() {
      if (this.props.open === true) {
        return _react2.default.createElement(
          Root,
          null,
          _react2.default.createElement(GreyInfo, null),
          _react2.default.createElement(Lines, null)
        );
      } else {
        return _react2.default.createElement(
          Root,
          null,
          _react2.default.createElement(BlueInfo, null),
          _react2.default.createElement(Lines, null)
        );
      }
    }
  }]);

  return Instructions;
}(_react2.default.Component);

exports.default = Instructions;


Instructions.propTypes = {
  open: _propTypes2.default.bool
};

Instructions.defaultProps = {
  open: false
};