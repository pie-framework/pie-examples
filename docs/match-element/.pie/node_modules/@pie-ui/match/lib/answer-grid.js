'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnswerGrid = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Radio = require('@material-ui/core/Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _Checkbox = require('@material-ui/core/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AnswerGrid extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.onRowValueChange = (rowId, answerIndex) => event => {
      var _props = this.props;
      const onAnswerChange = _props.onAnswerChange,
            responseType = _props.responseType,
            answers = _props.answers;

      const newAnswers = _extends({}, answers);

      if (responseType === 'radio') {
        for (let i = 0; i < newAnswers[rowId].length; i++) {
          newAnswers[rowId][i] = false;
        }
      }

      newAnswers[rowId][answerIndex] = event.target.checked;

      onAnswerChange(newAnswers);
    }, this.answerIsCorrect = (rowId, rowValue, rowValueIndex) => {
      const correctAnswers = this.props.correctAnswers;


      return correctAnswers[rowId][rowValueIndex] === rowValue && rowValue === true;
    }, this.answerIsIncorrect = (rowId, rowValue, rowValueIndex) => {
      const correctAnswers = this.props.correctAnswers;


      return correctAnswers[rowId][rowValueIndex] === true && rowValue === false || correctAnswers[rowId][rowValueIndex] === false && rowValue === true;
    }, _temp;
  }

  // needs a separate method because what isn't correct isn't necessarily incorrect


  render() {
    var _props2 = this.props;
    const classes = _props2.classes,
          showCorrect = _props2.showCorrect,
          headers = _props2.headers,
          rows = _props2.rows,
          responseType = _props2.responseType,
          answers = _props2.answers,
          disabled = _props2.disabled,
          view = _props2.view;


    return _react2.default.createElement(
      'div',
      { className: classes.controlsContainer },
      rows.length === 0 && _react2.default.createElement(
        _Typography2.default,
        { component: 'div', className: classes.empty },
        'There are currently no questions to show.'
      ),
      _react2.default.createElement(
        'div',
        { className: classes.rowContainer },
        rows.length > 0 && headers.map((header, idx) => _react2.default.createElement(
          'div',
          { key: idx, className: (0, _classnames2.default)(classes.rowItem, { [classes.questionText]: idx === 0 }) },
          header
        ))
      ),
      rows.length > 0 && _react2.default.createElement('hr', { className: classes.separator }),
      rows.map((row, idx) => _react2.default.createElement(
        'div',
        { key: idx },
        _react2.default.createElement(
          'div',
          { className: classes.rowContainer },
          _react2.default.createElement('div', { className: (0, _classnames2.default)(classes.rowItem, classes.questionText), dangerouslySetInnerHTML: { __html: row.title } }),
          answers[row.id].map((rowItem, answerIndex) => _react2.default.createElement(
            'div',
            { key: answerIndex, className: classes.rowItem },
            responseType === 'radio' ? _react2.default.createElement(_Radio2.default, {
              className: (0, _classnames2.default)({
                [classes.correct]: showCorrect && rowItem === true || disabled && !view && this.answerIsCorrect(row.id, rowItem, answerIndex),
                [classes.incorrect]: disabled && !view && this.answerIsIncorrect(row.id, rowItem, answerIndex)
              }),
              disabled: disabled,
              onChange: this.onRowValueChange(row.id, answerIndex),
              checked: rowItem === true
            }) : _react2.default.createElement(_Checkbox2.default, {
              className: (0, _classnames2.default)({
                [classes.correct]: showCorrect && rowItem === true || disabled && !view && this.answerIsCorrect(row.id, rowItem, answerIndex),
                [classes.incorrect]: disabled && !view && this.answerIsIncorrect(row.id, rowItem, answerIndex)
              }),
              disabled: disabled,
              onChange: this.onRowValueChange(row.id, answerIndex),
              checked: rowItem === true
            })
          ))
        ),
        _react2.default.createElement('hr', { className: classes.separator })
      ))
    );
  }
}

exports.AnswerGrid = AnswerGrid;
AnswerGrid.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  correctAnswers: _propTypes2.default.object,
  view: _propTypes2.default.bool.isRequired,
  showCorrect: _propTypes2.default.bool.isRequired,
  disabled: _propTypes2.default.bool.isRequired,
  onAnswerChange: _propTypes2.default.func.isRequired,
  responseType: _propTypes2.default.string.isRequired,
  rows: _propTypes2.default.array.isRequired,
  headers: _propTypes2.default.array.isRequired,
  answers: _propTypes2.default.object.isRequired
};
const styles = theme => ({
  correct: {
    color: 'green !important'
  },
  incorrect: {
    color: 'red !important'
  },
  empty: {
    margin: theme.spacing.unit * 2
  },
  controlsContainer: {
    width: '90%',
    marginLeft: 'auto',
    marginRight: 'auto',
    marginTop: theme.spacing.unit,
    marginBottom: theme.spacing.unit
  },
  separator: {
    border: 0,
    borderTop: '2px solid lightgray',
    width: '100%'
  },
  rowContainer: {
    display: 'flex',
    alignItems: 'center',
    flex: 1
  },
  rowItem: {
    flex: 1,
    display: 'flex',
    justifyContent: 'center'
  },
  questionText: {
    flex: 2,
    display: 'flex',
    justifyContent: 'flex-start'
  }
});

exports.default = (0, _styles.withStyles)(styles)(AnswerGrid);