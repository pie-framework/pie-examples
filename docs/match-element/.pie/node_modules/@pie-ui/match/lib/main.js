'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Main = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _correctAnswerToggle = require('@pie-lib/correct-answer-toggle');

var _correctAnswerToggle2 = _interopRequireDefault(_correctAnswerToggle);

var _renderUi = require('@pie-lib/render-ui');

var _answerGrid = require('./answer-grid');

var _answerGrid2 = _interopRequireDefault(_answerGrid);

var _styles = require('@material-ui/core/styles');

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function shuffle(array) {
  let counter = array.length;

  while (counter > 0) {
    let index = Math.floor(Math.random() * counter);

    counter--;

    let temp = array[counter];
    array[counter] = array[index];
    array[index] = temp;
  }

  return array;
}

class Main extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.generateAnswers = model => {
      const config = model.config;

      const answers = {};

      config.rows.forEach(row => {
        answers[row.id] = new Array(config.layout - 1).fill(false);
      });

      return answers;
    };

    this.isAnswerRegenerationRequired = nextProps => {
      let isRequired = false;

      if (this.props.model.config.responseType !== nextProps.model.config.responseType) {
        isRequired = true;
      }

      if (this.props.model.config.layout !== nextProps.model.config.layout) {
        isRequired = true;
      }

      if (this.props.model.config.rows.length !== nextProps.model.config.rows.length || nextProps.session.answers && nextProps.model.config.rows.length !== Object.keys(nextProps.session.answers).length) {
        isRequired = true;
      }

      return isRequired || !nextProps.session.answers;
    };

    this.isShuffleRowsRequired = nextProps => this.props.model.config.shuffled === false && nextProps.model.config.shuffled === true;

    this.isResetRowsRequired = nextProps => this.props.model.config.shuffled === true && nextProps.model.config.shuffled === false || this.props.model.config.rows.length !== nextProps.model.config.rows.length || !(0, _isEqual2.default)(this.props.model.config.rows, nextProps.model.config.rows) || nextProps.session.answers && nextProps.model.config.rows.length !== Object.keys(nextProps.session.answers).length;

    this.callOnSessionChange = () => {
      const onSessionChange = this.props.onSessionChange;


      if (onSessionChange) {
        onSessionChange(this.state.session);
      }
    };

    this.toggleShowCorrect = show => {
      this.setState({ showCorrect: show });
    };

    this.onAnswerChange = newAnswers => {
      this.setState(state => ({
        session: _extends({}, state.session, {
          answers: newAnswers
        })
      }), this.callOnSessionChange);
    };

    this.state = {
      session: _extends({}, props.session, {
        answers: this.generateAnswers(props.model)
      }),
      // initially it'll be the same as the actual rows
      shuffledRows: props.model.config.rows,
      showCorrect: false
    };

    this.callOnSessionChange();
  }

  componentWillReceiveProps(nextProps) {
    const regenAnswers = this.isAnswerRegenerationRequired(nextProps);
    const shuffleRows = this.isShuffleRowsRequired(nextProps);
    const resetRows = this.isResetRowsRequired(nextProps);

    this.setState(state => ({
      session: _extends({}, nextProps.session, {
        // regenerate answers if layout or responseType change
        answers: regenAnswers ? this.generateAnswers(nextProps.model) : nextProps.session.answers
      }),
      // shuffle if needed
      shuffledRows: shuffleRows ? shuffle([...nextProps.model.config.rows]) : resetRows ? nextProps.model.config.rows : state.shuffledRows,
      showCorrect: this.props.model.disabled && !nextProps.model.disabled && state.showCorrect ? false : state.showCorrect
    }), () => {
      if (regenAnswers) this.callOnSessionChange();
    });
  }

  render() {
    var _props = this.props;
    const model = _props.model,
          classes = _props.classes;
    var _state = this.state;
    const showCorrect = _state.showCorrect,
          shuffledRows = _state.shuffledRows,
          session = _state.session;


    return _react2.default.createElement(
      'div',
      { className: classes.mainContainer },
      _react2.default.createElement(
        'div',
        { className: classes.main },
        model.correctness && _react2.default.createElement(
          'div',
          null,
          'Score: ',
          model.correctness.score
        ),
        _react2.default.createElement(_correctAnswerToggle2.default, {
          className: classes.toggle,
          show: model.correctness && model.correctness.correctness !== 'correct',
          toggled: showCorrect,
          onToggle: this.toggleShowCorrect
        }),
        _react2.default.createElement(_answerGrid2.default, {
          showCorrect: showCorrect,
          correctAnswers: model.correctResponse,
          disabled: model.disabled,
          view: model.view,
          onAnswerChange: this.onAnswerChange,
          responseType: model.config.responseType,
          answers: showCorrect ? model.correctResponse : session.answers,
          headers: model.config.headers,
          rows: shuffledRows
        })
      ),
      model.feedback && _react2.default.createElement(_renderUi.Feedback, {
        correctness: model.correctness.correctness,
        feedback: model.feedback
      })
    );
  }
}

exports.Main = Main;
Main.propTypes = {
  classes: _propTypes2.default.object,
  session: _propTypes2.default.object.isRequired,
  onSessionChange: _propTypes2.default.func,
  model: _propTypes2.default.object.isRequired
};
const styles = theme => ({
  mainContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center'
  },
  main: {
    width: '100%'
  },
  toggle: {
    paddingBottom: theme.spacing.unit * 3
  }
});

exports.default = (0, _styles.withStyles)(styles)(Main);