'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Delete = require('@material-ui/icons/Delete');

var _Delete2 = _interopRequireDefault(_Delete);

var _Checkbox = require('@material-ui/core/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Radio = require('@material-ui/core/Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _styles = require('@material-ui/core/styles');

var _configUi = require('@pie-lib/config-ui');

var _addRow = require('./add-row');

var _addRow2 = _interopRequireDefault(_addRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const styles = theme => ({
  container: {
    marginTop: theme.spacing.unit * 2,
    display: 'flex',
    flexDirection: 'column'
  },
  rowContainer: {
    marginTop: theme.spacing.unit * 2,
    display: 'flex',
    alignItems: 'center',
    flex: 1
  },
  rowItem: {
    flex: 1,
    display: 'flex',
    justifyContent: 'center'
  },
  deleteIcon: {
    flex: 0.5,
    minWidth: '88px'
  },
  questionText: {
    flex: 2,
    display: 'flex',
    justifyContent: 'flex-start'
  },
  rowTable: {
    display: 'flex',
    flexDirection: 'column'
  },
  separator: {
    marginTop: theme.spacing.unit * 2,
    border: 0,
    borderTop: '2px solid lightgray',
    width: '100%'
  },
  checkboxContainer: {
    display: 'flex',
    justifyContent: 'space-between'
  },
  optionsCheckbox: {
    flex: 1,
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-between'
  },
  headerInput: {
    textAlign: 'center',
    maxWidth: '100px'
  }
});

class AnswerConfigBlock extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.onChange = (name, isBoolean) => event => {
      var _props = this.props;
      const model = _props.model,
            onChange = _props.onChange;

      const newModel = _extends({}, model);

      newModel[name] = isBoolean ? event.target.checked : event.target.value;

      onChange(newModel, name);
    }, this.onDeleteRow = idx => () => {
      this.props.onDeleteRow(idx);
    }, this.onRowValueChange = (rowIndex, rowValueIndex) => event => {
      var _props2 = this.props;
      const model = _props2.model,
            onChange = _props2.onChange;

      const newModel = _extends({}, model);

      if (model.responseType === 'radio') {
        for (let i = 0; i < newModel.rows[rowIndex].values.length; i++) {
          newModel.rows[rowIndex].values[i] = false;
        }
      }

      newModel.rows[rowIndex].values[rowValueIndex] = event.target.checked;

      onChange(newModel);
    }, this.onRowTitleChange = rowIndex => event => {
      var _props3 = this.props;
      const model = _props3.model,
            onChange = _props3.onChange;

      const newModel = _extends({}, model);

      newModel.rows[rowIndex].title = event.target.value;

      onChange(newModel);
    }, this.onHeaderChange = headerIndex => event => {
      var _props4 = this.props;
      const model = _props4.model,
            onChange = _props4.onChange;

      const newModel = _extends({}, model);

      newModel.headers[headerIndex] = event.target.value;

      onChange(newModel);
    }, _temp;
  }

  render() {
    var _props5 = this.props;
    const classes = _props5.classes,
          model = _props5.model,
          onAddRow = _props5.onAddRow;


    return React.createElement(
      'div',
      { className: classes.container },
      React.createElement(
        _Typography2.default,
        { type: 'body1', component: 'div' },
        'Click on the labels to edit or remove. Set the correct answers by clicking each correct answer per row.'
      ),
      React.createElement(
        'div',
        { className: classes.rowTable },
        React.createElement(
          'div',
          { className: classes.rowContainer },
          model.headers.map((header, idx) => React.createElement(
            'div',
            { key: idx, className: (0, _classnames2.default)(classes.rowItem, { [classes.questionText]: idx === 0 }) },
            React.createElement(_Input2.default, {
              type: 'text',
              disableUnderline: true,
              classes: idx === 0 ? null : { input: classes.headerInput },
              onChange: this.onHeaderChange(idx),
              value: header,
              placeholder: 'Enter Value'
            })
          )),
          React.createElement(
            'div',
            { className: classes.deleteIcon },
            React.createElement(
              _Button2.default,
              { disabled: true },
              React.createElement('div', null)
            )
          )
        ),
        React.createElement('hr', { className: classes.separator }),
        model.rows.map((row, idx) => React.createElement(
          'div',
          { key: idx },
          React.createElement(
            'div',
            { className: classes.rowContainer },
            React.createElement(
              'div',
              { className: (0, _classnames2.default)(classes.rowItem, classes.questionText) },
              React.createElement(_Input2.default, {
                type: 'text',
                disableUnderline: true,
                onChange: this.onRowTitleChange(idx),
                value: row.title,
                placeholder: 'Enter Value'
              })
            ),
            row.values.map((rowValue, rowIdx) => React.createElement(
              'div',
              { key: rowIdx, className: classes.rowItem },
              model.responseType === 'radio' ? React.createElement(_Radio2.default, {
                onChange: this.onRowValueChange(idx, rowIdx),
                checked: rowValue === true
              }) : React.createElement(_Checkbox2.default, {
                onChange: this.onRowValueChange(idx, rowIdx),
                checked: rowValue === true
              })
            )),
            React.createElement(
              'div',
              { className: classes.deleteIcon },
              React.createElement(
                _Button2.default,
                { onClick: this.onDeleteRow(idx) },
                React.createElement(_Delete2.default, { className: classes.deleteIcon })
              )
            )
          ),
          React.createElement('hr', { className: classes.separator })
        )),
        React.createElement(_addRow2.default, { onAddClick: onAddRow }),
        React.createElement(
          'div',
          { className: classes.checkboxContainer },
          React.createElement(
            'div',
            { className: classes.optionsCheckbox },
            React.createElement(_configUi.InputCheckbox, {
              label: 'Shuffle Choices',
              checked: model.shuffled,
              onChange: this.onChange('shuffled', true) })
          ),
          React.createElement(
            'div',
            { className: classes.optionsCheckbox },
            React.createElement(_configUi.InputCheckbox, {
              label: 'Allow Partial Scoring',
              checked: model.allowPartialScoring,
              onChange: this.onChange('allowPartialScoring', true) })
          )
        )
      )
    );
  }
}

AnswerConfigBlock.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  model: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  onDeleteRow: _propTypes2.default.func.isRequired,
  onAddRow: _propTypes2.default.func.isRequired
};
exports.default = (0, _styles.withStyles)(styles)(AnswerConfigBlock);