'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _configUi = require('@pie-lib/config-ui');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Select = require('@material-ui/core/Select');

var _Select2 = _interopRequireDefault(_Select);

var _MenuItem = require('@material-ui/core/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const styles = theme => ({
  container: {
    marginTop: theme.spacing.unit * 2,
    display: 'flex'
  },
  input: {
    flex: 1
  },
  inputContainer: {
    width: '90%'
  }
});

class GeneralConfigBlock extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.onChange = name => event => {
      var _props = this.props;
      const model = _props.model,
            onLayoutChange = _props.onLayoutChange,
            onResponseTypeChange = _props.onResponseTypeChange;

      const newModel = _extends({}, model);

      newModel[name] = event.target.value;

      if (name === 'layout') {
        onLayoutChange(newModel[name]);
      } else {
        onResponseTypeChange(newModel[name]);
      }
    }, _temp;
  }

  render() {
    var _props2 = this.props;
    const classes = _props2.classes,
          model = _props2.model;


    return React.createElement(
      'div',
      { className: classes.container },
      React.createElement(
        'div',
        { className: classes.input },
        React.createElement(
          _configUi.InputContainer,
          { label: 'Layout', className: classes.inputContainer },
          React.createElement(
            _Select2.default,
            {
              className: classes.select,
              onChange: this.onChange('layout'),
              value: model.layout
            },
            React.createElement(
              _MenuItem2.default,
              { value: 3 },
              '3 Columns'
            ),
            React.createElement(
              _MenuItem2.default,
              { value: 4 },
              '4 Columns'
            ),
            React.createElement(
              _MenuItem2.default,
              { value: 5 },
              '5 Columns'
            )
          )
        )
      ),
      React.createElement(
        'div',
        { className: classes.input },
        React.createElement(
          _configUi.InputContainer,
          { label: 'Response Type', className: classes.inputContainer },
          React.createElement(
            _Select2.default,
            {
              className: classes.select,
              onChange: this.onChange('responseType'),
              value: model.responseType
            },
            React.createElement(
              _MenuItem2.default,
              { value: 'radio' },
              'Radio - One Answer'
            ),
            React.createElement(
              _MenuItem2.default,
              { value: 'checkbox' },
              'Checkbox - Multiple Answers'
            )
          )
        )
      )
    );
  }
}

GeneralConfigBlock.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  model: _propTypes2.default.object.isRequired,
  onResponseTypeChange: _propTypes2.default.func.isRequired,
  onLayoutChange: _propTypes2.default.func.isRequired
};
exports.default = (0, _styles.withStyles)(styles)(GeneralConfigBlock);