'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NothingSubmitted = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _iconRoot = require('./icon-root');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Exclamation = function Exclamation(_ref) {
  var className = _ref.className;
  return _react2.default.createElement(
    'g',
    null,
    _react2.default.createElement('rect', { x: '19.3', y: '10.3', className: className, width: '4.5', height: '12.7' }),
    _react2.default.createElement('rect', { x: '19.3', y: '26.2', className: className, width: '4.5', height: '4.5' })
  );
};

var Octagon = function Octagon(_ref2) {
  var className = _ref2.className;
  return _react2.default.createElement('polygon', {
    className: className,
    points: '14.8,4.5 5.6,13.8 5.6,27 14.8,36.5 28.1,36.5 37.6,27 37.6,13.8 28.1,4.5'
  });
};

var Emoji = function Emoji(_ref3) {
  var className = _ref3.className;
  return _react2.default.createElement(
    'g',
    null,
    _react2.default.createElement('rect', { x: '23.8', y: '15', className: className, width: '3.5', height: '4.4' }),
    _react2.default.createElement('rect', { x: '16', y: '15', className: className, width: '3.5', height: '4.4' }),
    _react2.default.createElement('path', {
      className: className,
      d: 'M24.2,27.1h-5.1c-0.8,0-1.5-0.7-1.5-1.5v0c0-0.8,0.7-1.5,1.5-1.5h5.1c0.8,0,1.5,0.7,1.5,1.5v0 C25.7,26.4,25,27.1,24.2,27.1z'
    })
  );
};

Emoji.propTypes = Octagon.propTypes = Exclamation.propTypes = {
  className: _propTypes2.default.string
};
var styles = (0, _iconRoot.getStyles)('nothing-submitted', 'white', '#464146');

var NothingSubmitted = exports.NothingSubmitted = function (_React$Component) {
  _inherits(NothingSubmitted, _React$Component);

  function NothingSubmitted(props) {
    _classCallCheck(this, NothingSubmitted);

    var _this = _possibleConstructorReturn(this, (NothingSubmitted.__proto__ || Object.getPrototypeOf(NothingSubmitted)).call(this, props));

    var classes = _this.props.classes;

    _this.icons = {
      check: _react2.default.createElement(
        _iconRoot.IconRoot,
        null,
        _react2.default.createElement(Octagon, { className: classes.bg }),
        _react2.default.createElement(Exclamation, { className: classes.fg })
      ),
      emoji: _react2.default.createElement(
        _iconRoot.IconRoot,
        null,
        _react2.default.createElement(Octagon, { className: classes.bg }),
        _react2.default.createElement(Emoji, { className: classes.fg })
      ),
      feedback: {
        check: _react2.default.createElement(
          _iconRoot.IconRoot,
          null,
          _react2.default.createElement(Octagon, { className: classes.bg }),
          _react2.default.createElement(Emoji, { className: classes.fg })
        ),
        emoji: _react2.default.createElement(
          _iconRoot.IconRoot,
          null,
          _react2.default.createElement(Octagon, { className: classes.bg }),
          _react2.default.createElement(Emoji, { className: classes.fg })
        ),
        square: {
          check: _react2.default.createElement(
            _iconRoot.IconRoot,
            null,
            _react2.default.createElement(Octagon, { className: classes.bg }),
            _react2.default.createElement(Exclamation, { className: classes.fg })
          ),
          emoji: _react2.default.createElement(
            _iconRoot.IconRoot,
            null,
            _react2.default.createElement(Octagon, { className: classes.bg }),
            _react2.default.createElement(Emoji, { className: classes.fg })
          ),
          open: {
            check: _react2.default.createElement(
              _iconRoot.IconRoot,
              null,
              _react2.default.createElement(Exclamation, { className: classes.bg })
            ),
            emoji: _react2.default.createElement(
              _iconRoot.IconRoot,
              null,
              _react2.default.createElement(Emoji, { className: classes.bg })
            )
          }
        }
      }
    };
    return _this;
  }

  _createClass(NothingSubmitted, [{
    key: 'render',
    value: function render() {
      if (this.props.category === undefined) {
        return this.icons[this.props.iconSet];
      } else {
        if (this.props.shape === undefined) {
          return this.icons.feedback[this.props.iconSet];
        } else {
          if (this.props.open === true) {
            return this.icons.feedback.square.open[this.props.iconSet];
          } else {
            return this.icons.feedback.square[this.props.iconSet];
          }
        }
      }
    }
  }]);

  return NothingSubmitted;
}(_react2.default.Component);

NothingSubmitted.propTypes = {
  classes: _propTypes2.default.object.isRequired
};


NothingSubmitted.propTypes = {
  iconSet: _propTypes2.default.oneOf(['emoji', 'check', undefined]),
  shape: _propTypes2.default.oneOf(['square', undefined]),
  category: _propTypes2.default.oneOf(['feedback', undefined]),
  open: _propTypes2.default.bool
};

NothingSubmitted.defaultProps = {
  iconSet: 'check',
  shape: undefined,
  category: undefined,
  open: false
};

exports.default = (0, _styles.withStyles)(styles)(NothingSubmitted);