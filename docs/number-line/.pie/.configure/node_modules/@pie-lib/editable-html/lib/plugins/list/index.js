'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serialization = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _slateEditList = require('slate-edit-list');

var _slateEditList2 = _interopRequireDefault(_slateEditList);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line
var log = (0, _debug2.default)('@pie-lib:editable-html:plugins:list');

var b = function b(type, next, childNodes) {
  return {
    object: 'block',
    type: type,
    nodes: next(childNodes)
  };
};

var serialization = exports.serialization = {
  deserialize: function deserialize(el, next) {
    var name = el.tagName.toLowerCase();

    if (name === 'li') {
      return b('list_item', next, el.childNodes);
    }

    if (name === 'ul') {
      return b('ul_list', next, el.childNodes);
    }

    if (name === 'ol') {
      return b('ol_list', next, el.childNodes);
    }
  },
  serialize: function serialize(object, children) {
    if (object.object !== 'block') return;

    if (object.type === 'list_item') {
      return _react2.default.createElement(
        'li',
        null,
        children
      );
    }
    if (object.type === 'ul_list') {
      var out = _react2.default.createElement(
        'ul',
        null,
        children
      );
      return out;
    }
    if (object.type === 'ol_list') {
      return _react2.default.createElement(
        'ol',
        null,
        children
      );
    }
  }
};

exports.default = function (options) {
  var type = options.type,
      icon = options.icon;


  var core = (0, _slateEditList2.default)({
    typeDefault: 'span'
  });

  core.renderNode = function (props) {
    var node = props.node,
        attributes = props.attributes,
        children = props.children;


    switch (node.type) {
      case 'ul_list':
        return _react2.default.createElement(
          'ul',
          attributes,
          children
        );
      case 'ol_list':
        return _react2.default.createElement(
          'ol',
          attributes,
          children
        );
      case 'list_item':
        return _react2.default.createElement(
          'li',
          attributes,
          children
        );
    }
  };

  var toolbar = {
    isMark: false,
    type: type,
    icon: icon,
    isActive: function isActive(value, type) {
      if (!core.utils.isSelectionInList(value)) {
        return false;
      }
      var current = core.utils.getCurrentList(value);
      return current.type === type;
    },
    onClick: function onClick(value, onChange) {
      log('[onClick]', value);
      var inList = core.utils.isSelectionInList(value);
      if (inList) {
        var change = value.change().call(core.changes.unwrapList);
        onChange(change);
      } else {
        var _change = value.change().call(core.changes.wrapInList, type);
        onChange(_change);
      }
    }
  };

  core.toolbar = toolbar;

  return core;
};