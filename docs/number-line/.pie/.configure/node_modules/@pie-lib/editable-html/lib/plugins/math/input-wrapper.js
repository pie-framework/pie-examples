'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mathInput = require('@pie-lib/math-input');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Exposes a change function that will update a math input
 * while editing is true.
 */
var MathWrapper = function (_React$Component) {
  _inherits(MathWrapper, _React$Component);

  function MathWrapper() {
    _classCallCheck(this, MathWrapper);

    return _possibleConstructorReturn(this, (MathWrapper.__proto__ || Object.getPrototypeOf(MathWrapper)).apply(this, arguments));
  }

  _createClass(MathWrapper, [{
    key: 'change',
    value: function change(c) {
      var editing = this.props.editing;

      if (!editing || !this.input) {
        return;
      }

      if (c) {
        if (c.type === 'blur') {
          this.input.blur();
          return this.props.latex;
        } else if (c.type === 'clear') {
          return this.input.clear();
        } else if (c.type === 'command') {
          return this.input.command(c.value);
        } else if (c.type === 'cursor') {
          return this.input.keystroke(c.value);
        } else {
          return this.input.write(c.value);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          latex = _props.latex,
          editing = _props.editing,
          onClick = _props.onClick,
          onChange = _props.onChange,
          onFocus = _props.onFocus,
          onBlur = _props.onBlur;


      return _react2.default.createElement(_mathInput.EditableMathInput, {
        ref: function ref(r) {
          return _this2.input = r;
        },
        latex: latex,
        editing: !!editing,
        onClick: onClick,
        onChange: onChange,
        onFocus: onFocus,
        onBlur: onBlur
      });
    }
  }]);

  return MathWrapper;
}(_react2.default.Component);

MathWrapper.propTypes = {
  editing: _propTypes2.default.bool,
  latex: _propTypes2.default.string,
  onClick: _propTypes2.default.func.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func
};
exports.default = MathWrapper;