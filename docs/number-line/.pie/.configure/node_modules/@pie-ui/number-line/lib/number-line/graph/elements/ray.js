'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ray = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _colors = require('../../colors');

var colors = _interopRequireWildcard(_colors);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _arrow = require('../arrow');

var _arrow2 = _interopRequireDefault(_arrow);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _base = require('./base');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const rayColor = color => ({
  '& line': {
    stroke: color
  },
  '& .arrow': {
    fill: color,
    strokeWidth: '1px',
    stroke: color
  }
});

const style = {
  ray: {
    '& line': {
      cursor: 'pointer',
      strokeWidth: '5px',
      stroke: 'var(--line-stroke, black)'
    },
    '& line, & .arrow': {
      transition: 'stroke 150ms linear, fill 150ms linear'
    }
  },
  selected: rayColor(colors.selected),
  correct: rayColor(colors.correct),
  incorrect: rayColor(colors.incorrect),
  arrowCorrect: {
    '--arrow-color': colors.correct
  },
  arrowIncorrect: {
    '--arrow-color': colors.incorrect
  },
  arrowSelected: {
    '--arrow-color': colors.selected
  }
};

class Ray extends _react2.default.Component {

  constructor(props) {
    super(props);
    this.state = {
      dragPosition: null
    };
  }

  drag(p) {
    const domain = this.props.domain;

    if (p >= domain.min && p <= domain.max) {
      this.setState({ dragPosition: p });
    }
  }

  stopDrag() {
    this.setState({ dragPosition: null });
  }

  render() {
    /* eslint-disable */
    var _props = this.props;
    const interval = _props.interval,
          empty = _props.empty,
          position = _props.position,
          direction = _props.direction,
          domain = _props.domain,
          y = _props.y,
          selected = _props.selected,
          disabled = _props.disabled,
          width = _props.width,
          correct = _props.correct,
          classes = _props.classes;
    /* eslint-enable */

    const xScale = this.context.xScale;


    const drag = this.drag.bind(this);
    const stopDrag = this.stopDrag.bind(this);

    const finalPosition = (0, _isNumber2.default)(this.state.dragPosition) ? this.state.dragPosition : position;

    const className = (0, _classnames2.default)(classes.ray, {
      [classes.selected]: selected,
      [classes.correct]: correct === true,
      [classes.incorrect]: correct === false
    });

    const positive = direction === 'positive';
    const left = positive ? finalPosition : domain.min;
    const right = positive ? domain.max : finalPosition;
    // const triangleX = positive ? xScale(right) : xScale(left);

    //const et the line run all the way to 0 or width.
    const x1 = positive ? xScale(left) : 8;
    const x2 = positive ? width - 8 : xScale(right);
    const arrowX = positive ? width : 0;
    const arrowDirection = positive ? 'right' : 'left';

    const noop = () => {};

    const arrowClassNames = (0, _classnames2.default)({
      [classes.arrowCorrect]: correct === true,
      [classes.arrowIncorrect]: correct === false,
      [classes.arrowSelected]: selected
    });

    return _react2.default.createElement(
      'g',
      { className: className, transform: `translate(0, ${y})` },
      _react2.default.createElement('line', {
        onClick: disabled ? noop : this.props.onToggleSelect,
        className: 'line-handle',
        x1: x1,
        x2: x2
      }),
      _react2.default.createElement(_point2.default, {
        disabled: disabled,
        correct: correct,
        selected: selected,
        empty: empty,
        interval: interval,
        bounds: { left: domain.min - position, right: domain.max - position },
        position: position,
        onDrag: drag,
        onDragStop: stopDrag,
        onMove: this.props.onMove
      }),
      _react2.default.createElement(_arrow2.default, {
        x: arrowX,
        className: arrowClassNames,
        direction: arrowDirection
      })
    );
  }
}

exports.Ray = Ray;
Ray.propTypes = _extends({}, (0, _base.basePropTypes)(), {
  width: _propTypes2.default.number.isRequired,
  selected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  empty: _propTypes2.default.bool,
  direction: _propTypes2.default.oneOf(['positive', 'negative']),
  y: _propTypes2.default.number,
  position: _propTypes2.default.number.isRequired,
  onMove: _propTypes2.default.func.isRequired,
  onToggleSelect: _propTypes2.default.func.isRequired
});
Ray.defaultProps = {
  selected: false,
  direction: 'positive',
  y: 0,
  disabled: false
};
Ray.contextTypes = {
  xScale: _propTypes2.default.func.isRequired,
  snapValue: _propTypes2.default.func.isRequired
};
exports.default = (0, _reactJss2.default)(style)(Ray);