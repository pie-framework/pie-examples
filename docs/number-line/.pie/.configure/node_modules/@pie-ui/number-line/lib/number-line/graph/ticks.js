'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ticks = exports.Tick = exports.TickValidator = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tickUtils = require('./tick-utils');

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const style = {
  text: {
    userSelect: 'none',
    textAlign: 'center',
    fill: 'var(--tick-color, black)'
  },
  line: {
    stroke: 'var(--tick-color, black)'
  }
};

const TickValidator = exports.TickValidator = _propTypes2.default.shape({
  /** the number of major ticks (including min + max)
   * to display. cant be lower than 2.
   */
  major: (props, propName) => {
    let major = props[propName];
    if (major < 2) {
      return new Error(`Invalid prop ${propName} < 2.`);
    }
  },
  /** the number of minor ticks to display between major ticks.
   * Can't be less than zero.
   */
  minor: (props, propName, componentName) => {
    let minor = props[propName];
    if (minor < 0) {
      return new Error(`Invalid prop ${propName} must be > 0. ${componentName}`);
    }
    if (minor > 20) {
      return new Error(`Invalid prop ${propName} must be less than or equal to 20. ${componentName}`);
    }
  }
}).isRequired;

class Tick extends _react2.default.Component {

  componentDidMount() {
    //center align the tick text
    if (this.text) {
      var _text$getBBox = this.text.getBBox();

      let width = _text$getBBox.width;

      this.text.setAttribute('x', width / 2 * -1);
    }
  }

  render() {
    //the domain value
    var _props = this.props;
    let label = _props.label,
        x = _props.x,
        y = _props.y,
        major = _props.major,
        classes = _props.classes;


    let xText = Number(label.toFixed(2));
    let height = major ? 20 : 10;

    return _react2.default.createElement(
      'g',
      { opacity: '1', transform: `translate(${x}, ${y})` },
      _react2.default.createElement('line', {
        className: classes.line,
        y1: height / 2 * -1,
        y2: height / 2,
        x1: '0.5',
        x2: '0.5'
      }),
      major && _react2.default.createElement(
        'text',
        {
          ref: text => this.text = text,
          className: classes.text,
          y: '14',
          width: '10',
          dy: '0.71em'
        },
        xText
      )
    );
  }
}

exports.Tick = Tick;
Tick.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  label: _propTypes2.default.number.isRequired,
  y: _propTypes2.default.number.isRequired,
  x: _propTypes2.default.number.isRequired,
  major: _propTypes2.default.bool
};
Tick.defaultProps = {
  major: false
};
class Ticks extends _react2.default.Component {

  render() {
    var _props2 = this.props;
    let domain = _props2.domain,
        ticks = _props2.ticks,
        interval = _props2.interval,
        y = _props2.y,
        classes = _props2.classes;
    let xScale = this.context.xScale;


    let tickModel = (0, _tickUtils.buildTickModel)(domain, ticks, interval, xScale);
    let nodes = tickModel.map(({ major, value, x }) => {
      return _react2.default.createElement(Tick, {
        classes: classes,
        major: major,
        key: value,
        label: value,
        y: y,
        x: x
      });
    });

    return _react2.default.createElement(
      'g',
      null,
      nodes
    );
  }
}

exports.Ticks = Ticks;
Ticks.contextTypes = {
  xScale: _propTypes2.default.func.isRequired
};
Ticks.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  domain: _propTypes2.default.shape({
    min: _propTypes2.default.number.isRequired,
    max: _propTypes2.default.number.isRequired
  }).isRequired,
  ticks: TickValidator,
  interval: _propTypes2.default.number.isRequired,
  y: _propTypes2.default.number.isRequired
};
exports.default = (0, _reactJss2.default)(style)(Ticks);