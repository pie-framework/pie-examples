'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _numberLine = require('@pie-ui/number-line');

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Point = _numberLine.pointChooser.Point;


const styles = {
  displayToggles: {
    paddingTop: '20px'
  }
};

class PointConfig extends _react2.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      selection: props.selection
    };
  }

  toggle(point) {
    this.state.selection[point] = !this.state.selection[point];
    this._stateUpdate();
  }

  toggleAll(value) {
    let display = PointConfig.types.reduce((acc, point) => {
      acc[point] = value;
      return acc;
    }, {});
    this.state.selection = display;
    this._stateUpdate();
  }

  _stateUpdate() {
    this.setState({
      selection: this.state.selection
    }, () => {
      this.props.onSelectionChange(this.state.selection);
    });
  }

  active(point) {
    return this.state.selection[point] === true; // ? 'active' : '';
  }

  render() {
    const classes = this.props.classes;


    const icons = PointConfig.types.map((point, key) => {
      return _react2.default.createElement(Point, {
        iconKey: point.toLowerCase(),
        key: point.toLowerCase(),
        onClick: this.toggle.bind(this, point),
        active: this.active(point)
      });
    });

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'div',
        null,
        icons
      ),
      _react2.default.createElement(
        'div',
        { className: classes.displayToggles },
        _react2.default.createElement(
          _Button2.default,
          { variant: 'raised', onClick: this.toggleAll.bind(this, true) },
          'Display All'
        ),
        _react2.default.createElement(
          _Button2.default,
          { variant: 'raised', onClick: this.toggleAll.bind(this, false) },
          'None'
        )
      )
    );
  }
}

PointConfig.types = ['PF', 'PE', 'LFF', 'LEF', 'LFE', 'LEE', 'RFN', 'RFP', 'REN', 'REP'];

exports.default = (0, _styles.withStyles)(styles, { name: 'PointConfig' })(PointConfig);