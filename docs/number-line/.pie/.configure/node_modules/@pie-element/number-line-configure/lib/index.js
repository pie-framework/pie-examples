'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _main = require('./main');

var _main2 = _interopRequireDefault(_main);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NumberLineConfigReactElement extends HTMLElement {
  constructor() {
    super();
  }

  set model(s) {
    this._model = s;
    this._rerender();
  }

  onDomainChanged(domain) {
    this._model.config.domain = domain;
    let detail = {
      update: this._model
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onTickFrequencyChange(event, value) {
    this._model.config.tickFrequency = parseInt(value, 10);
    let detail = {
      update: this._model
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onMinorTicksChanged(event, value) {
    this._model.config.showMinorTicks = value;
    let detail = {
      update: this._model
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onSnapPerTickChange(event, value) {
    this._model.config.snapPerTick = parseInt(value, 10);
    let detail = {
      update: this._model
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onConfigChange(config) {
    this._model.config = config;
    let detail = {
      update: this._model
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onCorrectResponseChange(correctResponse) {
    this._model.correctResponse = correctResponse;
    let detail = {
      update: this._model
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onInitialElementsChange(initialElements) {
    this._model.config.initialElements = initialElements;
    let detail = {
      update: this._model,
      reset: true
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onAvailableTypesChange(availableTypes) {
    this._model.config.availableTypes = availableTypes;
    let detail = {
      update: this._model,
      reset: true
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  onFeedbackChange(feedback) {
    this._model.feedback = feedback;
    let detail = {
      update: this._model
    };
    this.dispatchEvent(new CustomEvent('model.updated', { bubbles: true, detail }));
    this._rerender();
  }

  _rerender() {
    let element = _react2.default.createElement(_main2.default, {
      model: this._model,
      onDomainChange: this.onDomainChanged.bind(this),
      onMinorTicksChanged: this.onMinorTicksChanged.bind(this),
      onTickFrequencyChange: this.onTickFrequencyChange.bind(this),
      onSnapPerTickChange: this.onSnapPerTickChange.bind(this),
      onConfigChange: this.onConfigChange.bind(this),
      onCorrectResponseChange: this.onCorrectResponseChange.bind(this),
      onInitialElementsChange: this.onInitialElementsChange.bind(this),
      onAvailableTypesChange: this.onAvailableTypesChange.bind(this),
      onFeedbackChange: this.onFeedbackChange.bind(this)
    });
    _reactDom2.default.render(element, this);
  }
}
exports.default = NumberLineConfigReactElement;