'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointChooser = exports.dataConverter = exports.tickUtils = exports.NumberLineComponent = exports.Graph = undefined;

var _dataConverter = require('./data-converter');

var dataConverter = _interopRequireWildcard(_dataConverter);

var _pointChooser = require('./number-line/point-chooser');

var pointChooser = _interopRequireWildcard(_pointChooser);

var _tickUtils = require('./number-line/graph/tick-utils');

var tickUtils = _interopRequireWildcard(_tickUtils);

var _graph = require('./number-line/graph');

var _graph2 = _interopRequireDefault(_graph);

var _numberLine = require('./number-line');

var _numberLine2 = _interopRequireDefault(_numberLine);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

//Expose some additional modules for configuration
exports.Graph = _graph2.default;
exports.NumberLineComponent = _numberLine2.default;
exports.tickUtils = tickUtils;
exports.dataConverter = dataConverter;
exports.pointChooser = pointChooser;
class NumberLine extends HTMLElement {
  constructor() {
    super();
  }

  set model(m) {
    this._model = m;
    this._applyInitialElements();
    this._render();
    this.dispatch('model-set');
  }

  set session(s) {
    this._session = s;
    this._applyInitialElements();
    this._render();
  }

  connectedCallback() {
    this._render();
  }

  isComplete() {
    return this._session ? (this._session.answer || []).length > 0 : false;
  }

  dispatch(type) {
    this.dispatchEvent(new CustomEvent(type, {
      bubbles: true,
      detail: {
        complete: this.isComplete()
      }
    }));
  }

  dispatchSessionChanged() {
    this.dispatch('session-changed');
  }

  addElement(data) {
    if (!this._session) {
      return;
    }

    this._session.answer = this._session.answer || [];
    this._session.answer.push((0, _dataConverter.toSessionFormat)(data));
    this.dispatchSessionChanged();
    this._render();
  }

  moveElement(index, el, position) {
    let answer = this._session.answer[index];

    if (!answer) {
      throw new Error('cant find element at index: ', index);
    }

    if (el.type === 'line' && position.left === position.right) {
      this._render();
      return;
    }

    //set the new position
    el.position = position;

    let update = el.type === 'line' && (0, _dataConverter.lineIsSwitched)(el) ? (0, _dataConverter.switchGraphLine)(el) : el;

    this._session.answer.splice(index, 1, (0, _dataConverter.toSessionFormat)(update));

    this.dispatchSessionChanged();
    this._render();
  }

  deleteElements(indices) {
    this._session.answer = this._session.answer.filter((v, index) => {
      return !indices.some(d => d === index);
    });
    this.dispatchSessionChanged();
    this._render();
  }

  _applyInitialElements() {
    if (this._model && this._model.config && this._model.config.initialElements && this._session && !this._session.answer) {
      this._session.answer = (0, _cloneDeep2.default)(this._model.config.initialElements);
    }
  }

  _render() {
    try {
      if (this._model && this._session) {
        let answer = (this._session.answer || []).map(_dataConverter.toGraphFormat);
        let model = (0, _cloneDeep2.default)(this._model);
        model.correctResponse = model.correctResponse && model.correctResponse.map(_dataConverter.toGraphFormat);

        let props = {
          model,
          answer,
          onAddElement: this.addElement.bind(this),
          onMoveElement: this.moveElement.bind(this),
          onDeleteElements: this.deleteElements.bind(this)
        };

        let el = _react2.default.createElement(_numberLine2.default, props);
        _reactDom2.default.render(el, this);
      }
    } catch (e) {
      throw e;
    }
  }
}
exports.default = NumberLine;