'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberLineGraph = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d3Scale = require('d3-scale');

var _d3Selection = require('d3-selection');

var _point = require('./elements/point');

var _point2 = _interopRequireDefault(_point);

var _line = require('./elements/line');

var _line2 = _interopRequireDefault(_line);

var _ray = require('./elements/ray');

var _ray2 = _interopRequireDefault(_ray);

var _line3 = require('./line');

var _line4 = _interopRequireDefault(_line3);

var _arrow = require('./arrow');

var _arrow2 = _interopRequireDefault(_arrow);

var _ticks = require('./ticks');

var _ticks2 = _interopRequireDefault(_ticks);

var _tickUtils = require('./tick-utils');

var _stacks = require('./stacks');

var _stacks2 = _interopRequireDefault(_stacks);

var _reactTransitionGroup = require('react-transition-group');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _transitions = require('../transitions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getXScale = (min, max, width, padding) => {
  if (min === undefined || max === undefined || width === undefined) {
    throw new Error('missing min/max/width');
  }

  return (0, _d3Scale.scaleLinear)().domain([min, max]).range([padding, width - padding]);
};

class NumberLineGraph extends _react2.default.Component {

  constructor(props) {
    super(props);
    this.state = {};
  }

  xScaleFn() {
    var _props = this.props;
    const domain = _props.domain,
          width = _props.width;

    return getXScale(domain.min, domain.max, width, 20);
  }

  snapValueFn() {
    var _props2 = this.props;
    const domain = _props2.domain,
          interval = _props2.interval;

    return _tickUtils.snapTo.bind(null, domain.min, domain.max, interval);
  }

  getChildContext() {
    return {
      xScale: this.xScaleFn(),
      snapValue: this.snapValueFn()
    };
  }

  /**
   * Note: we use d3 click + mouse to give us domain values directly.
   * Saves us having to calculate them ourselves from a MouseEvent.
   */
  onRectClick(rect) {
    var _props3 = this.props;
    const elements = _props3.elements,
          disabled = _props3.disabled;


    if (disabled) {
      return;
    }

    const anyElementSelected = elements.some(e => e.selected);

    if (anyElementSelected) {
      this.props.onDeselectElements();
    } else {
      var coords = (0, _d3Selection.mouse)(rect._groups[0][0]);
      const x = this.xScaleFn().invert(coords[0]);
      this.addElement(x);
    }
  }

  componentDidMount() {
    const rect = (0, _d3Selection.select)(this.rect);
    rect.on('click', this.onRectClick.bind(this, rect));
  }

  addElement(x) {
    const snapFn = this.snapValueFn();
    const v = snapFn(x);
    this.props.onAddElement(v);
  }

  render() {
    var _props4 = this.props;
    const domain = _props4.domain,
          width = _props4.width,
          ticks = _props4.ticks,
          height = _props4.height,
          interval = _props4.interval,
          onToggleElement = _props4.onToggleElement,
          onMoveElement = _props4.onMoveElement,
          disabled = _props4.disabled;
    const min = domain.min,
          max = domain.max;


    if (domain.max <= domain.min) {
      return _react2.default.createElement(
        'div',
        null,
        domain.max,
        ' is less than or equal to ',
        domain.min
      );
    } else {
      const lineY = height - 30;

      const stacks = new _stacks2.default(domain);

      const elements = this.props.elements.map((el, index) => {
        const stackIndex = stacks.add(el);

        if (stackIndex === -1) {
          throw new Error('stack index is -1, cant add element');
        }

        const y = lineY - stackIndex * 25;

        const commonProps = {
          key: index,
          y,
          selected: el.selected && !disabled,
          interval,
          disabled,
          correct: el.correct
        };

        const toggleElement = onToggleElement.bind(null, index, el);
        const moveElement = onMoveElement.bind(null, index, el);

        if (el.type === 'line') {
          const empty = {
            left: el.leftPoint === 'empty',
            right: el.rightPoint === 'empty'
          };

          return _react2.default.createElement(_line2.default, _extends({}, commonProps, {
            domain: { min: min, max: max },
            onMoveLine: moveElement,
            onToggleSelect: toggleElement,
            position: el.position,
            empty: empty
          }));
        } else if (el.type === 'point') {
          const bounds = {
            left: min - el.position,
            right: max - el.position
          };

          return _react2.default.createElement(_point2.default, _extends({}, commonProps, {
            empty: el.pointType === 'empty',
            position: el.position,
            bounds: bounds,
            onClick: toggleElement,
            onMove: moveElement
          }));
        } else if (el.type === 'ray') {
          return _react2.default.createElement(_ray2.default, _extends({}, commonProps, {
            domain: { min: min, max: max },
            direction: el.direction,
            position: el.position,
            onMove: moveElement,
            onToggleSelect: toggleElement,
            width: width,
            empty: el.pointType === 'empty'
          }));
        }
      });

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'svg',
          { width: width, height: height },
          _react2.default.createElement(_line4.default, { y: lineY, width: width }),
          _react2.default.createElement(_arrow2.default, { y: lineY }),
          _react2.default.createElement(_arrow2.default, { x: width, y: lineY, direction: 'right' }),
          _react2.default.createElement(_ticks2.default, {
            y: lineY,
            domain: domain,
            ticks: ticks,
            interval: interval
          }),
          _react2.default.createElement('rect', {
            ref: rect => this.rect = rect
            //need to have a fill for it to be clickable
            , fill: 'red',
            fillOpacity: '0.0',
            width: width,
            height: height
          }),
          _react2.default.createElement(
            _reactTransitionGroup.TransitionGroup,
            { component: 'g' },
            elements.map((c, index) => _react2.default.createElement(
              _transitions.Fade,
              { key: index },
              c
            ))
          )
        )
      );
    }
  }
}

exports.NumberLineGraph = NumberLineGraph;
NumberLineGraph.childContextTypes = {
  xScale: _propTypes2.default.func.isRequired,
  snapValue: _propTypes2.default.func.isRequired
};
NumberLineGraph.propTypes = {
  domain: _propTypes2.default.shape({
    min: _propTypes2.default.number.isRequired,
    max: _propTypes2.default.number.isRequired
  }).isRequired,
  ticks: _ticks.TickValidator,
  interval: _propTypes2.default.number.isRequired,
  width: _propTypes2.default.number.isRequired,
  height: _propTypes2.default.number.isRequired,
  onToggleElement: _propTypes2.default.func.isRequired,
  onMoveElement: _propTypes2.default.func.isRequired,
  onAddElement: _propTypes2.default.func.isRequired,
  debug: _propTypes2.default.bool,
  elements: _propTypes2.default.array,
  disabled: _propTypes2.default.bool,
  onDeselectElements: _propTypes2.default.func
};
NumberLineGraph.defaultProps = {
  debug: false
};
exports.default = NumberLineGraph;