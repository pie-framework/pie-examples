'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Point = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _draggable = require('../../../draggable');

var _draggable2 = _interopRequireDefault(_draggable);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const duration = '150ms';

const style = {
  point: {
    cursor: 'pointer',
    transition: `r ${duration} linear,  
    opacity ${duration} linear, 
    fill ${duration} linear,
    stroke ${duration} linear`,

    stroke: 'var(--point-stroke, black)',
    fill: 'var(--point-stroke, black)',
    '&.react-draggable-dragging': {
      opacity: 0.25,
      r: '10px'
    }
  },
  selected: {
    stroke: '#aaaaff'
  },
  correct: {
    cursor: 'inherit',
    stroke: 'green',
    fill: 'green'
  },
  incorrect: {
    cursor: 'inherit',
    stroke: 'orange',
    fill: 'orange'
  },
  empty: {
    fill: 'var(--point-fill, white)'
  }
};

class Point extends _react2.default.Component {

  render() {
    var _props = this.props;
    const onDragStop = _props.onDragStop,
          onDragStart = _props.onDragStart,
          onDragCallback = _props.onDrag,
          onClick = _props.onClick,
          onMove = _props.onMove,
          interval = _props.interval,
          y = _props.y,
          bounds = _props.bounds,
          selected = _props.selected,
          position = _props.position,
          disabled = _props.disabled,
          correct = _props.correct,
          empty = _props.empty,
          classes = _props.classes;
    var _context = this.context;
    const snapValue = _context.snapValue,
          xScale = _context.xScale;


    const dragPosition = x => {
      const normalized = x + xScale(0);
      const inverted = xScale.invert(normalized);
      return snapValue(position + inverted);
    };

    const onStart = e => {
      this.setState({ startX: e.clientX });
      if (onDragStart) {
        onDragStart();
      }
    };

    const onStop = (e, dd) => {
      if (onDragStop) {
        onDragStop();
      }

      const endX = e.clientX;
      const startX = this.state.startX;
      const deltaX = Math.abs(endX - startX);

      if (deltaX < is / 10) {
        if (onClick) {
          onClick();
          this.setState({ startX: null });
        }
      } else {
        const newPosition = dragPosition(dd.lastX);
        onMove(newPosition);
      }
    };

    //prevent the text select icon from rendering.
    const onMouseDown = e => e.nativeEvent.preventDefault();

    const is = xScale(interval) - xScale(0);
    const scaledBounds = {
      left: bounds.left / interval * is,
      right: bounds.right / interval * is
    };

    const onDrag = (e, dd) => {
      const p = dragPosition(dd.x);
      if (onDragCallback) {
        onDragCallback(p);
      }
    };

    const circleClass = (0, _classnames2.default)(classes.point, {
      [classes.selected]: selected,
      [classes.correct]: correct === true,
      [classes.incorrect]: correct === false,
      [classes.empty]: empty === true
    });

    return _react2.default.createElement(
      _draggable2.default,
      {
        disabled: disabled,
        onMouseDown: onMouseDown,
        onStart: onStart,
        onDrag: onDrag,
        onStop: onStop,
        axis: 'x',
        grid: [is],
        bounds: scaledBounds
      },
      _react2.default.createElement('circle', {
        r: '5',
        strokeWidth: '3',
        className: circleClass,
        cx: xScale(position),
        cy: y
      })
    );
  }
}

exports.Point = Point;
Point.defaultProps = {
  y: 0,
  selected: false,
  empty: false,
  disabled: false,
  correct: undefined
};
Point.propTypes = {
  interval: _propTypes2.default.number.isRequired,
  position: _propTypes2.default.number.isRequired,
  bounds: _propTypes2.default.shape({
    left: _propTypes2.default.number.isRequired,
    right: _propTypes2.default.number.isRequired
  }),
  selected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  correct: _propTypes2.default.bool,
  empty: _propTypes2.default.bool,
  y: _propTypes2.default.number,
  onMove: _propTypes2.default.func.isRequired,
  onClick: _propTypes2.default.func,
  onDrag: _propTypes2.default.func,
  onDragStop: _propTypes2.default.func,
  onDragStart: _propTypes2.default.func,
  classes: _propTypes2.default.object.isRequired
};
Point.contextTypes = {
  xScale: _propTypes2.default.func.isRequired,
  snapValue: _propTypes2.default.func.isRequired
};
exports.default = (0, _reactJss2.default)(style)(Point);