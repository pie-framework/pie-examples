'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberLine = exports.Graph = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _feedback = require('./feedback');

var _feedback2 = _interopRequireDefault(_feedback);

var _graph = require('./graph');

var _graph2 = _interopRequireDefault(_graph);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _pointChooser = require('./point-chooser');

var _pointChooser2 = _interopRequireDefault(_pointChooser);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _correctAnswerToggle = require('@pie-lib/correct-answer-toggle');

var _correctAnswerToggle2 = _interopRequireDefault(_correctAnswerToggle);

var _builder = require('./graph/elements/builder');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _tickUtils = require('./graph/tick-utils');

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Graph = _graph2.default;


const styles = {
  numberLine: {
    padding: '10px'
  },
  black_on_rose: {
    backgroundColor: 'mistyrose'
  },
  white_on_black: {
    backgroundColor: 'black',
    '--correct-answer-toggle-label-color': 'white',
    '--tick-color': 'white',
    '--line-stroke': 'white',
    '--arrow-color': 'white',
    '--point-stroke': 'white',
    '--point-fill': 'black'
  }
};

class NumberLine extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    let initialType = props.model.config ? props.model.config.initialType : null;
    initialType = initialType ? initialType.toLowerCase() : _pointChooser2.default.DEFAULT_TYPE;

    this.state = {
      selectedElements: [],
      elementType: initialType
    };
  }

  toggleElement(index) {
    let selected = [];
    if (this.state.selectedElements.indexOf(index) === -1) {
      selected = this.state.selectedElements.concat([index]);
    } else {
      selected = this.state.selectedElements.filter(e => e !== index);
    }
    this.setState({ selectedElements: selected });
  }

  elementTypeSelected(t) {
    this.setState({ elementType: t });
  }

  getDomain() {
    let config = this.props.model.config;
    let domain = config.domain;

    if (domain.length !== 2) {
      throw new Error('Invalid domain array must have 2 values');
    } else {
      var _domain = _slicedToArray(domain, 2);

      const min = _domain[0],
            max = _domain[1];

      return { min, max };
    }
  }

  getTicks() {
    let config = this.props.model.config;
    return {
      major: config.tickFrequency || 2,
      minor: config.showMinorTicks ? config.snapPerTick || 0 : 0
    };
  }

  addElement(x) {
    if (this.hasMaxNoOfPoints()) {
      this.setState({ showMaxPointsWarning: true });
      setTimeout(() => {
        this.setState({ showMaxPointsWarning: false });
      }, 2000);
      return;
    }

    let domain = this.getDomain();
    let interval = (0, _tickUtils.getInterval)(domain, this.getTicks());
    let elementData = (0, _builder.buildElementModel)(x, this.state.elementType, domain, interval);

    if (elementData) {
      this.props.onAddElement(elementData);
    }
  }

  hasMaxNoOfPoints() {
    var _props = this.props;
    let answer = _props.answer,
        maxNumberOfPoints = _props.model.config.maxNumberOfPoints;


    return (0, _isNumber2.default)(maxNumberOfPoints) && maxNumberOfPoints > 0 && (answer || []).length >= maxNumberOfPoints;
  }

  componentWillReceiveProps() {
    this.setState({ showCorrectAnswer: false });
  }

  deselectElements() {
    this.setState({ selectedElements: [] });
  }

  getSize(type, min, max, defaultValue) {
    const config = this.props.model.config;


    if (config && config[type]) {
      return Math.max(min, Math.min(max, config[type]));
    } else {
      return defaultValue;
    }
  }

  render() {
    var _props2 = this.props;
    let model = _props2.model,
        answer = _props2.answer,
        classes = _props2.classes;
    let showCorrectAnswer = this.state.showCorrectAnswer;
    var _model$corrected = model.corrected;
    let corrected = _model$corrected === undefined ? { correct: [], incorrect: [] } : _model$corrected,
        disabled = model.disabled;

    let addElement = this.addElement.bind(this);
    let elementsSelected = !disabled && this.state.selectedElements && this.state.selectedElements.length > 0;
    const width = this.getSize('width', 400, 1600, 600);
    const height = this.getSize('height', 300, 800, 400);

    let domain = this.getDomain();
    let ticks = this.getTicks();

    let graphProps = {
      disabled,
      domain,
      ticks,
      interval: (0, _tickUtils.getInterval)(domain, ticks),
      width,
      height
    };

    let getAnswerElements = () => {
      return (answer || []).map((e, index) => {
        let out = (0, _cloneDeep2.default)(e);
        out.selected = this.state.selectedElements.indexOf(index) !== -1;
        out.correct = corrected.correct.includes(index) ? true : corrected.incorrect.includes(index) ? false : undefined;
        return out;
      });
    };

    let getCorrectAnswerElements = () => {
      return (model.correctResponse || []).map(r => {
        r.correct = true;
        return r;
      });
    };

    let elements = showCorrectAnswer ? getCorrectAnswerElements() : getAnswerElements();

    let maxPointsMessage = () => `You can only add ${model.config.maxNumberOfPoints} elements`;

    let deleteElements = () => {
      this.props.onDeleteElements(this.state.selectedElements);
      this.setState({ selectedElements: [] });
    };

    let getIcons = () => {
      if (model.config.availableTypes) {
        return Object.keys(model.config.availableTypes).filter(k => model.config.availableTypes[k]).map(k => k.toLowerCase());
      }
    };

    let onShowCorrectAnswer = show => {
      this.setState({ showCorrectAnswer: show });
    };

    let adjustedWidth = graphProps.width - 20;

    const names = (0, _classnames2.default)(classes.numberLine, classes[model.colorContrast]);

    return _react2.default.createElement(
      'div',
      { className: names, style: { width } },
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: { width: adjustedWidth } },
          _react2.default.createElement(_correctAnswerToggle2.default, {
            show: (0, _isArray2.default)(model.correctResponse) && !model.emptyAnswer,
            toggled: showCorrectAnswer,
            onToggle: onShowCorrectAnswer,
            initialValue: false
          })
        ),
        !disabled && _react2.default.createElement(_pointChooser2.default, {
          elementType: this.state.elementType,
          showDeleteButton: elementsSelected,
          onDeleteClick: deleteElements,
          onElementType: this.elementTypeSelected.bind(this),
          icons: getIcons()
        }),
        _react2.default.createElement(_graph2.default, _extends({}, graphProps, {
          elements: elements,
          onAddElement: addElement,
          onMoveElement: this.props.onMoveElement,
          onToggleElement: this.toggleElement.bind(this),
          onDeselectElements: this.deselectElements.bind(this),
          debug: false
        })),
        this.state.showMaxPointsWarning && _react2.default.createElement(_feedback2.default, {
          type: 'info',
          width: adjustedWidth,
          message: maxPointsMessage()
        }),
        model.feedback && _react2.default.createElement(_feedback2.default, _extends({}, model.feedback, { width: adjustedWidth }))
      )
    );
  }
}

exports.NumberLine = NumberLine;
NumberLine.propTypes = {
  onMoveElement: _propTypes2.default.func.isRequired,
  onDeleteElements: _propTypes2.default.func.isRequired,
  onAddElement: _propTypes2.default.func.isRequired,
  model: _propTypes2.default.object.isRequired,
  answer: _propTypes2.default.array,
  classes: _propTypes2.default.object.isRequired
};
exports.default = (0, _reactJss2.default)(styles)(NumberLine);