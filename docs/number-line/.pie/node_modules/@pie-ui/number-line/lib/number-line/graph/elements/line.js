'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Line = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _draggable = require('../../../draggable');

var _draggable2 = _interopRequireDefault(_draggable);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _base = require('./base');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const duration = '150ms';

const style = {
  line: {
    '& .line-handle': {
      stroke: 'var(--line-stroke, black)',
      cursor: 'pointer',
      strokeWidth: '5px',
      transition: `opacity ${duration} linear, 
      stroke-width ${duration} linear,
      stroke ${duration} linear`
    },
    '&.react-draggable-dragging': {
      opacity: 0.6,
      '& .line-handle': {
        opacity: 1.0,
        strokeWidth: '12px'
      }
    }
  },
  selected: {
    '& .line-handle': {
      stroke: '#aaaaff'
    },
    '& circle': {
      stroke: '#aaaaff'
    }
  },
  correct: {
    '& .line-handle': {
      cursor: 'inherit',
      stroke: 'green'
    }
  },
  incorrect: {
    '& .line-handle': {
      cursor: 'inherit',
      stroke: 'orange'
    }
  }
};

class Line extends _react2.default.Component {

  constructor(props) {
    super(props);
    this.state = {
      left: null,
      right: null
    };
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps) {
      const position = nextProps.position;

      this.setState({ left: position.left, right: position.right });
    }
  }

  onDrag(side, p) {
    const domain = this.props.domain;

    if (p >= domain.min && p <= domain.max) {
      const newState = {};
      newState[side] = p;
      this.setState(newState);
    }
  }

  onMove(side, d) {
    const p = this.props.position;

    const newPosition = { left: p.left, right: p.right };
    newPosition[side] = d;
    this.props.onMoveLine(newPosition);
  }

  render() {
    var _props = this.props;
    const interval = _props.interval,
          empty = _props.empty,
          position = _props.position,
          domain = _props.domain,
          y = _props.y,
          selected = _props.selected,
          disabled = _props.disabled,
          correct = _props.correct,
          classes = _props.classes;
    const xScale = this.context.xScale;
    const onDrag = this.onDrag,
          onMove = this.onMove;

    const onMoveLeft = onMove.bind(this, 'left');
    const onMoveRight = onMove.bind(this, 'right');
    const onDragLeft = onDrag.bind(this, 'left');
    const onDragRight = onDrag.bind(this, 'right');

    const left = (0, _isNumber2.default)(this.state.left) ? this.state.left : position.left;
    const right = (0, _isNumber2.default)(this.state.right) ? this.state.right : position.right;

    const is = xScale(interval) - xScale(0);

    const onMouseDown = e => e.nativeEvent.preventDefault();
    const onLineDragStart = e => this.setState({ startX: e.clientX });

    const onLineClick = () => {
      var _state = this.state;
      const startX = _state.startX,
            endX = _state.endX;

      if (!startX || !endX) {
        return;
      }

      const deltaX = Math.abs(endX - startX);
      if (deltaX < is / 10) {
        this.props.onToggleSelect();
        this.setState({ startX: null, endX: null });
      }
    };

    const onRectClick = () => {
      this.props.onToggleSelect();
    };

    const onLineDragStop = (e, dd) => {
      this.setState({ endX: e.clientX });
      const invertedX = xScale.invert(dd.lastX + xScale(0));
      const newPosition = {
        left: position.left + invertedX,
        right: position.right + invertedX
      };

      if (!(0, _isEqual2.default)(newPosition, this.props.position)) {
        this.props.onMoveLine(newPosition);
      }
    };

    const scaledLineBounds = {
      left: (domain.min - position.left) / interval * is,
      right: (domain.max - position.right) / interval * is
    };

    var lineClass = (0, _classnames2.default)(classes.line, {
      [classes.selected]: selected,
      [classes.correct]: correct === true,
      [classes.incorrect]: correct === false
    });

    const common = {
      interval,
      selected,
      disabled,
      correct
    };

    return _react2.default.createElement(
      _draggable2.default,
      {
        disabled: disabled,
        axis: 'x',
        handle: '.line-handle',
        grid: [is],
        bounds: scaledLineBounds,
        onStart: onLineDragStart,
        onStop: onLineDragStop,
        onMouseDown: onMouseDown
      },
      _react2.default.createElement(
        'g',
        { className: lineClass },
        _react2.default.createElement(
          'g',
          { transform: `translate(0, ${y})` },
          _react2.default.createElement('rect', {
            x: xScale(left),
            width: Math.abs(xScale(right) - xScale(left)),
            fill: 'red',
            fillOpacity: '0.0',
            y: '-8',
            height: 16,
            onClick: onRectClick
          }),
          _react2.default.createElement('line', {
            className: (0, _classnames2.default)('line-handle', classes.handle, {
              [classes.selected]: selected
            }),
            x1: xScale(left),
            x2: xScale(right),
            onClick: onLineClick
          }),
          _react2.default.createElement(_point2.default, _extends({}, common, {
            empty: empty.left,
            bounds: {
              left: domain.min - position.left,
              right: domain.max - position.left
            },
            position: position.left,
            onDrag: onDragLeft,
            onMove: onMoveLeft
          })),
          _react2.default.createElement(_point2.default, _extends({}, common, {
            empty: empty.right,
            bounds: {
              left: domain.min - position.right,
              right: domain.max - position.right
            },
            position: position.right,
            onDrag: onDragRight,
            onMove: onMoveRight
          }))
        )
      )
    );
  }
}

exports.Line = Line;
Line.propTypes = _extends({}, (0, _base.basePropTypes)(), {
  empty: _propTypes2.default.shape({
    left: _propTypes2.default.bool.isRequired,
    right: _propTypes2.default.bool.isRequired
  }).isRequired,
  position: _propTypes2.default.shape({
    left: _propTypes2.default.number.isRequired,
    right: _propTypes2.default.number.isRequired
  }).isRequired,
  y: _propTypes2.default.number,
  selected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  correct: _propTypes2.default.bool,
  onMoveLine: _propTypes2.default.func.isRequired,
  onToggleSelect: _propTypes2.default.func.isRequired,
  onDragStart: _propTypes2.default.func,
  onDragStop: _propTypes2.default.func
});
Line.defaultProps = {
  selected: false,
  y: 0,
  disabled: false,
  correct: undefined
};
Line.contextTypes = {
  xScale: _propTypes2.default.func.isRequired,
  snapValue: _propTypes2.default.func.isRequired
};
exports.default = (0, _reactJss2.default)(style)(Line);