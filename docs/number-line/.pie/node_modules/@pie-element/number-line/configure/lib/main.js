'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Card = require('@material-ui/core/Card');

var _Card2 = _interopRequireDefault(_Card);

var _CardContent = require('@material-ui/core/CardContent');

var _CardContent2 = _interopRequireDefault(_CardContent);

var _configUi = require('@pie-lib/config-ui');

var _numberTextField = require('./number-text-field');

var _numberTextField2 = _interopRequireDefault(_numberTextField);

var _numberLine = require('@pie-ui/number-line');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _domain = require('./domain');

var _domain2 = _interopRequireDefault(_domain);

var _pointConfig = require('./point-config');

var _pointConfig2 = _interopRequireDefault(_pointConfig);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const lineIsSwitched = _numberLine.dataConverter.lineIsSwitched,
      switchGraphLine = _numberLine.dataConverter.switchGraphLine,
      toGraphFormat = _numberLine.dataConverter.toGraphFormat,
      toSessionFormat = _numberLine.dataConverter.toSessionFormat;


const styles = {
  row: {
    display: 'flex'
  },
  hide: {
    opacity: 0.5
  },
  resetDefaults: {
    margin: '20px 0'
  },
  pointTypeChooser: {
    margin: '20px 0'
  }
};

const defaultConfig = {
  domain: [0, 5],
  width: 500,
  height: 40,
  tickFrequency: 6,
  showMinorTicks: true,
  snapPerTick: 1,
  tickLabelOverrides: [],
  initialType: 'PF',
  exhibitOnly: false,
  availableTypes: {
    PF: true,
    PE: true,
    LFF: true,
    LEF: true,
    LFE: true,
    LEE: true,
    RFN: true,
    RFP: true,
    REN: true,
    REP: true
  },
  initialElements: []
};

class Main extends _react2.default.Component {

  constructor(props) {
    super(props);
    this.setDefaults = this.setDefaults.bind(this);
    this.moveCorrectResponse = this.moveCorrectResponse.bind(this);
    this.deleteCorrectResponse = this.deleteCorrectResponse.bind(this);
    this.addCorrectResponse = this.addCorrectResponse.bind(this);
    this.availableTypesChange = this.availableTypesChange.bind(this);

    this.moveInitialView = this.moveInitialView.bind(this);
    this.addInitialView = this.addInitialView.bind(this);
    this.deleteInitialView = this.deleteInitialView.bind(this);
    this.exhibitChanged = this.exhibitChanged.bind(this);
  }

  getDomain() {
    let config = this.props.model.config;
    let domainArray = config.domain;
    return {
      min: domainArray[0],
      max: domainArray[1]
    };
  }

  setDefaults() {
    this.props.model.config = _.cloneDeep(defaultConfig);
    this.props.onConfigChange(this.props.model.config);
  }

  getTicks() {
    let config = this.props.model.config;
    return {
      major: config.tickFrequency || 2,
      minor: config.showMinorTicks ? config.snapPerTick || 0 : 0
    };
  }

  exhibitChanged(event, value) {
    this.props.model.config.exhibitOnly = value;
    this.props.onConfigChange(this.props.model.config);
  }

  moveCorrectResponse(index, el, position) {
    el.position = position;
    let update = toSessionFormat(el.type === 'line' && lineIsSwitched(el) ? switchGraphLine(el) : el);
    this.props.model.correctResponse[index] = update;
    this.props.onCorrectResponseChange(this.props.model.correctResponse);
  }

  moveInitialView(index, el, position) {
    el.position = position;
    let update = toSessionFormat(el.type === 'line' && lineIsSwitched(el) ? switchGraphLine(el) : el);
    this.props.model.config.initialElements[index] = update;
    this.props.onInitialElementsChange(this.props.model.config.initialElements);
  }

  availableTypesChange(availableTypes) {
    let toPointType = response => {
      function rest(response) {
        if (response.pointType) {
          if (response.direction) {
            return `${response.pointType[0]}${response.direction[0]}`;
          }
          return response.pointType[0];
        } else {
          return `${response.leftPoint[0]}${response.rightPoint[0]}`;
        }
      }
      return `${response.type[0]}${rest(response)}`.toUpperCase();
    };
    new Set(this.props.model.correctResponse.map(toPointType)).forEach(pointType => {
      availableTypes[pointType] = true;
    });
    this.props.onAvailableTypesChange(availableTypes);
  }

  deleteCorrectResponse(indices) {
    this.props.model.correctResponse = this.props.model.correctResponse.filter((v, index) => {
      return !indices.some(d => d === index);
    });
    this.props.onCorrectResponseChange(this.props.model.correctResponse);
  }

  deleteInitialView(indices) {
    this.props.model.config.initialElements = this.props.model.config.initialElements.filter((v, index) => {
      return !indices.some(d => d === index);
    });
    this.props.onInitialElementsChange(this.props.model.config.initialElements);
  }

  addCorrectResponse(data) {
    this.props.model.correctResponse.push(toSessionFormat(data));
    this.props.onCorrectResponseChange(this.props.model.correctResponse);
  }

  addInitialView(data) {
    this.props.model.config.initialElements.push(toSessionFormat(data));
    this.props.onCorrectResponseChange(this.props.model.config.initialElements);
  }

  render() {
    var _props = this.props;
    const classes = _props.classes,
          onDomainChange = _props.onDomainChange,
          model = _props.model;
    const config = model.config;

    const numberFieldStyle = {
      width: '50px',
      margin: '0 10px'
    };

    let noOp = () => {};

    let correctResponse = (0, _cloneDeep2.default)(model.correctResponse).map(toGraphFormat);
    let initialView = (0, _cloneDeep2.default)(config.initialElements).map(toGraphFormat);

    return _react2.default.createElement(
      'div',
      { className: classes.root },
      _react2.default.createElement(
        'p',
        null,
        'In this interaction, students plot points, line segments or rays on a number line.'
      ),
      _react2.default.createElement(
        _Card2.default,
        null,
        _react2.default.createElement(
          _CardContent2.default,
          null,
          _react2.default.createElement(
            _Typography2.default,
            { type: 'headline' },
            'Number Line Attributes'
          ),
          _react2.default.createElement(
            'p',
            null,
            'Set up the number line by entering the domain and number of tick marks to display. Labels on the number line can be edited or removed by clicking on the label.'
          ),
          _react2.default.createElement(_numberLine.Graph, {
            elements: [],
            domain: this.getDomain(),
            ticks: this.getTicks(),
            interval: _numberLine.tickUtils.getInterval(this.getDomain(), this.getTicks()),
            width: defaultConfig.width,
            height: defaultConfig.height,
            onAddElement: noOp,
            onMoveElement: noOp,
            onToggleElement: noOp,
            onDeselectElements: noOp
          }),
          _react2.default.createElement(_domain2.default, { domain: config.domain, onChange: onDomainChange }),
          _react2.default.createElement(
            'div',
            null,
            'Number of Ticks:',
            _react2.default.createElement(_numberTextField2.default, {
              value: config.tickFrequency,
              name: 'numberOfTicks',
              min: 2,
              style: numberFieldStyle,
              onChange: this.props.onTickFrequencyChange.bind(this)
            })
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'div',
              { className: classes.row },
              _react2.default.createElement(
                'div',
                {
                  className: (0, _classnames2.default)(classes.minorTicks, {
                    [classes.hide]: !config.showMinorTicks
                  })
                },
                'Minor Tick Frequency:',
                _react2.default.createElement(_numberTextField2.default, {
                  name: 'snapPerTick',
                  style: numberFieldStyle,
                  value: config.snapPerTick,
                  max: 12,
                  onChange: this.props.onSnapPerTickChange.bind(this)
                })
              ),
              _react2.default.createElement(_configUi.Checkbox, {
                checked: config.showMinorTicks,
                label: 'Show',
                onChange: this.props.onMinorTicksChanged.bind(this),
                value: 'showMinorTicks'
              })
            )
          ),
          _react2.default.createElement(
            _Button2.default,
            { variant: 'raised', color: 'primary', onClick: this.setDefaults },
            'Reset to default values'
          )
        )
      ),
      _react2.default.createElement('br', null),
      !config.exhibitOnly && _react2.default.createElement(
        _Card2.default,
        null,
        _react2.default.createElement(
          _CardContent2.default,
          null,
          _react2.default.createElement(
            _Typography2.default,
            { type: 'headline' },
            'Correct Response'
          ),
          _react2.default.createElement(
            'p',
            null,
            'Select answer type and place it on the number line. Intersecting points, line segments and/or rays will appear above the number line.',
            ' ',
            _react2.default.createElement(
              'i',
              null,
              'Note: A maximum of 20 points, line segments or rays may be plotted.'
            )
          ),
          _react2.default.createElement(_numberLine.NumberLineComponent, {
            onMoveElement: this.moveCorrectResponse,
            onDeleteElements: this.deleteCorrectResponse,
            onAddElement: this.addCorrectResponse,
            answer: correctResponse
            //strip feedback for this model
            , model: _extends({}, model, {
              feedback: undefined,
              correctResponse: undefined
            })
          }),
          _react2.default.createElement('hr', null),
          _react2.default.createElement(
            _Typography2.default,
            { type: 'headline' },
            'Available Types'
          ),
          _react2.default.createElement(
            'p',
            null,
            'Click on the input options to be displayed to the students. All inputs will display by default.'
          ),
          _react2.default.createElement(
            'div',
            { className: classes.pointTypeChooser },
            _react2.default.createElement(_pointConfig2.default, {
              onSelectionChange: this.availableTypesChange,
              selection: config.availableTypes
            })
          )
        )
      ),
      _react2.default.createElement('br', null),
      _react2.default.createElement(
        _Card2.default,
        null,
        _react2.default.createElement(
          _CardContent2.default,
          null,
          _react2.default.createElement(
            _Typography2.default,
            { type: 'headline' },
            'Initial view/Make Exhibit'
          ),
          _react2.default.createElement(
            'p',
            null,
            'Use this number line to set a starting point, line segment or ray. This is optional.'
          ),
          _react2.default.createElement(
            'p',
            null,
            'This number line may also be used to make an exhibit number line, which can not be manipulated by a student.'
          ),
          _react2.default.createElement(_numberLine.NumberLineComponent, {
            onMoveElement: this.moveInitialView,
            onDeleteElements: this.deleteInitialView,
            onAddElement: this.addInitialView,
            answer: initialView,
            model: _extends({}, model, {
              feedback: undefined,
              correctResponse: undefined
            })
          }),
          _react2.default.createElement(_configUi.Checkbox, {
            label: 'Make exhibit',
            checked: config.exhibitOnly,
            onChange: this.exhibitChanged,
            value: 'exhibitOnly'
          })
        )
      ),
      !config.exhibitOnly && _react2.default.createElement(
        _react2.default.Fragment,
        null,
        _react2.default.createElement('br', null),
        _react2.default.createElement(_configUi.FeedbackConfig, {
          feedback: model.feedback,
          onChange: this.props.onFeedbackChange.bind(this)
        })
      )
    );
  }
}

Main.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  model: _propTypes2.default.object.isRequired,
  onConfigChange: _propTypes2.default.func.isRequired,
  onCorrectResponseChange: _propTypes2.default.func.isRequired,
  onInitialElementsChange: _propTypes2.default.func.isRequired,
  onAvailableTypesChange: _propTypes2.default.func.isRequired,
  onDomainChange: _propTypes2.default.func.isRequired,
  onFeedbackChange: _propTypes2.default.func.isRequired,
  onSnapPerTickChange: _propTypes2.default.func.isRequired,
  onMinorTicksChanged: _propTypes2.default.func.isRequired,
  onTickFrequencyChange: _propTypes2.default.func.isRequired
};
exports.default = (0, _styles.withStyles)(styles, { name: 'Main' })(Main);