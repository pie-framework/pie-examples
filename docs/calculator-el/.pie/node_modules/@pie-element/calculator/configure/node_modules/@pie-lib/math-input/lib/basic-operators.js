'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasicOperatorsPad = exports.defaults = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _styles2 = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  root: {
    display: 'grid',
    gridRowGap: '0px',
    gridColumnGap: '0px'
  }
};

var defaults = exports.defaults = [{ label: '&divide;', value: '\\div' }, { label: '*', value: '\\times' }, '-', '+'];

var baseStyles = (0, _merge2.default)((0, _styles.buttonStyle)(), {
  root: {
    backgroundColor: 'orange',
    height: '100%'
  }
});

var BasicOperatorsPadButton = (0, _styles2.withStyles)(baseStyles, {
  name: 'BasicOperators'
})(function (props) {
  var label = props.children.toString();

  return _react2.default.createElement(
    _IconButton2.default,
    {
      tabIndex: '-1',
      onClick: function onClick() {
        return props.onClick(props.value);
      },
      classes: props.classes
    },
    _react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: label } })
  );
});

var BasicOperatorsPad = exports.BasicOperatorsPad = function (_React$Component) {
  _inherits(BasicOperatorsPad, _React$Component);

  function BasicOperatorsPad(props) {
    _classCallCheck(this, BasicOperatorsPad);

    var _this = _possibleConstructorReturn(this, (BasicOperatorsPad.__proto__ || Object.getPrototypeOf(BasicOperatorsPad)).call(this, props));

    _this.onClick = function (value) {
      _this.props.onClick(value);
    };
    return _this;
  }

  _createClass(BasicOperatorsPad, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          classes = _props.classes,
          values = _props.values;

      return _react2.default.createElement(
        'div',
        { className: classes.root },
        values.map(function (v) {
          var label = v.label || v;
          var value = v.value || v;
          return _react2.default.createElement(
            BasicOperatorsPadButton,
            {
              key: label,
              onClick: _this2.onClick,
              value: value
            },
            label
          );
        })
      );
    }
  }]);

  return BasicOperatorsPad;
}(_react2.default.Component);

BasicOperatorsPad.propTypes = {
  onClick: _propTypes2.default.object.isRequired,
  values: _propTypes2.default.array,
  classes: _propTypes2.default.isRequired
};
BasicOperatorsPad.defaultProps = {
  values: defaults
};


var StyledBasicOperatorsPad = (0, _styles2.withStyles)(styles, {
  name: 'BasicOperatorsPad'
})(BasicOperatorsPad);
exports.default = StyledBasicOperatorsPad;