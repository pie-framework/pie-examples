'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slate = require('slate');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var log = (0, _debug2.default)('@pie-lib:editable-html:image:insert-image-handler');

/**
 * Handles user selection, insertion (or cancellation) of an image into the editor.
 * @param {Block} placeholderBlock - a block that has been added to the editor as a place holder for the image
 * @param {Function} getValue - a function to return the value of the editor
 * @param {Function} onChange - callback to notify changes applied by the handler
 */

var InsertImageHandler = function () {
  function InsertImageHandler(placeholderBlock, getValue, onChange) {
    _classCallCheck(this, InsertImageHandler);

    this.placeholderBlock = placeholderBlock;
    this.getValue = getValue;
    this.onChange = onChange;
  }

  _createClass(InsertImageHandler, [{
    key: 'getPlaceholderInDocument',
    value: function getPlaceholderInDocument(value) {
      var document = value.document;

      var directChild = document.getChild(this.placeholderBlock.key);

      if (directChild) {
        return directChild;
      }

      var child = document.getDescendant(this.placeholderBlock.key);

      if (child) {
        return child;
      } else {
        //eslint-disable-next-line
        throw new Error("insert-image: Can't find placeholder!");
      }
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      log('insert cancelled');
      var c = this.getValue().change().removeNodeByKey(this.placeholderBlock.key);
      this.onChange(c);
    }
  }, {
    key: 'done',
    value: function done(err, src) {
      log('done: err:', err);
      if (err) {
        //eslint-disable-next-line
        console.log(err);
      } else {
        var value = this.getValue();
        var child = this.getPlaceholderInDocument(value);
        var data = child.data.merge(_slate.Data.create({ loaded: true, src: src, percent: 100 }));

        var change = value.change().setNodeByKey(this.placeholderBlock.key, { data: data });
        this.onChange(change);
      }
    }

    /**
     * Notify handler that the user chose a file - will create a change with a preview in the editor.
     *
     * @param {File} file - the file that the user chose using a file input.
     */

  }, {
    key: 'fileChosen',
    value: function fileChosen(file) {
      var _this = this;

      if (!file) {
        return;
      }

      log('[fileChosen] file: ', file);
      var reader = new FileReader();
      reader.onload = function () {
        var value = _this.getValue();
        var dataURL = reader.result;
        var child = _this.getPlaceholderInDocument(value);
        var data = child.data.set('src', dataURL);
        var change = value.change().setNodeByKey(_this.placeholderBlock.key, { data: data });
        _this.onChange(change);
      };
      reader.readAsDataURL(file);
    }
  }, {
    key: 'progress',
    value: function progress(percent, bytes, total) {
      log('progress: ', percent, bytes, total);
      var value = this.getValue();
      var child = this.getPlaceholderInDocument(value);
      var data = child.data.set('percent', percent);
      var change = value.change().setNodeByKey(this.placeholderBlock.key, { data: data });
      this.onChange(change);
    }
  }]);

  return InsertImageHandler;
}();

exports.default = InsertImageHandler;