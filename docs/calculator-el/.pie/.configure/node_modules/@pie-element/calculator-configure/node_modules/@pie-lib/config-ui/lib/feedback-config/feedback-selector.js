'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackSelector = exports.FeedbackType = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _editableHtml = require('@pie-lib/editable-html');

var _editableHtml2 = _interopRequireDefault(_editableHtml);

var _inputContainer = require('../input-container');

var _inputContainer2 = _interopRequireDefault(_inputContainer);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('@material-ui/core/styles');

var _group = require('./group');

var _group2 = _interopRequireDefault(_group);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var feedbackLabels = {
  default: 'Simple Feedback',
  none: 'No Feedback',
  custom: 'Customized Feedback'
};

var holder = function holder(theme, extras) {
  return _extends({
    marginTop: '0px',
    background: '#e0dee0',
    padding: theme.spacing.unit * 0.9,
    marginBottom: theme.spacing.unit * 2
  }, extras);
};

var style = function style(theme) {
  return {
    feedbackSelector: {
      marginBottom: theme.spacing.unit
    },
    label: {
      cursor: 'pointer'
    },
    inputContainerLabel: {
      transform: 'translateY(-20%)'
    },
    feedbackInputContainer: {
      paddingBottom: 0
    },
    customHolder: holder(theme, {
      background: '#e0dee0',
      padding: 0
    }),
    defaultHolder: holder(theme, {
      fontFamily: theme.typography.fontFamily,
      cursor: 'default'
    }),
    editor: {
      fontFamily: theme.typography.fontFamily
    },
    group: {
      paddingTop: theme.spacing.unit
    }
  };
};

var FeedbackType = exports.FeedbackType = {
  type: _propTypes2.default.oneOf(['default', 'custom', 'none']),
  default: _propTypes2.default.string,
  custom: _propTypes2.default.string
};

var FeedbackSelector = exports.FeedbackSelector = function (_React$Component) {
  _inherits(FeedbackSelector, _React$Component);

  function FeedbackSelector() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FeedbackSelector);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FeedbackSelector.__proto__ || Object.getPrototypeOf(FeedbackSelector)).call.apply(_ref, [this].concat(args))), _this), _this.changeType = function (type) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          feedback = _this$props.feedback;

      onChange(_extends({}, feedback, { type: type }));
    }, _this.changeCustom = function (custom) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          feedback = _this$props2.feedback;

      onChange(_extends({}, feedback, { type: 'custom', custom: custom }));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FeedbackSelector, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          keys = _props.keys,
          classes = _props.classes,
          label = _props.label,
          feedback = _props.feedback;


      var feedbackKeys = keys || Object.keys(feedbackLabels);

      return _react2.default.createElement(
        'div',
        { className: classes.feedbackSelector },
        _react2.default.createElement(
          _inputContainer2.default,
          {
            label: label,
            className: classes.feedbackInputContainer,
            extraClasses: { label: classes.inputContainerLabel }
          },
          _react2.default.createElement(_group2.default, {
            className: classes.group,
            keys: feedbackKeys,
            label: label,
            value: feedback.type,
            onChange: this.changeType,
            feedbackLabels: feedbackLabels
          })
        ),
        feedback.type === 'custom' && _react2.default.createElement(
          'div',
          { className: classes.customHolder },
          _react2.default.createElement(_editableHtml2.default, {
            className: classes.editor,
            onChange: this.changeCustom,
            markup: feedback.custom || ''
          })
        ),
        feedback.type === 'default' && _react2.default.createElement(
          'div',
          { className: classes.defaultHolder },
          ' ',
          feedback.default
        )
      );
    }
  }]);

  return FeedbackSelector;
}(_react2.default.Component);

FeedbackSelector.propTypes = {
  keys: _propTypes2.default.arrayOf(_propTypes2.default.string),
  classes: _propTypes2.default.object.isRequired,
  label: _propTypes2.default.string.isRequired,
  feedback: _propTypes2.default.shape(FeedbackType).isRequired,
  onChange: _propTypes2.default.func.isRequired
};
exports.default = (0, _styles.withStyles)(style)(FeedbackSelector);