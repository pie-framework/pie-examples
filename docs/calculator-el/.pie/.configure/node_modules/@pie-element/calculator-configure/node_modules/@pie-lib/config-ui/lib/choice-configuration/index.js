'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChoiceConfiguration = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _inputContainer = require('../input-container');

var _inputContainer2 = _interopRequireDefault(_inputContainer);

var _editableHtml = require('@pie-lib/editable-html');

var _editableHtml2 = _interopRequireDefault(_editableHtml);

var _inputs = require('../inputs');

var _feedbackMenu = require('./feedback-menu');

var _feedbackMenu2 = _interopRequireDefault(_feedbackMenu);

var _Delete = require('@material-ui/icons/Delete');

var _Delete2 = _interopRequireDefault(_Delete);

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditableHtmlContainer = (0, _styles.withStyles)(function (theme) {
  return {
    labelContainer: {},
    editorHolder: {
      marginTop: theme.spacing.unit * 2
    }
  };
})(function (_ref) {
  var label = _ref.label,
      classes = _ref.classes,
      onChange = _ref.onChange,
      value = _ref.value,
      className = _ref.className,
      imageSupport = _ref.imageSupport;

  var names = (0, _classnames2.default)(classes.labelContainer, className);
  return _react2.default.createElement(
    _inputContainer2.default,
    { label: label, className: names },
    _react2.default.createElement(
      'div',
      { className: classes.editorHolder },
      _react2.default.createElement(_editableHtml2.default, {
        markup: value || '',
        onChange: onChange,
        imageSupport: imageSupport,
        className: classes.editor
      })
    )
  );
});

var Feedback = (0, _styles.withStyles)(function () {
  return {
    text: {
      width: '100%'
    }
  };
})(function (_ref2) {
  var value = _ref2.value,
      onChange = _ref2.onChange,
      type = _ref2.type,
      correct = _ref2.correct,
      classes = _ref2.classes,
      defaults = _ref2.defaults;

  if (!type || type === 'none') {
    return null;
  } else if (type === 'default') {
    return _react2.default.createElement(_TextField2.default, {
      className: classes.text,
      label: 'Feedback Text',
      value: correct ? defaults.correct : defaults.incorrect
    });
  } else {
    return _react2.default.createElement(EditableHtmlContainer, {
      className: classes.text,
      label: 'Feedback Text',
      value: value,
      onChange: onChange
    });
  }
});

var ChoiceConfiguration = exports.ChoiceConfiguration = function (_React$Component) {
  _inherits(ChoiceConfiguration, _React$Component);

  function ChoiceConfiguration() {
    var _ref3;

    var _temp, _this, _ret;

    _classCallCheck(this, ChoiceConfiguration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref3 = ChoiceConfiguration.__proto__ || Object.getPrototypeOf(ChoiceConfiguration)).call.apply(_ref3, [this].concat(args))), _this), _this._changeFn = function (key) {
      return function (update) {
        var _this$props = _this.props,
            data = _this$props.data,
            onChange = _this$props.onChange;

        if (onChange) {
          onChange(_extends({}, data, _defineProperty({}, key, update)));
        }
      };
    }, _this.onLabelChange = _this._changeFn('label'), _this.onCheckedChange = function (event) {
      var correct = event.target.checked;
      var _this$props2 = _this.props,
          data = _this$props2.data,
          onChange = _this$props2.onChange;


      if (onChange) {
        onChange(_extends({}, data, { correct: correct }));
      }
    }, _this.onFeedbackValueChange = function (v) {
      var _this$props3 = _this.props,
          data = _this$props3.data,
          onChange = _this$props3.onChange;


      if (data.feedback.type !== 'custom') {
        return;
      }

      var fb = _extends({}, data.feedback, { value: v });

      if (onChange) onChange(_extends({}, data, { feedback: fb }));
    }, _this.onFeedbackTypeChange = function (t) {
      var _this$props4 = _this.props,
          data = _this$props4.data,
          onChange = _this$props4.onChange;

      var fb = _extends({}, data.feedback, { type: t });
      if (fb.type !== 'custom') {
        fb.value = undefined;
      }

      if (onChange) onChange(_extends({}, data, { feedback: fb }));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ChoiceConfiguration, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          data = _props.data,
          classes = _props.classes,
          mode = _props.mode,
          onDelete = _props.onDelete,
          defaultFeedback = _props.defaultFeedback,
          index = _props.index,
          className = _props.className,
          imageSupport = _props.imageSupport;


      var InputToggle = mode === 'checkbox' ? _inputs.InputCheckbox : _inputs.InputRadio;
      var names = (0, _classnames2.default)(classes.choiceConfiguration, className);
      return _react2.default.createElement(
        'div',
        { className: names },
        _react2.default.createElement(
          'div',
          { className: classes.topRow },
          index > 0 && _react2.default.createElement(
            _Typography2.default,
            { className: classes.index, type: 'title' },
            index
          ),
          _react2.default.createElement(InputToggle, {
            className: classes.toggle,
            onChange: this.onCheckedChange,
            label: 'Correct',
            checked: !!data.correct
          }),
          _react2.default.createElement(EditableHtmlContainer, {
            label: 'Label',
            value: data.label,
            onChange: this.onLabelChange,
            imageSupport: imageSupport
          }),
          _react2.default.createElement(
            _inputContainer2.default,
            { className: classes.feedback, label: 'Feedback' },
            _react2.default.createElement(_feedbackMenu2.default, {
              onChange: this.onFeedbackTypeChange,
              value: data.feedback,
              classes: {
                icon: classes.feedbackIcon
              }
            })
          ),
          _react2.default.createElement(
            _inputContainer2.default,
            { className: classes.delete, label: 'Delete' },
            _react2.default.createElement(
              _IconButton2.default,
              {
                'aria-label': 'delete',
                className: classes.deleteIcon,
                onClick: onDelete
              },
              _react2.default.createElement(_Delete2.default, null)
            )
          )
        ),
        _react2.default.createElement(Feedback, _extends({}, data.feedback, {
          correct: data.correct,
          defaults: defaultFeedback,
          onChange: this.onFeedbackValueChange
        }))
      );
    }
  }]);

  return ChoiceConfiguration;
}(_react2.default.Component);

ChoiceConfiguration.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  mode: _propTypes2.default.oneOf(['checkbox', 'radio']),
  defaultFeedback: _propTypes2.default.object.isRequired,
  data: _propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    correct: _propTypes2.default.bool,
    feedback: _propTypes2.default.shape({
      type: _propTypes2.default.string,
      value: _propTypes2.default.string
    })
  }),
  onDelete: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  index: _propTypes2.default.number,
  imageSupport: _propTypes2.default.shape({
    add: _propTypes2.default.func.isRequired,
    delete: _propTypes2.default.func.isRequired
  })
};
ChoiceConfiguration.defaultProps = {
  index: -1
};


var styles = function styles(theme) {
  return {
    index: {
      transform: 'translate(-60%, 35%)'
    },
    choiceConfiguration: {},
    topRow: {
      display: 'flex'
    },
    value: {
      flex: '0.5',
      paddingRight: theme.spacing.unit
    },
    editorHolder: {
      marginTop: theme.spacing.unit * 2
    },
    toggle: {
      flex: '0 1 auto'
    },
    feedback: {
      flex: '0 1 auto',
      paddingTop: theme.spacing.unit,
      paddingLeft: 0,
      marginLeft: 0,
      paddingRight: theme.spacing.unit * 3
    },
    feedbackIcon: {
      margin: 0,
      padding: 0,
      width: 'inherit'
    },
    deleteIcon: {
      margin: 0,
      padding: 0,
      width: 'inherit'
    },
    delete: {
      flex: '0 1 auto',
      paddingTop: theme.spacing.unit,
      paddingLeft: 0,
      marginLeft: 0
    }
  };
};

exports.default = (0, _styles.withStyles)(styles)(ChoiceConfiguration);