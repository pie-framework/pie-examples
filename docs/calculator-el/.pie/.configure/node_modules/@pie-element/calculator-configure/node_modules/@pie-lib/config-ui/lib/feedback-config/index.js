'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackConfig = exports.buildDefaults = exports.FeedbackSelector = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _feedbackSelector = require('./feedback-selector');

var _feedbackSelector2 = _interopRequireDefault(_feedbackSelector);

var _formSection = require('../form-section');

var _formSection2 = _interopRequireDefault(_formSection);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('@material-ui/core/styles');

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.FeedbackSelector = _feedbackSelector2.default;


var style = {};

var buildDefaults = exports.buildDefaults = function buildDefaults(input) {
  return (0, _merge2.default)({}, {
    correct: { type: 'default', default: 'Correct' },
    incorrect: { type: 'default', default: 'Incorrect' },
    partial: { type: 'default', default: 'Nearly' }
  }, input);
};

var FeedbackConfig = exports.FeedbackConfig = function (_React$Component) {
  _inherits(FeedbackConfig, _React$Component);

  function FeedbackConfig() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FeedbackConfig);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FeedbackConfig.__proto__ || Object.getPrototypeOf(FeedbackConfig)).call.apply(_ref, [this].concat(args))), _this), _this.onCorrectChange = _this.onChange.bind(_this, 'correct'), _this.onIncorrectChange = _this.onChange.bind(_this, 'incorrect'), _this.onPartialChange = _this.onChange.bind(_this, 'partial'), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FeedbackConfig, [{
    key: 'onChange',
    value: function onChange(key, config) {
      var _props = this.props,
          feedback = _props.feedback,
          onChange = _props.onChange;

      var update = _extends({}, feedback, _defineProperty({}, key, config));
      onChange(update);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          allowPartial = _props2.allowPartial,
          feedback = _props2.feedback;

      return _react2.default.createElement(
        _formSection2.default,
        { label: 'Feedback' },
        _react2.default.createElement(_feedbackSelector2.default, {
          label: 'If correct, show',
          feedback: feedback.correct,
          onChange: this.onCorrectChange
        }),
        allowPartial && _react2.default.createElement(_feedbackSelector2.default, {
          label: 'If partially correct, show',
          feedback: feedback.partial,
          onChange: this.onPartialChange
        }),
        _react2.default.createElement(_feedbackSelector2.default, {
          label: 'If incorrect, show',
          feedback: feedback.incorrect,
          onChange: this.onIncorrectChange
        })
      );
    }
  }]);

  return FeedbackConfig;
}(_react2.default.Component);

FeedbackConfig.propTypes = {
  allowPartial: _propTypes2.default.bool,
  feedback: _propTypes2.default.shape({
    correct: _propTypes2.default.shape(_feedbackSelector.FeedbackType),
    incorrect: _propTypes2.default.shape(_feedbackSelector.FeedbackType),
    partial: _propTypes2.default.shape(_feedbackSelector.FeedbackType)
  }),
  onChange: _propTypes2.default.func.isRequired
};
FeedbackConfig.defaultProps = {
  allowPartial: true,
  feedback: buildDefaults()
};
exports.default = (0, _styles.withStyles)(style)(FeedbackConfig);