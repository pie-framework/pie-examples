'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _range = require('lodash/range');

var _range2 = _interopRequireDefault(_range);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _styles = require('@material-ui/core/styles');

var _FormControl = require('@material-ui/core/FormControl');

var _FormControl2 = _interopRequireDefault(_FormControl);

var _FormHelperText = require('@material-ui/core/FormHelperText');

var _FormHelperText2 = _interopRequireDefault(_FormHelperText);

var _renderUi = require('@pie-lib/render-ui');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Correct = _renderUi.indicators.Correct,
      Incorrect = _renderUi.indicators.Incorrect,
      NothingSubmitted = _renderUi.indicators.NothingSubmitted;


const tags = {
  correct: Correct,
  incorrect: Incorrect,
  empty: NothingSubmitted
};

class RawInput extends _react2.default.Component {

  render() {
    var _props = this.props;
    const dark = _props.dark,
          classes = _props.classes,
          correctness = _props.correctness,
          disabled = _props.disabled,
          error = _props.error,
          inputProps = _props.inputProps,
          onChange = _props.onChange,
          size = _props.size,
          value = _props.value,
          feedback = _props.feedback;


    const formClasses = (0, _classnames2.default)(classes.formControl);
    const inputClass = (0, _classnames2.default)(classes.input, classes[`size${size}`]);
    const CorrectnessTag = tags[correctness];
    const theme = (0, _styles.createMuiTheme)({
      palette: {
        type: dark ? 'dark' : 'light'
      }
    });

    return _react2.default.createElement(
      _FormControl2.default,
      { disabled: disabled, className: formClasses, error: !!error },
      _react2.default.createElement(
        'div',
        { className: classes.inputAndIcon },
        _react2.default.createElement(
          _styles.MuiThemeProvider,
          { theme: theme },
          _react2.default.createElement(_Input2.default, {
            classes: {
              root: classes.inputRoot,
              input: inputClass
            },
            value: value,
            onChange: onChange,
            inputComponent: _TextField2.default,
            inputProps: inputProps
          })
        ),
        CorrectnessTag && _react2.default.createElement(
          'div',
          { className: classes.icon },
          _react2.default.createElement(CorrectnessTag, { feedback: feedback })
        )
      ),
      _react2.default.createElement(
        _FormHelperText2.default,
        null,
        error ? error : ''
      )
    );
  }
}

RawInput.propTypes = {
  dark: _propTypes2.default.bool,
  classes: _propTypes2.default.object,
  correctness: _propTypes2.default.oneOf(['correct', 'incorrect', 'empty']),
  disabled: _propTypes2.default.bool,
  error: _propTypes2.default.string,
  inputProps: _propTypes2.default.object,
  onChange: _propTypes2.default.func,
  size: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  value: _propTypes2.default.string.isRequired,
  feedback: _propTypes2.default.string
};
RawInput.defaultProps = {
  inputProps: {}
};
const inputStyles = theme => {
  const base = {
    container: {
      display: 'flex',
      flexWrap: 'wrap'
    },
    formControl: {
      margin: theme.spacing.unit
    },
    inputRoot: {},
    inputAndIcon: {
      display: 'flex',
      alignItems: 'end'
    },
    icon: {
      padding: '3px',
      paddingLeft: theme.spacing.unit
    },
    right: {
      textAlign: 'right'
    },
    center: {
      textAlign: 'center'
    }
  };

  const sizes = (0, _range2.default)(1, 20).reduce((acc, s) => {
    acc[`size${s}`] = {
      maxWidth: `${theme.spacing.unit * 1.4 * s}px`
    };
    return acc;
  }, {});

  return Object.assign(base, sizes);
};

const Input = (0, _styles.withStyles)(inputStyles)(RawInput);

exports.default = Input;