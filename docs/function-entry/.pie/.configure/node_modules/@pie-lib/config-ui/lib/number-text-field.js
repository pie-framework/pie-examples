'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberTextField = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _styles = require('@material-ui/core/styles');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _isFinite = require('lodash/isFinite');

var _isFinite2 = _interopRequireDefault(_isFinite);

var _InputAdornment = require('@material-ui/core/InputAdornment');

var _InputAdornment2 = _interopRequireDefault(_InputAdornment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('@pie-lib:config-ui:number-text-field');

var styles = function styles(theme) {
  return {
    root: { marginRight: theme.spacing.unit }
  };
};

var fallbackNumber = function fallbackNumber(min, max) {
  if (!(0, _isFinite2.default)(min) && !(0, _isFinite2.default)(max)) {
    return 0;
  }
  if (!(0, _isFinite2.default)(min) && (0, _isFinite2.default)(max)) {
    return max;
  }

  if ((0, _isFinite2.default)(min)) {
    return min;
  }
};

var NumberTextField = exports.NumberTextField = function (_React$Component) {
  _inherits(NumberTextField, _React$Component);

  function NumberTextField(props) {
    _classCallCheck(this, NumberTextField);

    var _this = _possibleConstructorReturn(this, (NumberTextField.__proto__ || Object.getPrototypeOf(NumberTextField)).call(this, props));

    var value = _this.clamp(props.value);

    _this.state = {
      value: value
    };

    if (value !== props.value) {
      _this.props.onChange({}, value);
    }

    _this.onChange = _this.onChange.bind(_this);
    return _this;
  }

  _createClass(NumberTextField, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var value = this.clamp(props.value);
      this.setState({ value: value });
    }
  }, {
    key: 'clamp',
    value: function clamp(value) {
      if (!(0, _isFinite2.default)(value)) {
        return fallbackNumber(this.props.min, this.props.max);
      }

      var _props = this.props,
          min = _props.min,
          max = _props.max;


      if ((0, _isFinite2.default)(max)) {
        value = Math.min(value, max);
      }
      if ((0, _isFinite2.default)(min)) {
        value = Math.max(value, min);
      }
      return value;
    }
  }, {
    key: 'onChange',
    value: function onChange(event) {
      var _this2 = this;

      var value = event.target.value;

      log('value: ', value);

      if (!value || isNaN(value)) {
        log('not natural - return');
        return;
      }

      var rawNumber = parseFloat(value, 10);
      log('rawNumber: ', rawNumber);

      var number = this.clamp(rawNumber);
      log('number: ', number);

      if (number !== this.state.value) {
        log('trigger update...');
        this.setState({ value: number }, function () {
          _this2.props.onChange(event, number);
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          classes = _props2.classes,
          label = _props2.label,
          disabled = _props2.disabled,
          suffix = _props2.suffix;

      var names = (0, _classnames2.default)(classes.root, className);
      return _react2.default.createElement(_TextField2.default, {
        disabled: disabled,
        label: label,
        value: this.state.value,
        onChange: this.onChange,
        type: 'number',
        className: names,
        InputLabelProps: {
          shrink: true
        },
        InputProps: {
          endAdornment: suffix && _react2.default.createElement(
            _InputAdornment2.default,
            { position: 'end' },
            suffix
          )
        },
        margin: 'normal'
      });
    }
  }]);

  return NumberTextField;
}(_react2.default.Component);

NumberTextField.propTypes = {
  disabled: _propTypes2.default.bool,
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  onChange: _propTypes2.default.func.isRequired,
  value: _propTypes2.default.number,
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  label: _propTypes2.default.string,
  suffix: _propTypes2.default.string
};
exports.default = (0, _styles.withStyles)(styles)(NumberTextField);