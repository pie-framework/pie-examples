'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageToolbar = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _toolbarButtons = require('../toolbar/toolbar-buttons');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('@pie-lib:editable-html:plugins:image:image-toolbar');

var PercentButton = function PercentButton(_ref) {
  var percent = _ref.percent,
      active = _ref.active,
      onClick = _ref.onClick;

  var label = percent + '%';
  return _react2.default.createElement(
    _toolbarButtons.MarkButton,
    { active: active, onToggle: function onToggle() {
        return onClick(percent);
      }, label: label },
    label
  );
};

PercentButton.propTypes = {
  percent: _propTypes2.default.number.isRequired,
  active: _propTypes2.default.bool.isRequired,
  onClick: _propTypes2.default.func.isRequired
};

var ImageToolbar = exports.ImageToolbar = function (_React$Component) {
  _inherits(ImageToolbar, _React$Component);

  function ImageToolbar() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, ImageToolbar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = ImageToolbar.__proto__ || Object.getPrototypeOf(ImageToolbar)).call.apply(_ref2, [this].concat(args))), _this), _this.onPercentClick = function (percent) {
      log('[onPercentClick]: percent:', percent);
      _this.props.onChange(percent);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ImageToolbar, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          classes = _props.classes,
          percent = _props.percent;

      return _react2.default.createElement(
        'div',
        { className: classes.holder },
        _react2.default.createElement(PercentButton, {
          percent: 25,
          active: percent === 25,
          onClick: this.onPercentClick
        }),
        _react2.default.createElement(PercentButton, {
          percent: 50,
          active: percent === 50,
          onClick: this.onPercentClick
        }),
        _react2.default.createElement(PercentButton, {
          active: percent === 75,
          percent: 75,
          onClick: this.onPercentClick
        }),
        _react2.default.createElement(PercentButton, {
          percent: 100,
          active: percent === 100 || !percent,
          onClick: this.onPercentClick
        })
      );
    }
  }]);

  return ImageToolbar;
}(_react2.default.Component);

ImageToolbar.propTypes = {
  percent: _propTypes2.default.number.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object.isRequired
};


var styles = function styles(theme) {
  return {
    holder: {
      paddingLeft: theme.spacing.unit,
      display: 'flex',
      alignItems: 'center'
    }
  };
};

exports.default = (0, _styles.withStyles)(styles)(ImageToolbar);