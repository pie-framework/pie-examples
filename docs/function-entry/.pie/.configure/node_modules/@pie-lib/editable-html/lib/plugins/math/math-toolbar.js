'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PureToolbar = exports.RawPureToolbar = exports.MathToolbar = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _editorAndPad = require('./editor-and-pad');

var _editorAndPad2 = _interopRequireDefault(_editorAndPad);

var _doneButton = require('../toolbar/done-button');

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MathToolbar = exports.MathToolbar = function (_React$Component) {
  _inherits(MathToolbar, _React$Component);

  function MathToolbar(props) {
    _classCallCheck(this, MathToolbar);

    var _this = _possibleConstructorReturn(this, (MathToolbar.__proto__ || Object.getPrototypeOf(MathToolbar)).call(this, props));

    _this.done = function () {
      _this.props.onDone(_this.state.latex);
    };

    _this.onChange = function (latex) {
      return _this.setState({ latex: latex });
    };

    _this.state = {
      latex: props.latex
    };
    return _this;
  }

  _createClass(MathToolbar, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({ latex: nextProps.latex });
    }
  }, {
    key: 'render',
    value: function render() {
      var latex = this.state.latex;

      return _react2.default.createElement(PureToolbar, { latex: latex, onChange: this.onChange, onDone: this.done });
    }
  }]);

  return MathToolbar;
}(_react2.default.Component);

MathToolbar.propTypes = {
  latex: _propTypes2.default.string.isRequired,
  onDone: _propTypes2.default.func.isRequired
};

var RawPureToolbar = exports.RawPureToolbar = function (_React$Component2) {
  _inherits(RawPureToolbar, _React$Component2);

  function RawPureToolbar() {
    _classCallCheck(this, RawPureToolbar);

    return _possibleConstructorReturn(this, (RawPureToolbar.__proto__ || Object.getPrototypeOf(RawPureToolbar)).apply(this, arguments));
  }

  _createClass(RawPureToolbar, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          latex = _props.latex,
          onChange = _props.onChange,
          onDone = _props.onDone,
          classes = _props.classes;

      return _react2.default.createElement(
        'div',
        { className: classes.pureToolbar },
        _react2.default.createElement(_editorAndPad2.default, { latex: latex, onChange: onChange }),
        _react2.default.createElement(_doneButton.DoneButton, { onClick: onDone })
      );
    }
  }]);

  return RawPureToolbar;
}(_react2.default.Component);

RawPureToolbar.propTypes = {
  latex: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  onDone: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object.isRequired
};

var styles = function styles() {
  return {
    pureToolbar: {
      display: 'flex',
      width: '100%',
      justifyContent: 'space-between'
    }
  };
};

var PureToolbar = exports.PureToolbar = (0, _styles.withStyles)(styles)(RawPureToolbar);