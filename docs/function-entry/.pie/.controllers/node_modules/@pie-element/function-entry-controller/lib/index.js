'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.model = model;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _mathjs = require('mathjs');

var _mathjs2 = _interopRequireDefault(_mathjs);

var _feedback = require('@pie-lib/feedback');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:function-entry:controller');

const process = v => _mathjs2.default.simplify(v ? v.trim() : '');

const isResponseCorrect = (correctResponse, value) => {
  const processedValue = process(value);
  const cr = _mathjs2.default.simplify(correctResponse);
  log('processed:', processedValue);
  log('correctResponse:', cr);
  return processedValue.equals(cr);
};

function model(question, session, env) {
  return new Promise(resolve => {
    const showFormattingHelp = question.showFormattingHelp,
          equation = question.equation,
          feedback = question.feedback;


    const getCorrectness = () => {
      if (env.mode === 'evaluate') {
        if (!session.value) {
          return 'empty';
        }

        return isResponseCorrect(equation, session.value) ? 'correct' : 'incorrect';
      }
    };

    const correctness = getCorrectness();

    const fb = env.mode === 'evaluate' ? (0, _feedback.getFeedbackForCorrectness)(correctness, feedback) : Promise.resolve(undefined);

    fb.then(feedback => {
      const out = {
        showFormattingHelp,
        correctness,
        feedback,
        disabled: env.mode !== 'gather'
      };

      log('out: ', out);

      resolve(out);
    });
  });
}