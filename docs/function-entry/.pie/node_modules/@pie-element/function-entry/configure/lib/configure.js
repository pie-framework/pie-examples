'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _styles = require('@material-ui/core/styles');

var _configUi = require('@pie-lib/config-ui');

var _functionEntry = require('@pie-ui/function-entry');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const styles = theme => ({
  title: {
    fontSize: '1.1rem',
    display: 'block',
    marginTop: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit
  },
  equationRowContainer: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit * 2
  },
  equationLabel: {
    marginRight: theme.spacing.unit
  },
  hintsControlRow: {
    display: 'flex',
    alignItems: 'center'
  },
  hintsCheckbox: {
    display: 'inline-block'
  },
  hints: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

class Configure extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.changeEquation = event => {
      var _props = this.props;
      const model = _props.model,
            onModelChanged = _props.onModelChanged;

      model.equation = event.target.value;
      onModelChanged(model);
    }, this.toggleFormattingHelp = event => {
      var _props2 = this.props;
      const onModelChanged = _props2.onModelChanged,
            model = _props2.model;

      model.showFormattingHelp = event.target.checked;
      onModelChanged(model);
    }, this.changeFeedback = feedback => {
      var _props3 = this.props;
      const onModelChanged = _props3.onModelChanged,
            model = _props3.model;

      model.feedback = feedback;
      onModelChanged(model);
    }, _temp;
  }

  render() {
    var _props4 = this.props;
    const classes = _props4.classes,
          model = _props4.model;


    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Typography2.default,
        { component: 'div', type: 'body1' },
        _react2.default.createElement(
          'p',
          null,
          'In Evaluate an Expression, a student submits a linear or polynomial expression to be evaluated.'
        ),
        _react2.default.createElement(
          'p',
          { className: classes.title },
          'Expression'
        ),
        _react2.default.createElement(
          'p',
          null,
          'Enter the expression against which the the student\'s response will be evaluated. ',
          _react2.default.createElement('br', null),
          'Note that',
          ' ',
          _react2.default.createElement(
            'b',
            null,
            _react2.default.createElement(
              'i',
              null,
              ' y '
            )
          ),
          'is the dependent variable and',
          ' ',
          _react2.default.createElement(
            'b',
            null,
            _react2.default.createElement(
              'i',
              null,
              ' f(x) '
            )
          ),
          ' ',
          'is some function where',
          ' ',
          _react2.default.createElement(
            'b',
            null,
            _react2.default.createElement(
              'i',
              null,
              ' x '
            )
          ),
          ' ',
          'is the independent variable. ',
          _react2.default.createElement('br', null),
          'Expressions ',
          _react2.default.createElement(
            'b',
            null,
            ' must '
          ),
          ' be input using',
          ' ',
          _react2.default.createElement(
            'b',
            null,
            _react2.default.createElement(
              'i',
              null,
              ' x '
            )
          ),
          ' ',
          'and/or',
          ' ',
          _react2.default.createElement(
            'b',
            null,
            _react2.default.createElement(
              'i',
              null,
              ' y '
            )
          ),
          ' ',
          'variables.'
        )
      ),
      _react2.default.createElement(
        'div',
        { className: classes.equationRowContainer },
        _react2.default.createElement(
          _Typography2.default,
          { type: 'body1' },
          _react2.default.createElement(
            'span',
            { className: classes.equationLabel },
            'y = '
          )
        ),
        _react2.default.createElement(_Input2.default, {
          type: 'text',
          className: 'equation-input',
          onChange: this.changeEquation,
          value: model.equation,
          placeholder: 'Enter the expression here.'
        })
      ),
      _react2.default.createElement(
        _Typography2.default,
        { type: 'body1' },
        _react2.default.createElement(
          'span',
          null,
          'When the student submits an answer the answer will be evaluated against the expression by generating test points. The test points are created by replacing the ',
          _react2.default.createElement(
            'i',
            null,
            'x'
          ),
          ' value within the function with random whole numbers within the domain. The ',
          _react2.default.createElement(
            'i',
            null,
            'y'
          ),
          ' value is then determined by evaluating the equation using the javascript eval function. This is done many times (~50) in order to be sure of the correctness.'
        )
      ),
      _react2.default.createElement(
        'div',
        { className: classes.hintsControlRow },
        _react2.default.createElement(_configUi.Checkbox, {
          className: classes.hintsCheckbox,
          checked: model.showFormattingHelp,
          onChange: this.toggleFormattingHelp,
          label: ''
        }),
        _react2.default.createElement(
          _Typography2.default,
          { component: 'span' },
          'Show the student the formatting hints for constructing an answer'
        )
      ),
      model.showFormattingHelp && _react2.default.createElement(_functionEntry.Hints, { className: classes.hints }),
      _react2.default.createElement(_configUi.FeedbackConfig, {
        allowPartial: false,
        feedback: model.feedback,
        onChange: this.changeFeedback
      })
    );
  }
}

Configure.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  model: _propTypes2.default.object,
  onModelChanged: _propTypes2.default.func.isRequired
};
const ConfigureMain = (0, _styles.withStyles)(styles)(Configure);

class StateWrapper extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.state = {
      model: props.model
    };

    this.onModelChanged = model => {
      this.setState({ model }, () => {
        this.props.onModelChanged(this.state.model);
      });
    };
  }

  render() {
    const model = this.state.model;


    return _react2.default.createElement(ConfigureMain, { model: model, onModelChanged: this.onModelChanged });
  }
}

StateWrapper.propTypes = {
  model: _propTypes2.default.any,
  onModelChanged: _propTypes2.default.func
};
exports.default = StateWrapper;