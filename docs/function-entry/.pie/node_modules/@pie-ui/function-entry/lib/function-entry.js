'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _styles = require('@material-ui/core/styles');

var _hintsPopover = require('./hints-popover');

var _hintsPopover2 = _interopRequireDefault(_hintsPopover);

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('pie-ui:function-entry');

const styles = theme => ({
  popup: {
    marginTop: theme.spacing.unit * 2
  }
});

class FunctionEntry extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.handleHintsPopoverOpen = event => {
      this.setState({ hintsAnchorEl: event.target });
    };

    this.handleHintsPopoverClose = () => {
      this.setState({ hintsAnchorEl: null });
    };

    this.onChange = event => {
      clearTimeout(this.state.timeoutId);

      this.setState({ warning: null, timeoutId: null });

      log('[onChange] value: ', event.target.value);

      if (this.state.value !== event.target.value) {
        let value = this.props.model.ignoreWhitespace ? event.target.value.trim() : event.target.value;

        this.setState({ value }, () => {
          this.props.onValueChanged(this.state.value);
        });
      }
    };

    this.state = {
      value: props.session && props.session.value || '',
      hintsAnchorEl: null,
      anchorReference: 'anchorEl',
      hintsOpen: false
    };
  }

  render() {
    var _props = this.props;
    const model = _props.model,
          classes = _props.classes;

    log('[render] model: ', model);
    const value = this.state.value;
    var _state = this.state;
    const anchorReference = _state.anchorReference,
          hintsAnchorEl = _state.hintsAnchorEl;

    const hintsOpen = model.showFormattingHelp && !!hintsAnchorEl;

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_input2.default, {
        inputProps: {
          onFocus: this.handleHintsPopoverOpen,
          onBlur: this.handleHintsPopoverClose
        },
        feedback: model.feedback,
        value: value,
        correctness: model.correctness,
        onChange: this.onChange,
        error: this.state.warning,
        disabled: model.disabled
      }),
      _react2.default.createElement(_hintsPopover2.default, {
        className: classes.popup,
        hintsOpen: hintsOpen,
        hintsAnchorEl: hintsAnchorEl,
        anchorReference: anchorReference
      })
    );
  }
}

FunctionEntry.propTypes = {
  classes: _propTypes2.default.object,
  session: _propTypes2.default.object,
  model: _propTypes2.default.object,
  onValueChanged: _propTypes2.default.func
};
exports.default = (0, _styles.withStyles)(styles)(FunctionEntry);