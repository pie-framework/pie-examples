'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Feedback = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _styles = require('@material-ui/core/styles');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTransitionGroup = require('react-transition-group');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Lifted from multiple-choice - TODO: create a shared package for it.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var styleSheet = {
  corespringFeedback: {
    transformOrigin: '0% 0px 0px',
    width: '100%',
    display: 'block',
    overflow: 'hidden',
    '&:.incorrect': {
      color: '#946202'
    }
  },
  content: {
    '-webkit-font-smoothing': 'antialiased',
    backgroundColor: 'var(--feedback-bg-color, grey)',
    borderRadius: '4px',
    fontFamily: '"Roboto", "Noto", sans-serif',
    fontSize: '12px',
    lineHeight: '25px',
    margin: '0px',
    padding: '10px',
    verticalAlign: 'middle',
    color: 'var(--feedback-color, white)'
  },
  correct: {
    backgroundColor: 'var(--feedback-correct-bg-color, green)'
  },
  incorrect: {
    backgroundColor: 'var(--feedback-incorrect-bg-color, orange)'
  },
  feedbackEnter: {
    height: '1px'
  },
  feedbackEnterActive: {
    height: '45px',
    transition: 'height 500ms'
  },
  feedbackLeave: {
    height: '45px'
  },
  feedbackLeaveActive: {
    height: '1px',
    transition: 'height 200ms'
  }
};

var Feedback = exports.Feedback = function (_React$Component) {
  _inherits(Feedback, _React$Component);

  function Feedback() {
    _classCallCheck(this, Feedback);

    return _possibleConstructorReturn(this, (Feedback.__proto__ || Object.getPrototypeOf(Feedback)).apply(this, arguments));
  }

  _createClass(Feedback, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          correctness = _props.correctness,
          feedback = _props.feedback,
          classes = _props.classes;


      function chooseFeedback(correctness) {
        if (correctness && feedback) {
          return _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            {
              classNames: {
                enter: classes.feedbackEnter,
                enterActive: classes.feedbackEnterActive,
                leave: classes.feedbackLeave,
                leaveActive: classes.feedbackLeaveActive
              },
              key: 'hasFeedback',
              timeout: { enter: 500, exit: 300 }
            },
            _react2.default.createElement(
              'div',
              { className: classes.corespringFeedback },
              _react2.default.createElement('div', {
                className: (0, _classnames2.default)(classes.content, classes[correctness]),
                dangerouslySetInnerHTML: { __html: feedback }
              })
            )
          );
        } else {
          return null;
        }
      }

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _reactTransitionGroup.TransitionGroup,
          null,
          chooseFeedback(correctness)
        )
      );
    }
  }]);

  return Feedback;
}(_react2.default.Component);

Feedback.propTypes = {
  correctness: _propTypes2.default.string,
  feedback: _propTypes2.default.string,
  classes: _propTypes2.default.object.isRequired
};
exports.default = (0, _styles.withStyles)(styleSheet, { name: 'Feedback' })(Feedback);