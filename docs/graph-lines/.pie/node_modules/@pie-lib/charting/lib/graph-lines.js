'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _domainAndRange = require('./domain-and-range');

var _domainAndRange2 = _interopRequireDefault(_domainAndRange);

var _chartingTypes = require('./charting-types');

var _expressionLine = require('./expression-line');

var _expressionLine2 = _interopRequireDefault(_expressionLine);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GraphLines = function (_React$Component) {
  _inherits(GraphLines, _React$Component);

  function GraphLines(props) {
    _classCallCheck(this, GraphLines);

    var _this = _possibleConstructorReturn(this, (GraphLines.__proto__ || Object.getPrototypeOf(GraphLines)).call(this, props));

    _this.movePoint = function (from, to) {
      _this.setState({ point: _point.utils.trim(to) });
    };

    _this.getPointBounds = function (p) {
      return _point.utils.bounds(p, _this.props.domain, _this.props.range);
    };

    _this.onDomainClick = function (point) {
      var _this$props = _this.props,
          domain = _this$props.domain,
          range = _this$props.range,
          maxLines = _this$props.maxLines,
          lines = _this$props.lines;

      var snapped = {
        x: (0, _utils.snapTo)(domain.min, domain.max, domain.step, point.x),
        y: (0, _utils.snapTo)(range.min, range.max, range.step, point.y)
      };

      if (!lines.length || lines.length && maxLines > lines.length) {
        if (!_this.state.point) {
          _this.setState({ point: snapped });

          if (_this.props.onAddPoint) {
            _this.props.onAddPoint(snapped);
          }
        } else if (snapped.x === _this.state.point.x && snapped.y === _this.state.point.y) {
          // we already have this point, one point cannot define a line so we do nothing
        } else if (lines.find(function (line) {
          return line.from.x === snapped.x && line.from.y === snapped.y || line.to.x === snapped.x && line.to.y === snapped.y;
        })) {
          // we're actually trying to select a point that already defines a line, not add a new point - so do nothing
        } else {
          var from = {
            x: _this.state.point.x,
            y: _this.state.point.y
          };

          _this.props.onAddLine({ from: from, to: snapped });
          _this.setState({ point: null });
        }
      }
    };

    _this.state = {
      point: null
    };
    return _this;
  }

  _createClass(GraphLines, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          lines = _props.lines,
          onLineChange = _props.onLineChange,
          onLineClick = _props.onLineClick,
          width = _props.width,
          height = _props.height,
          domain = _props.domain,
          range = _props.range;
      var point = this.state.point;


      return _react2.default.createElement(
        _domainAndRange2.default,
        {
          className: className,
          disabled: disabled,
          width: width,
          height: height,
          domain: domain,
          range: range,
          onClick: this.onDomainClick
        },
        lines.map(function (l, index) {
          return _react2.default.createElement(_expressionLine2.default, {
            disabled: disabled,
            key: index,
            index: index,
            line: l,
            onChange: function onChange(newLine) {
              return onLineChange(l, newLine);
            },
            onClick: onLineClick,
            selected: l.selected,
            domain: domain,
            range: range
          });
        }),
        point && _react2.default.createElement(_point2.default, _extends({
          showCoordinates: true,
          showLabels: false
        }, point, {
          disabled: disabled,
          empty: false,
          bounds: this.getPointBounds(point),
          interval: 1,
          onMove: function onMove(n) {
            return _this2.movePoint(point, n);
          }
        }))
      );
    }
  }]);

  return GraphLines;
}(_react2.default.Component);

GraphLines.propTypes = {
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool.isRequired,
  lines: _propTypes2.default.arrayOf(_chartingTypes.LineType).isRequired,
  width: _propTypes2.default.number.isRequired,
  height: _propTypes2.default.number.isRequired,
  domain: _propTypes2.default.object.isRequired,
  range: _propTypes2.default.object.isRequired,
  onAddPoint: _propTypes2.default.func,
  onAddLine: _propTypes2.default.func.isRequired,
  onLineChange: _propTypes2.default.func.isRequired,
  maxLines: _propTypes2.default.number.isRequired,
  onLineClick: _propTypes2.default.func.isRequired
};
GraphLines.defaultProps = {
  maxLines: 1
};
exports.default = GraphLines;