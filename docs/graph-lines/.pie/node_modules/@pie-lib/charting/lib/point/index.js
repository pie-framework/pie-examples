'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Point = exports.utils = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _draggable = require('./draggable');

var _draggable2 = _interopRequireDefault(_draggable);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _domainAndRange = require('../domain-and-range');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

var _color = require('../color');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.utils = utils;


var log = (0, _debug2.default)('pie-lib:charting:point');

var duration = '150ms';

var style = {
  point: {
    '& circle': {
      cursor: 'pointer',
      transition: 'r ' + duration + ' linear,  \n    opacity ' + duration + ' linear, \n    fill ' + duration + ' linear,\n    stroke ' + duration + ' linear',
      stroke: 'var(--point-stroke, black)',
      fill: 'var(--point-stroke, black)'
    },
    '& text': {
      transition: 'opacity ' + duration + ' linear'
    },
    '&.react-draggable-dragging text': {
      opacity: 0
    },
    '&.react-draggable-dragging circle': {
      opacity: 0.25,
      r: '10px'
    }
  },
  disabled: {
    '& circle': {
      cursor: 'inherit',
      fill: 'var(--charting-point-fill, grey)',
      stroke: 'var(--charting-point-fill, grey)'
    }
  },
  selected: {
    '& text': {
      fill: _color.primary.main
    },
    '& circle': {
      stroke: _color.primary.main,
      fill: _color.primary.main
    }
  },
  correct: {
    '& circle': {
      cursor: 'inherit',
      stroke: _color.correct.main,
      fill: _color.correct.main
    }
  },
  incorrect: {
    '& circle': {
      cursor: 'inherit',
      stroke: _color.incorrect.main,
      fill: _color.incorrect.main
    }
  },
  empty: {
    fill: 'var(--point-fill, white)'
  }
};

var Label = function (_React$Component) {
  _inherits(Label, _React$Component);

  function Label() {
    _classCallCheck(this, Label);

    return _possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).apply(this, arguments));
  }

  _createClass(Label, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          x = _props.x,
          y = _props.y,
          label = _props.label,
          showCoordinates = _props.showCoordinates;
      var scale = this.context.scale;

      var xy = showCoordinates ? '(' + x + ',' + y + ')' : '';
      var value = label ? label + ' ' + xy : xy;
      return _react2.default.createElement(
        'text',
        { x: scale.x(x), y: scale.y(y) - 10 },
        value
      );
    }
  }]);

  return Label;
}(_react2.default.Component);
/**
 * TODO: publish this and use it in @pie-ui/number-line.
 */


Label.propTypes = {
  x: _propTypes2.default.number.isRequired,
  y: _propTypes2.default.number.isRequired,
  label: _propTypes2.default.string,
  showCoordinates: _propTypes2.default.bool
};
Label.contextTypes = (0, _domainAndRange.ContextTypes)();

var Point = exports.Point = function (_React$Component2) {
  _inherits(Point, _React$Component2);

  function Point() {
    _classCallCheck(this, Point);

    return _possibleConstructorReturn(this, (Point.__proto__ || Object.getPrototypeOf(Point)).apply(this, arguments));
  }

  _createClass(Point, [{
    key: 'render',
    value: function render() {
      var _this3 = this,
          _classNames;

      var _props2 = this.props,
          _x = _props2.x,
          _y = _props2.y,
          onDragStop = _props2.onDragStop,
          onDragStart = _props2.onDragStart,
          onDragCallback = _props2.onDrag,
          onClick = _props2.onClick,
          onMove = _props2.onMove,
          interval = _props2.interval,
          bounds = _props2.bounds,
          selected = _props2.selected,
          disabled = _props2.disabled,
          correct = _props2.correct,
          empty = _props2.empty,
          classes = _props2.classes,
          showLabels = _props2.showLabels,
          showCoordinates = _props2.showCoordinates,
          label = _props2.label;
      var _context = this.context,
          scale = _context.scale,
          snap = _context.snap;


      var grid = {
        x: scale.x(interval) - scale.x(0),
        y: scale.y(interval) - scale.y(0)
      };

      log('[render] bounds: ', bounds, 'grid: ', grid);

      var position = {
        x: function x(delta) {
          var normalized = delta + scale.x(0);
          var inverted = scale.x.invert(normalized);
          return snap.x(_x + inverted);
        },
        y: function y(delta) {
          var normalized = delta + scale.y(0);
          var inverted = scale.y.invert(normalized);
          return snap.y(_y + inverted);
        }
      };

      var onStart = function onStart(e) {
        _this3.setState({ startX: e.clientX, startY: e.clientY });
        if (onDragStart) {
          onDragStart();
        }
      };

      var tiny = function tiny(key, event) {
        var K = key.toUpperCase();
        var end = event['client' + K];
        var start = _this3.state['start' + K];
        var delta = Math.abs(end - start);
        var out = delta < Math.abs(grid[key]) / 10;
        log('[tiny] key: ', key, 'delta: ', delta, 'out: ', out);
        return out;
      };

      var onStop = function onStop(e, dd) {
        if (onDragStop) {
          onDragStop();
        }

        if (tiny('x', e) && tiny('y', e)) {
          // if (deltaX < (xGrid / 10)) {
          if (onClick) {
            onClick();
            _this3.setState({ startX: null });
          }
        } else {
          var newPosition = {
            x: position.x(dd.lastX),
            y: position.y(dd.lastY)
          };

          log('[onStop] new pos: ', newPosition);
          onMove(newPosition);
        }
      };

      //prevent the text select icon from rendering.
      var onMouseDown = function onMouseDown(e) {
        return e.nativeEvent.preventDefault();
      };

      var scaledBounds = {
        left: bounds.left / interval * grid.x,
        right: bounds.right / interval * grid.x,
        top: bounds.top / interval * grid.y,
        bottom: bounds.bottom / interval * grid.y
      };

      var onDrag = function onDrag(e, dd) {
        var p = {
          x: position.x(dd.x),
          y: position.y(dd.y)
        };
        if (onDragCallback) {
          onDragCallback(p);
        }
      };

      var circleClass = (0, _classnames2.default)(classes.point, (_classNames = {}, _defineProperty(_classNames, classes.selected, selected), _defineProperty(_classNames, classes.correct, correct === true), _defineProperty(_classNames, classes.incorrect, correct === false), _defineProperty(_classNames, classes.empty, empty === true), _defineProperty(_classNames, classes.disabled, disabled), _classNames));

      return _react2.default.createElement(
        _draggable2.default,
        {
          disabled: disabled,
          onMouseDown: onMouseDown,
          onStart: onStart,
          onDrag: onDrag,
          onStop: onStop,
          axis: 'both',
          grid: [grid.x, grid.y],
          bounds: scaledBounds
        },
        _react2.default.createElement(
          'g',
          { className: circleClass },
          (showLabels && label || showCoordinates) && _react2.default.createElement(Label, {
            showCoordinates: showCoordinates,
            x: _x,
            y: _y,
            label: showLabels ? label : null
          }),
          _react2.default.createElement('circle', { r: '5', strokeWidth: '3', cx: scale.x(_x), cy: scale.y(_y) })
        )
      );
    }
  }]);

  return Point;
}(_react2.default.Component);

Point.defaultProps = {
  selected: false,
  empty: false,
  disabled: false,
  correct: undefined,
  label: undefined,
  showLabels: true,
  showCoordinates: false
};
Point.propTypes = {
  interval: _propTypes2.default.number.isRequired,
  x: _propTypes2.default.number.isRequired,
  y: _propTypes2.default.number.isRequired,
  bounds: _propTypes2.default.shape({
    left: _propTypes2.default.number.isRequired,
    right: _propTypes2.default.number.isRequired
  }),
  selected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  correct: _propTypes2.default.bool,
  empty: _propTypes2.default.bool,
  classes: _propTypes2.default.object.isRequired,
  onMove: _propTypes2.default.func.isRequired,
  onClick: _propTypes2.default.func,
  onDrag: _propTypes2.default.func,
  onDragStop: _propTypes2.default.func,
  onDragStart: _propTypes2.default.func,
  label: _propTypes2.default.string,
  showLabels: _propTypes2.default.bool,
  showCoordinates: _propTypes2.default.bool
};
Point.contextTypes = (0, _domainAndRange.ContextTypes)();
exports.default = (0, _reactJss2.default)(style)(Point);