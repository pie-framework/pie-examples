'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpressionLine = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _domainAndRange = require('./domain-and-range');

var _point = require('@vx/point');

var _shape = require('@vx/shape');

var _chartingTypes = require('./charting-types');

var _line = require('./line');

var _point2 = require('./point');

var _point3 = _interopRequireDefault(_point2);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('pie-lib:charting:expression-line');

var ExpressionLine = exports.ExpressionLine = function (_React$Component) {
  _inherits(ExpressionLine, _React$Component);

  function ExpressionLine(props) {
    _classCallCheck(this, ExpressionLine);

    var _this = _possibleConstructorReturn(this, (ExpressionLine.__proto__ || Object.getPrototypeOf(ExpressionLine)).call(this, props));

    _this.onDragPoint = function (fromOrTo, p) {
      log('[onDragPoint]: p: ', p);
      var preview = _extends({}, _this.props.line, _defineProperty({}, fromOrTo, p));
      _this.setState({ preview: preview });
    };

    _this.onDragFrom = function (p) {
      return _this.onDragPoint('from', p);
    };

    _this.onDragTo = function (p) {
      return _this.onDragPoint('to', p);
    };

    _this.onMovePoint = function (fromOrTo, p) {
      var onChange = _this.props.onChange;

      log('[onMovePoint]: p: ', p);
      _this.setState({ preview: null });
      onChange(_extends({}, _this.props.line, _defineProperty({}, fromOrTo, p)));
    };

    _this.onMoveFrom = function (p) {
      return _this.onMovePoint('from', p);
    };

    _this.onMoveTo = function (p) {
      return _this.onMovePoint('to', p);
    };

    _this.onClick = function () {
      var onClick = _this.props.onClick;

      onClick(_this.props.line);
    };

    _this.state = {
      preview: null
    };
    return _this;
  }

  _createClass(ExpressionLine, [{
    key: 'buildExtendedLine',
    value: function buildExtendedLine(line) {
      var scale = this.context.scale;
      var domain = this.props.domain;

      var expression = _line.utils.expression(line.from, line.to);

      var fromX = expression.isVerticalLine ? line.from.x : domain.min;
      var toX = expression.isVerticalLine ? line.to.x : domain.max;

      var fromY = expression.getY(domain.min);
      var toY = expression.getY(domain.max);

      return {
        from: new _point.Point({
          x: scale.x(fromX),
          y: scale.y(fromY)
        }),
        to: new _point.Point({
          x: scale.x(toX),
          y: scale.y(toY)
        })
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          disabled = _props.disabled,
          line = _props.line,
          domain = _props.domain,
          range = _props.range,
          classes = _props.classes,
          selected = _props.selected;
      var preview = this.state.preview;


      log('[render] preview:', preview);

      var l = preview || line;

      var points = this.buildExtendedLine(l, domain, range);
      var label = void 0;

      if (l.label) {
        var xAvg = (points.from.x + points.to.x) / 2;
        var yAvg = (points.from.y + points.to.y) / 2;
        var rotation = Math.atan((points.to.y - points.from.y) / (points.to.x - points.from.x)) * 180 / Math.PI;
        label = {
          x: xAvg,
          y: yAvg,
          transform: 'rotate(' + rotation + ', ' + xAvg + ', ' + (yAvg + 20) + ')'
        };
      }

      return _react2.default.createElement(
        'g',
        null,
        _react2.default.createElement(_shape.Line, {
          stroke: 'black',
          className: (0, _classnames2.default)(preview && classes.preview, selected && classes.selected),
          strokeWidth: 2,
          from: points.from,
          to: points.to
        }),
        label && _react2.default.createElement(
          'text',
          label,
          l.label
        ),
        _react2.default.createElement(_point3.default, {
          showCoordinates: true,
          x: line.from.x,
          y: line.from.y,
          disabled: disabled,
          empty: false,
          onDrag: this.onDragFrom,
          onMove: this.onMoveFrom,
          onClick: this.onClick,
          selected: selected,
          bounds: _point2.utils.bounds(line.from, domain, range),
          interval: 1
        }),
        _react2.default.createElement(_point3.default, {
          showCoordinates: true,
          x: line.to.x,
          y: line.to.y,
          disabled: disabled,
          empty: false,
          onDrag: this.onDragTo,
          onMove: this.onMoveTo,
          onClick: this.onClick,
          selected: selected,
          bounds: _point2.utils.bounds(line.to, domain, range),
          interval: 1
        })
      );
    }
  }]);

  return ExpressionLine;
}(_react2.default.Component);

ExpressionLine.propTypes = {
  range: _propTypes2.default.object.isRequired,
  domain: _propTypes2.default.object.isRequired,
  line: _chartingTypes.LineType,
  onChange: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object.isRequired,
  onClick: _propTypes2.default.func.isRequired,
  selected: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool
};
ExpressionLine.defaultProps = {
  disabled: false
};
ExpressionLine.contextTypes = (0, _domainAndRange.ContextTypes)();


var styles = {
  preview: {
    stroke: 'rgba(0,0,0, 0.2)',
    strokeWidth: 4
  },
  selected: {
    stroke: 'rgba(0,0,255, 0.2)'
  }
};

exports.default = (0, _reactJss2.default)(styles)(ExpressionLine);