'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serialization = exports.reactAttributes = exports.parseStyleString = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _slateEditTable = require('slate-edit-table');

var _slateEditTable2 = _interopRequireDefault(_slateEditTable);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _GridOn = require('@material-ui/icons/GridOn');

var _GridOn2 = _interopRequireDefault(_GridOn);

var _tableToolbar = require('./table-toolbar');

var _tableToolbar2 = _interopRequireDefault(_tableToolbar);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _slatePropTypes = require('slate-prop-types');

var _slatePropTypes2 = _interopRequireDefault(_slatePropTypes);

var _styles = require('@material-ui/core/styles');

var _reactAttrConverter = require('react-attr-converter');

var _reactAttrConverter2 = _interopRequireDefault(_reactAttrConverter);

var _toStyle = require('to-style');

var _changeCase = require('change-case');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('@pie-lib:editable-html:plugins:table');

var Table = (0, _styles.withStyles)(function (theme) {
  return {
    table: {}
  };
})(function (props) {
  var nodeAttributes = dataToAttributes(props.node.data);

  return _react2.default.createElement(
    'table',
    _extends({
      className: props.classes.table
    }, props.attributes, nodeAttributes, {
      onFocus: props.onFocus,
      onBlur: props.onBlur
    }),
    _react2.default.createElement(
      'tbody',
      null,
      props.children
    )
  );
});

Table.propTypes = {
  attributes: _propTypes2.default.object,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  node: _slatePropTypes2.default.node,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired
};

var TableRow = function TableRow(props) {
  return _react2.default.createElement(
    'tr',
    props.attributes,
    props.children
  );
};

TableRow.propTypes = {
  attributes: _propTypes2.default.object,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired
};

var TableCell = (0, _styles.withStyles)(function (theme) {
  return {
    td: {}
  };
})(function (props) {
  var Tag = props.node.data.get('header') ? 'th' : 'td';

  var nodeAttributes = dataToAttributes(props.node.data);
  delete nodeAttributes.header;

  return _react2.default.createElement(
    Tag,
    _extends({}, props.attributes, nodeAttributes, {
      colSpan: props.node.data.get('colspan'),
      className: props.classes[Tag],
      onFocus: props.onFocus,
      onBlur: props.onBlur
    }),
    props.children
  );
});

TableCell.propTypes = {
  attributes: _propTypes2.default.object,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired
};

exports.default = function (opts, toolbarPlugins /* :  {toolbar: {}}[] */) {
  var core = (0, _slateEditTable2.default)({
    typeContent: 'div'
  });

  core.utils.getTableBlock = function (containerNode, key) {
    var node = containerNode.getDescendant(key);
    var ancestors = containerNode.getAncestors(key).push(node);
    return ancestors.findLast(function (p) {
      return p.type === 'table';
    });
  };

  core.toolbar = {
    icon: _react2.default.createElement(_GridOn2.default, null),
    onClick: function onClick(value, onChange) {
      log('insert table');
      var c = core.changes.insertTable(value.change(), 2, 2);
      onChange(c);
    },
    supports: function supports(node, value) {
      return node && node.object === 'block' && core.utils.isSelectionInTable(value);
    },
    /**
     * Note - the node may not be a table node - it may be a node inside a table.
     */
    customToolbar: function customToolbar(node, value, onToolbarDone) {
      log('[customToolbar] node.data: ', node.data);

      var tableBlock = core.utils.getTableBlock(value.document, node.key);
      log('[customToolbar] tableBlock: ', tableBlock);

      var hasBorder = function hasBorder() {
        return tableBlock.data.get('border') && tableBlock.data.get('border') !== '0';
      };
      var addRow = function addRow() {
        var change = core.changes.insertRow(value.change());
        onToolbarDone(change, false);
      };

      var addColumn = function addColumn() {
        var change = core.changes.insertColumn(value.change());
        onToolbarDone(change, false);
      };

      var removeRow = function removeRow() {
        var change = core.changes.removeRow(value.change());
        onToolbarDone(change, false);
      };

      var removeColumn = function removeColumn() {
        var change = core.changes.removeColumn(value.change());
        onToolbarDone(change, false);
      };

      var removeTable = function removeTable() {
        var change = core.changes.removeTable(value.change());
        onToolbarDone(change, false);
      };

      var toggleBorder = function toggleBorder() {
        var data = tableBlock.data;

        var update = data.set('border', hasBorder() ? '0' : '1');
        log('[toggleBorder] update: ', update);
        var change = value.change().setNodeByKey(tableBlock.key, { data: update });
        onToolbarDone(change, false);
      };

      var onDone = function onDone() {
        log('[onDone] call onToolbarDone...');
        onToolbarDone(null, true);
      };

      var Tb = function Tb() {
        return _react2.default.createElement(_tableToolbar2.default, {
          plugins: toolbarPlugins,
          onChange: function onChange(c) {
            return onToolbarDone(c, false);
          },
          value: value,
          onAddRow: addRow,
          onRemoveRow: removeRow,
          onAddColumn: addColumn,
          onRemoveColumn: removeColumn,
          onRemoveTable: removeTable,
          hasBorder: hasBorder(),
          onToggleBorder: toggleBorder,
          onDone: onDone
        });
      };
      return Tb;
    }
  };

  core.renderNode = function (props) {
    switch (props.node.type) {
      case 'table':
        return _react2.default.createElement(Table, _extends({}, props, { onFocus: opts.onFocus, onBlur: opts.onBlur }));
      case 'table_row':
        return _react2.default.createElement(TableRow, props);
      case 'table_cell':
        return _react2.default.createElement(TableCell, _extends({}, props, { onFocus: opts.onFocus, onBlur: opts.onBlur }));
      default:
        return null;
    }
  };

  return core;
};

var parseStyleString = exports.parseStyleString = function parseStyleString(s) {
  var regex = /([\w-]*)\s*:\s*([^;]*)/g;
  var match = void 0;
  var result = {};
  while (match = regex.exec(s)) {
    result[match[1]] = match[2].trim();
  }
  return result;
};

var toStyleString = function toStyleString(o) {
  return Object.keys(o).reduce(function (acc, k) {
    var hyphenated = (0, _changeCase.paramCase)(k);
    acc[hyphenated] = o[k];
    return acc;
  }, {});
};
var reactAttributes = exports.reactAttributes = function reactAttributes(o) {
  return (0, _toStyle.object)(o, { camelize: true });
};

var attributesToMap = function attributesToMap(el) {
  return function (acc, attribute) {
    var value = el.getAttribute(attribute);
    if (value) {
      if (attribute === 'style') {
        var styleString = el.getAttribute(attribute);
        var reactStyleObject = reactAttributes(parseStyleString(styleString));
        acc['style'] = reactStyleObject;
      } else {
        acc[attribute] = el.getAttribute(attribute);
      }
    }
    return acc;
  };
};

var dataToAttributes = function dataToAttributes(data) {
  if (!data || !data.get) {
    return {};
  }

  return data.reduce(function (acc, v, name) {
    if (v) {
      acc[(0, _reactAttrConverter2.default)(name)] = v;
    }
    return acc;
  }, {});
};

var attributes = ['border', 'cellpadding', 'cellspacing', 'class', 'style'];

var cellAttributes = ['colspan', 'rowspan', 'class', 'style'];

var serialization = exports.serialization = {
  deserialize: function deserialize(el, next) {
    var tag = el.tagName.toLowerCase();

    switch (tag) {
      case 'table':
        {
          var children = el.children.length === 1 && el.children[0].tagName.toLowerCase() === 'tbody' ? el.children[0].children : el.children;
          var c = Array.from(children);

          return {
            object: 'block',
            type: 'table',
            nodes: next(c),
            data: attributes.reduce(attributesToMap(el), {})
          };
        }
      case 'th':
        {
          return {
            object: 'block',
            type: 'table_cell',
            nodes: next(el.childNodes),
            data: cellAttributes.reduce(attributesToMap(el), { header: true })
          };
        }
      case 'tr':
        {
          return {
            object: 'block',
            type: 'table_row',
            nodes: next(Array.from(el.children))
          };
        }
      case 'td':
        {
          return {
            object: 'block',
            type: 'table_cell',
            nodes: next(el.childNodes),
            data: cellAttributes.reduce(attributesToMap(el), { header: false })
          };
        }
    }
  },
  serialize: function serialize(object, children) {
    if (object.object !== 'block') {
      return;
    }

    switch (object.type) {
      case 'table':
        {
          var _attributes = dataToAttributes(object.data);
          return _react2.default.createElement(
            'table',
            _attributes,
            _react2.default.createElement(
              'tbody',
              null,
              children
            )
          );
        }
      case 'table_row':
        {
          return _react2.default.createElement(
            'tr',
            null,
            children
          );
        }
      case 'table_cell':
        {
          var _attributes2 = dataToAttributes(object.data);
          delete _attributes2.header;
          if (object.data.get('header')) {
            return _react2.default.createElement(
              'th',
              _attributes2,
              children
            );
          } else {
            return _react2.default.createElement(
              'td',
              _attributes2,
              children
            );
          }
        }
    }
  }
};