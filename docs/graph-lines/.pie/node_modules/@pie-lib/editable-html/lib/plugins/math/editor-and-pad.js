'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorAndPad = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mathInput = require('@pie-lib/math-input');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _editor = require('./mathquill/editor');

var _editor2 = _interopRequireDefault(_editor);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('editable-html:plugins:math:editor-and-pad');

var toNodeData = function toNodeData(data) {
  if (!data) {
    return;
  }

  var type = data.type,
      value = data.value;


  if (type === 'command' || type === 'cursor') {
    return data;
  } else if (value === 'clear') {
    return { type: 'clear' };
  } else {
    return { type: 'write', value: value };
  }
};

var EditorAndPad = exports.EditorAndPad = function (_React$Component) {
  _inherits(EditorAndPad, _React$Component);

  function EditorAndPad() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditorAndPad);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditorAndPad.__proto__ || Object.getPrototypeOf(EditorAndPad)).call.apply(_ref, [this].concat(args))), _this), _this.onClick = function (data) {
      var c = toNodeData(data);
      log('mathChange: ', c);

      if (c.type === 'clear') {
        log('call clear...');
        _this.input.clear();
      } else if (c.type === 'command') {
        _this.input.command(c.value);
      } else if (c.type === 'cursor') {
        _this.input.keystroke(c.value);
      } else {
        _this.input.write(c.value);
      }
    }, _this.onEditorChange = function (latex) {
      var onChange = _this.props.onChange;

      onChange(latex);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditorAndPad, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          latex = _props.latex,
          classes = _props.classes;


      return _react2.default.createElement(
        'div',
        { className: classes.mathToolbar },
        _react2.default.createElement(_editor2.default, {
          className: classes.mathEditor,
          ref: function ref(r) {
            return _this2.input = r;
          },
          latex: latex,
          onChange: this.onEditorChange
        }),
        _react2.default.createElement('hr', { className: classes.hr }),
        _react2.default.createElement(_mathInput.HorizontalKeypad, { onClick: this.onClick })
      );
    }
  }]);

  return EditorAndPad;
}(_react2.default.Component);

EditorAndPad.propTypes = {
  latex: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object
};


var styles = function styles(theme) {
  return {
    mathEditor: {
      marginTop: theme.spacing.unit,
      marginBottom: theme.spacing.unit
    },
    hr: {
      padding: 0,
      margin: 0,
      height: '1px',
      border: 'none',
      borderBottom: 'solid 1px ' + theme.palette.primary.main
    },
    mathToolbar: {
      textAlign: 'center',
      '& > .mq-math-mode': {
        border: 'solid 0px lightgrey'
      },
      '& > .mq-focused': {
        outline: 'none',
        boxShadow: 'none',
        border: 'dotted 1px ' + theme.palette.primary.main,
        borderRadius: '0px'
      }
    }
  };
};

exports.default = (0, _styles.withStyles)(styles)(EditorAndPad);