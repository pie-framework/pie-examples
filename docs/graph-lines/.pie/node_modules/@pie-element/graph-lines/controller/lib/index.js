'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.model = model;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _feedback = require('@pie-lib/feedback');

var _charting = require('@pie-lib/charting');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('@pie-element:graph-lines:controller');

var getResponseCorrectness = function getResponseCorrectness(correctResponse, lines, model, partialScores) {
  var allowPartialScores = model.config.allowPartialScoring;
  var correctExpressions = correctResponse.map(function (line) {
    return _charting.lineUtils.expression(line.from, line.to);
  });
  var correctAnswers = 0;

  if (!lines || lines.length === 0) {
    return {
      correctness: 'empty',
      score: 0
    };
  }

  lines.forEach(function (line) {
    var isCorrectAnswer = correctExpressions.find(function (correctExpression) {
      return correctExpression.equals(line.expression || _charting.lineUtils.expression(line.from, line.to));
    });

    if (isCorrectAnswer) {
      correctAnswers += 1;
    }
  });

  if (correctExpressions.length === correctAnswers) {
    return { correctness: 'correct', score: '100%' };
  } else if (correctAnswers === 0) {
    return { correctness: 'incorrect', score: '0%' };
  } else if (allowPartialScores && partialScores && partialScores.length) {
    return {
      correctness: 'partial',
      score: ((partialScores.find(function (partialScore) {
        return partialScore.numberOfCorrect === correctAnswers;
      }) || {}).scorePercentage || 0) + '%'
    };
  }

  return { correctness: 'incorrect', score: '0%' };
};

function model(question, session, env) {
  return new Promise(function (resolve) {
    var model = question.model,
        partialScoring = question.partialScoring;


    var correctResponse = [];

    model.config.lines.forEach(function (line) {
      var lineExpression = _charting.lineUtils.expressionFromDescriptor(line.correctLine);
      var points = _charting.lineUtils.pointsFromExpression(lineExpression);

      correctResponse.push(Object.assign({}, line, points, { expression: lineExpression }));
    });

    var getCorrectness = function getCorrectness() {
      if (env.mode === 'evaluate') {
        if (!session.lines || session.lines.length === 0) {
          return {
            correctness: 'unanswered',
            score: '0%'
          };
        }

        return getResponseCorrectness(correctResponse, session.lines, model, partialScoring);
      }
    };

    var correctInfo = getCorrectness();
    var fb = env.mode === 'evaluate' ? (0, _feedback.getFeedbackForCorrectness)(correctInfo.correctness, question.feedback) : Promise.resolve(undefined);

    fb.then(function (feedback) {
      var base = {
        correctness: correctInfo,
        feedback: feedback,
        disabled: env.mode !== 'gather'
      };

      var out = Object.assign(base, {
        model: model,
        correctResponse: env.mode === 'evaluate' ? correctResponse : undefined
      });
      log('out: ', out);
      resolve(out);
    });
  });
}