'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _configUi = require('@pie-lib/config-ui');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _addLine = require('./add-line');

var _addLine2 = _interopRequireDefault(_addLine);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const styles = theme => ({
  container: {
    marginTop: theme.spacing.unit * 2,
    display: 'flex',
    flexDirection: 'column'
  },
  inputContainer: {
    display: 'flex',
    alignItems: 'center',
    marginTop: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit * 2
  },
  inputItem: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1
  },
  exhibitOnly: {
    flex: 'initial',
    width: '50%'
  },
  input: {
    width: '90%'
  },
  equationLabel: {
    marginRight: theme.spacing.unit
  },
  checkboxContainer: {
    display: 'flex',
    justifyContent: 'space-between'
  },
  optionsCheckbox: {
    flex: 1,
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-between'
  }
});

class GeneralConfigBlock extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.onChange = (name, isBoolean) => event => {
      var _props = this.props;
      const config = _props.config,
            onChange = _props.onChange;

      const newConfig = _extends({}, config);

      newConfig[name] = isBoolean ? event.target.checked : event.target.value;

      onChange(newConfig, name);
    }, this.onLineChange = (lineIndex, name) => event => {
      var _props2 = this.props;
      const config = _props2.config,
            onChange = _props2.onChange;

      const newConfig = _extends({}, config);

      newConfig.lines[lineIndex][name] = event.target.value;

      onChange(newConfig, name);
    }, _temp;
  }

  render() {
    var _props3 = this.props;
    const classes = _props3.classes,
          config = _props3.config,
          multiple = _props3.multiple,
          onAddLine = _props3.onAddLine,
          onMultipleToggle = _props3.onMultipleToggle;


    return React.createElement(
      'div',
      { className: classes.container },
      config.lines.map((line, idx) => React.createElement(
        'div',
        { key: idx, className: classes.inputContainer },
        React.createElement(
          'div',
          { className: classes.inputItem },
          React.createElement(
            _configUi.InputContainer,
            { label: 'Line Label' },
            React.createElement(_Input2.default, {
              type: 'text',
              className: classes.input,
              onChange: this.onLineChange(idx, 'label'),
              value: line.label || '',
              placeholder: 'Enter Value'
            })
          )
        ),
        !config.exhibitOnly && React.createElement(
          'div',
          { className: classes.inputItem },
          React.createElement(
            _Typography2.default,
            { type: 'body1' },
            React.createElement(
              'span',
              { className: classes.equationLabel },
              'y = '
            )
          ),
          React.createElement(
            _configUi.InputContainer,
            { label: 'Correct Line' },
            React.createElement(_Input2.default, {
              type: 'text',
              className: classes.input,
              onChange: this.onLineChange(idx, 'correctLine'),
              value: line.correctLine,
              placeholder: 'Enter Value'
            })
          )
        ),
        React.createElement(
          'div',
          { className: (0, _classnames2.default)(classes.inputItem, { [classes.exhibitOnly]: config.exhibitOnly }) },
          React.createElement(
            _Typography2.default,
            { type: 'body1' },
            React.createElement(
              'span',
              { className: classes.equationLabel },
              'y = '
            )
          ),
          React.createElement(
            _configUi.InputContainer,
            { label: 'Initial View' },
            React.createElement(_Input2.default, {
              type: 'text',
              className: classes.input,
              onChange: this.onLineChange(idx, 'initialView'),
              value: line.initialView,
              placeholder: 'Enter Value'
            })
          )
        )
      )),
      multiple && React.createElement(_addLine2.default, { onAddClick: onAddLine }),
      React.createElement(
        'div',
        { className: classes.checkboxContainer },
        React.createElement(
          'div',
          { className: classes.optionsCheckbox },
          React.createElement(_configUi.InputCheckbox, {
            label: 'Multiple Line Graph',
            checked: multiple,
            onChange: onMultipleToggle })
        ),
        React.createElement(
          'div',
          { className: classes.optionsCheckbox },
          React.createElement(_configUi.InputCheckbox, {
            label: 'Make this graph an exhibit only',
            checked: config.exhibitOnly,
            onChange: this.onChange('exhibitOnly', true) })
        )
      )
    );
  }
}

GeneralConfigBlock.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  config: _propTypes2.default.object.isRequired,
  onAddLine: _propTypes2.default.func,
  onChange: _propTypes2.default.func.isRequired,
  onMultipleToggle: _propTypes2.default.func.isRequired,
  multiple: _propTypes2.default.bool.isRequired
};
exports.default = (0, _styles.withStyles)(styles)(GeneralConfigBlock);