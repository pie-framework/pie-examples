'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _configUi = require('@pie-lib/config-ui');

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _addLine = require('./add-line');

var _addLine2 = _interopRequireDefault(_addLine);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = function styles(theme) {
  return {
    container: {
      marginTop: theme.spacing.unit * 2,
      display: 'flex',
      flexDirection: 'column'
    },
    inputContainer: {
      display: 'flex',
      alignItems: 'center',
      marginTop: theme.spacing.unit * 2,
      marginBottom: theme.spacing.unit * 2
    },
    inputItem: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      flex: 1
    },
    exhibitOnly: {
      flex: 'initial',
      width: '50%'
    },
    input: {
      width: '90%'
    },
    equationLabel: {
      marginRight: theme.spacing.unit
    },
    checkboxContainer: {
      display: 'flex',
      justifyContent: 'space-between'
    },
    optionsCheckbox: {
      flex: 1,
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'space-between'
    }
  };
};

var GeneralConfigBlock = function (_React$Component) {
  _inherits(GeneralConfigBlock, _React$Component);

  function GeneralConfigBlock() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, GeneralConfigBlock);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GeneralConfigBlock.__proto__ || Object.getPrototypeOf(GeneralConfigBlock)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (name, isBoolean) {
      return function (event) {
        var _this$props = _this.props,
            config = _this$props.config,
            onChange = _this$props.onChange;

        var newConfig = _extends({}, config);

        newConfig[name] = isBoolean ? event.target.checked : event.target.value;

        onChange(newConfig, name);
      };
    }, _this.onLineChange = function (lineIndex, name) {
      return function (event) {
        var _this$props2 = _this.props,
            config = _this$props2.config,
            onChange = _this$props2.onChange;

        var newConfig = _extends({}, config);

        newConfig.lines[lineIndex][name] = event.target.value;

        onChange(newConfig, name);
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(GeneralConfigBlock, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          classes = _props.classes,
          config = _props.config,
          multiple = _props.multiple,
          onAddLine = _props.onAddLine,
          onMultipleToggle = _props.onMultipleToggle;


      return React.createElement(
        'div',
        { className: classes.container },
        config.lines.map(function (line, idx) {
          return React.createElement(
            'div',
            { key: idx, className: classes.inputContainer },
            React.createElement(
              'div',
              { className: classes.inputItem },
              React.createElement(
                _configUi.InputContainer,
                { label: 'Line Label' },
                React.createElement(_Input2.default, {
                  type: 'text',
                  className: classes.input,
                  onChange: _this2.onLineChange(idx, 'label'),
                  value: line.label || '',
                  placeholder: 'Enter Value'
                })
              )
            ),
            !config.exhibitOnly && React.createElement(
              'div',
              { className: classes.inputItem },
              React.createElement(
                _Typography2.default,
                { type: 'body1' },
                React.createElement(
                  'span',
                  { className: classes.equationLabel },
                  'y = '
                )
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Correct Line' },
                React.createElement(_Input2.default, {
                  type: 'text',
                  className: classes.input,
                  onChange: _this2.onLineChange(idx, 'correctLine'),
                  value: line.correctLine,
                  placeholder: 'Enter Value'
                })
              )
            ),
            React.createElement(
              'div',
              { className: (0, _classnames3.default)(classes.inputItem, _defineProperty({}, classes.exhibitOnly, config.exhibitOnly)) },
              React.createElement(
                _Typography2.default,
                { type: 'body1' },
                React.createElement(
                  'span',
                  { className: classes.equationLabel },
                  'y = '
                )
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Initial View' },
                React.createElement(_Input2.default, {
                  type: 'text',
                  className: classes.input,
                  onChange: _this2.onLineChange(idx, 'initialView'),
                  value: line.initialView,
                  placeholder: 'Enter Value'
                })
              )
            )
          );
        }),
        multiple && React.createElement(_addLine2.default, { onAddClick: onAddLine }),
        React.createElement(
          'div',
          { className: classes.checkboxContainer },
          React.createElement(
            'div',
            { className: classes.optionsCheckbox },
            React.createElement(_configUi.InputCheckbox, {
              label: 'Multiple Line Graph',
              checked: multiple,
              onChange: onMultipleToggle })
          ),
          React.createElement(
            'div',
            { className: classes.optionsCheckbox },
            React.createElement(_configUi.InputCheckbox, {
              label: 'Make this graph an exhibit only',
              checked: config.exhibitOnly,
              onChange: this.onChange('exhibitOnly', true) })
          )
        )
      );
    }
  }]);

  return GeneralConfigBlock;
}(React.Component);

GeneralConfigBlock.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  config: _propTypes2.default.object.isRequired,
  onAddLine: _propTypes2.default.func,
  onChange: _propTypes2.default.func.isRequired,
  onMultipleToggle: _propTypes2.default.func.isRequired,
  multiple: _propTypes2.default.bool.isRequired
};
exports.default = (0, _styles.withStyles)(styles)(GeneralConfigBlock);