'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('@material-ui/core/styles');

var _chartingConfig = require('@pie-lib/charting-config');

var _chartingConfig2 = _interopRequireDefault(_chartingConfig);

var _configUi = require('@pie-lib/config-ui');

var _scoringConfig = require('@pie-lib/scoring-config');

var _scoringConfig2 = _interopRequireDefault(_scoringConfig);

var _reactSwipeableViews = require('react-swipeable-views');

var _reactSwipeableViews2 = _interopRequireDefault(_reactSwipeableViews);

var _Tabs = require('@material-ui/core/Tabs');

var _Tabs2 = _interopRequireDefault(_Tabs);

var _Tab = require('@material-ui/core/Tab');

var _Tab2 = _interopRequireDefault(_Tab);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _generalConfigBlock = require('./general-config-block');

var _generalConfigBlock2 = _interopRequireDefault(_generalConfigBlock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:graph-lines:configure');

const styles = theme => ({
  title: {
    fontSize: '1.1rem',
    display: 'block',
    marginTop: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit
  },
  content: {
    marginTop: theme.spacing.unit * 2
  }
});

class Configure extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.onTabChange = (event, value) => {
      this.setState({ activeTab: value });
    };

    this.onChangeTabIndex = index => {
      this.setState({ activeTab: index });
    };

    this.resetToDefaults = () => {
      this.props.onModelChanged(JSON.parse(JSON.stringify(this.defaults)));
    };

    this.onChange = config => {
      this.props.model.model.config = _extends({}, config);

      this.props.onModelChanged(this.props.model);
    };

    this.onFeedbackChange = feedback => {
      var _props = this.props;
      const model = _props.model,
            onModelChanged = _props.onModelChanged;

      model.feedback = feedback;
      onModelChanged(model);
    };

    this.onAddLine = () => {
      const model = this.props.model;

      const newConfig = _extends({}, model.model.config, {
        lines: model.model.config.lines.concat({ initialView: '', correctLine: '', label: '' })
      });

      this.onChange(newConfig);
    };

    this.onMultipleToggle = event => {
      var _props2 = this.props;
      const model = _props2.model,
            onModelChanged = _props2.onModelChanged;


      model.multiple = event.target.checked;

      if (!model.multiple && model.model.config.lines.length > 1) {
        model.model.config.lines.length = 1;
      }

      onModelChanged(model);
    };

    this.onPartialScoringChange = partialScoring => {
      this.props.model.partialScoring = partialScoring.map(partialScore => ({
        numberOfCorrect: partialScore.numberOfCorrect || '',
        scorePercentage: partialScore.scorePercentage || ''
      }));

      this.props.onModelChanged(this.props.model);
    };

    this.defaults = JSON.parse(JSON.stringify(props.model));

    this.state = {
      activeTab: 0
    };
  }

  render() {
    var _props3 = this.props;
    const classes = _props3.classes,
          model = _props3.model;

    const config = model.model.config;

    log('[render] model', model);

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Tabs2.default,
        {
          value: this.state.activeTab,
          onChange: this.onTabChange,
          indicatorColor: 'primary',
          textColor: 'primary',
          fullWidth: true
        },
        _react2.default.createElement(_Tab2.default, { label: 'Design' }),
        _react2.default.createElement(_Tab2.default, { disabled: !model.multiple, label: 'Scoring' })
      ),
      _react2.default.createElement(
        _reactSwipeableViews2.default,
        {
          axis: 'x',
          index: this.state.activeTab,
          onChangeIndex: this.onChangeTabIndex
        },
        _react2.default.createElement(
          'div',
          { className: classes.tab },
          _react2.default.createElement(
            'div',
            { className: classes.content },
            _react2.default.createElement(
              _Typography2.default,
              { component: 'div', type: 'body1' },
              _react2.default.createElement(
                'span',
                null,
                'This interaction asks a student to draw a line that meets specific criteria. The student will draw the line by clicking on two points on the graph.'
              ),
              _react2.default.createElement(
                'h2',
                null,
                'Lines'
              ),
              _react2.default.createElement(
                'span',
                null,
                'Line equations must be in y=mx+b form. Only whole number coordinates can be plotted.'
              )
            ),
            _react2.default.createElement(_generalConfigBlock2.default, {
              onMultipleToggle: this.onMultipleToggle,
              onAddLine: this.onAddLine,
              multiple: model.multiple,
              config: config,
              onChange: this.onChange
            }),
            _react2.default.createElement(_chartingConfig2.default, {
              config: config,
              onChange: this.onChange,
              resetToDefaults: this.resetToDefaults
            }),
            _react2.default.createElement(_configUi.FeedbackConfig, {
              allowPartial: false,
              feedback: model.feedback,
              onChange: this.onFeedbackChange
            })
          )
        ),
        _react2.default.createElement(
          'div',
          { className: classes.tab },
          _react2.default.createElement(_scoringConfig2.default, {
            numberOfCorrectResponses: config.lines.length,
            partialScoring: model.partialScoring,
            onChange: this.onPartialScoringChange
          })
        )
      )
    );
  }
}

Configure.propTypes = {
  onModelChanged: _propTypes2.default.func,
  classes: _propTypes2.default.object,
  model: _propTypes2.default.object.isRequired
};
const ConfigureMain = (0, _styles.withStyles)(styles)(Configure);

class StateWrapper extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.state = {
      model: props.model
    };

    this.onModelChanged = m => {
      this.setState({ model: m }, () => {
        this.props.onModelChanged(this.state.model);
      });
    };
  }

  render() {
    const model = this.state.model;

    return _react2.default.createElement(ConfigureMain, { model: model, onModelChanged: this.onModelChanged });
  }
}

StateWrapper.propTypes = {
  model: _propTypes2.default.any,
  onModelChanged: _propTypes2.default.func
};
exports.default = StateWrapper;