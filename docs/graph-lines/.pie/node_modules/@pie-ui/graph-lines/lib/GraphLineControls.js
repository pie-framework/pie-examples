'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphLineControls = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _controls = require('./controls');

var _controls2 = _interopRequireDefault(_controls);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _configUi = require('@pie-lib/config-ui');

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _styles = require('@material-ui/core/styles');

var _charting = require('@pie-lib/charting');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GraphLineControls extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.onLineLabelChange = line => event => {
      const newLine = _extends({}, line, { label: event.target.value });

      const newLines = this.props.lines.map(propLine => _charting.lineUtils.linesEqual(propLine, line) ? newLine : propLine);
      this.props.updateLines(newLines);
    }, this.onChange = line => event => {
      var _event$target$name$sp = event.target.name.split('.'),
          _event$target$name$sp2 = _slicedToArray(_event$target$name$sp, 2);

      const point = _event$target$name$sp2[0],
            coordinate = _event$target$name$sp2[1];

      const newLine = _extends({}, line);
      const newValue = parseInt(event.target.value, 10);

      if (!isNaN(newValue)) {
        newLine[point][coordinate] = newValue;

        const newLines = this.props.lines.map(propLine => _charting.lineUtils.linesEqual(propLine, line) ? newLine : propLine);
        this.props.updateLines(newLines);
      }
    }, this.deleteLine = line => () => {
      this.props.onDeleteLine(line);
    }, _temp;
  }

  render() {
    var _props = this.props;
    const classes = _props.classes,
          lines = _props.lines,
          model = _props.model;

    const disabled = model.exhibitOnly || model.disabled;

    return _react2.default.createElement(
      'div',
      { className: classes.controlsContainer },
      lines.length === 0 && _react2.default.createElement(
        _Typography2.default,
        { component: 'div', className: classes.empty },
        'There are currently no lines on the chart. Add one by clicking on the chart.'
      ),
      lines.map((line, idx) => {
        const lineOnChange = this.onChange(line);
        const onLineLabelChange = this.onLineLabelChange(line);

        return _react2.default.createElement(
          'div',
          { key: idx, className: classes.inputsContainer },
          _react2.default.createElement(
            'div',
            { style: { display: 'flex' } },
            _react2.default.createElement(
              'div',
              { className: classes.inputItem },
              _react2.default.createElement(
                _configUi.InputContainer,
                { label: 'Label' },
                _react2.default.createElement(_Input2.default, {
                  disabled: disabled,
                  type: 'text',
                  name: 'label',
                  className: classes.input,
                  onChange: onLineLabelChange,
                  value: line.label || '',
                  placeholder: 'Enter Value'
                })
              )
            ),
            _react2.default.createElement(
              'div',
              { className: classes.inputItem },
              _react2.default.createElement(
                _Typography2.default,
                { type: 'body1', className: classes.labelContainer },
                _react2.default.createElement(
                  'span',
                  { className: classes.label },
                  'Point A: '
                )
              ),
              _react2.default.createElement(
                _configUi.InputContainer,
                { label: 'X' },
                _react2.default.createElement(_Input2.default, {
                  disabled: disabled,
                  inputProps: {
                    min: model.domain.min,
                    max: model.domain.max
                  },
                  type: 'number',
                  name: 'from.x',
                  className: classes.input,
                  onChange: lineOnChange,
                  value: line.from.x,
                  placeholder: 'Enter Value'
                })
              )
            ),
            _react2.default.createElement(
              'div',
              { className: classes.inputItem },
              _react2.default.createElement(
                _configUi.InputContainer,
                { label: 'Y' },
                _react2.default.createElement(_Input2.default, {
                  disabled: disabled,
                  inputProps: {
                    min: model.range.min,
                    max: model.range.max
                  },
                  name: 'from.y',
                  type: 'number',
                  className: classes.input,
                  onChange: lineOnChange,
                  value: line.from.y,
                  placeholder: 'Enter Value'
                })
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { className: classes.inputContainer },
            _react2.default.createElement(
              'div',
              { className: classes.inputItem },
              _react2.default.createElement(
                _Typography2.default,
                { type: 'body1', className: classes.labelContainer },
                _react2.default.createElement(
                  'span',
                  { className: classes.label },
                  'Point B: '
                )
              ),
              _react2.default.createElement(
                _configUi.InputContainer,
                { label: 'X' },
                _react2.default.createElement(_Input2.default, {
                  disabled: disabled,
                  inputProps: {
                    min: model.domain.min,
                    max: model.domain.max
                  },
                  name: 'to.x',
                  type: 'number',
                  className: classes.input,
                  onChange: lineOnChange,
                  value: line.to.x,
                  placeholder: 'Enter Value'
                })
              )
            ),
            _react2.default.createElement(
              'div',
              { className: classes.inputItem },
              _react2.default.createElement(
                _configUi.InputContainer,
                { label: 'Y' },
                _react2.default.createElement(_Input2.default, {
                  disabled: disabled,
                  inputProps: {
                    min: model.range.min,
                    max: model.range.max
                  },
                  name: 'to.y',
                  type: 'number',
                  className: classes.input,
                  onChange: lineOnChange,
                  value: line.to.y,
                  placeholder: 'Enter Value'
                })
              ),
              _react2.default.createElement(_controls2.default, {
                iconOnly: true,
                disabled: disabled,
                onDeleteClick: this.deleteLine(line)
              })
            )
          )
        );
      })
    );
  }
}

exports.GraphLineControls = GraphLineControls;
GraphLineControls.propTypes = {
  onDeleteLine: _propTypes2.default.func.isRequired,
  updateLines: _propTypes2.default.func.isRequired,
  classes: _propTypes2.default.object.isRequired,
  lines: _propTypes2.default.array.isRequired,
  model: _propTypes2.default.object.isRequired
};
const styles = theme => ({
  empty: {
    margin: theme.spacing.unit * 2
  },
  controlsContainer: {
    width: '90%',
    marginLeft: 'auto',
    marginRight: 'auto',
    marginTop: theme.spacing.unit,
    marginBottom: theme.spacing.unit
  },
  input: {
    display: 'flex',
    maxWidth: '80px'
  },
  labelContainer: {
    display: 'flex',
    flex: 1,
    minWidth: '60px'
  },
  label: {
    marginRight: theme.spacing.unit
  },
  inputsContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: theme.spacing.unit * 2,
    marginBottom: theme.spacing.unit * 2
  },
  inputItem: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1
  },
  inputContainer: {
    marginLeft: '10px',
    display: 'flex'
  }
});

exports.default = (0, _styles.withStyles)(styles)(GraphLineControls);