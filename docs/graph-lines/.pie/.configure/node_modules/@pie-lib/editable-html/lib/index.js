'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Editor = exports.valueToHtml = exports.htmlToValue = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _editor = require('./editor');

var _editor2 = _interopRequireDefault(_editor);

var _serialization = require('./serialization');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Export lower level Editor and serialization functions.
 */
exports.htmlToValue = _serialization.htmlToValue;
exports.valueToHtml = _serialization.valueToHtml;
exports.Editor = _editor2.default;

/**
 * Wrapper around the editor that exposes a `markup` and `onChange(markup:string)` api.
 * Because of the mismatch between the markup and the `Value` we need to convert the incoming markup to a value and compare it.
 * TODO: This is an interim fix, we'll need to strip back `Editor` and look how best to maintain the `markup` api whilst avoiding the serialization mismatch.
 * We should be making better use of schemas w/ normalize.
 */

var EditableHtml = function (_React$Component) {
  _inherits(EditableHtml, _React$Component);

  function EditableHtml(props) {
    _classCallCheck(this, EditableHtml);

    var _this = _possibleConstructorReturn(this, (EditableHtml.__proto__ || Object.getPrototypeOf(EditableHtml)).call(this, props));

    _this.onChange = function (value) {
      var html = (0, _serialization.valueToHtml)(value);

      if (html !== _this.props.markup) {
        _this.props.onChange(html);
      }
    };

    var v = (0, _serialization.htmlToValue)(props.markup);
    var mu = (0, _serialization.valueToHtml)(v);

    if (mu !== props.markup) {
      props.onChange(mu);
    }

    _this.state = {
      value: v
    };
    return _this;
  }

  _createClass(EditableHtml, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.markup === this.props.markup) {
        return;
      }

      var v = (0, _serialization.htmlToValue)(props.markup);
      var current = (0, _serialization.htmlToValue)(this.props.markup);

      if (!v.equals(current)) {
        this.setState({ value: v });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var value = this.state.value;

      var props = _extends({}, this.props, {
        markup: null,
        value: value,
        onChange: this.onChange
      });
      return _react2.default.createElement(_editor2.default, props);
    }
  }]);

  return EditableHtml;
}(_react2.default.Component);

EditableHtml.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  markup: _propTypes2.default.string.isRequired
};
exports.default = EditableHtml;