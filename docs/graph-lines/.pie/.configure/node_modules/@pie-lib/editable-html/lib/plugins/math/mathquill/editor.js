'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MQ = void 0;
if (typeof window !== 'undefined') {
  var MathQuill = require('mathquill');
  MQ = MathQuill.getInterface(2);
}

var log = (0, _debug2.default)('editable-html:plugins:math:mathquill:editor');

var Editor = function (_React$Component) {
  _inherits(Editor, _React$Component);

  function Editor() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Editor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Editor.__proto__ || Object.getPrototypeOf(Editor)).call.apply(_ref, [this].concat(args))), _this), _this.latexIsEqual = function (a, b) {
      if (!a && !b) {
        return true;
      }
      if (a && !b || !a && b) {
        return false;
      }
      return a.trim().replace(/\s/g, '') === b.trim().replace(/\s/, '');
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Editor, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!MQ) {
        throw new Error('MQ is not defined - but component has mounted?');
      }
      this.mathField = MQ.MathField(this.input, {
        handlers: {
          edit: this.onInputEdit.bind(this)
        }
      });
      this.mathField.latex(this.props.latex);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      log('[componentDidUpdate] latex: ', this.props.latex);
      if (this.mathField) {
        this.mathField.latex(this.props.latex);
      }
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.mathField.latex('');
      return '';
    }
  }, {
    key: 'blur',
    value: function blur() {
      log('blur mathfield');
      this.mathField.blur();
    }
  }, {
    key: 'focus',
    value: function focus() {
      log('focus mathfield...');
      this.mathField.focus();
    }
  }, {
    key: 'command',
    value: function command(v) {
      this.mathField.cmd(v);
      this.mathField.focus();
      return this.mathField.latex();
    }
  }, {
    key: 'keystroke',
    value: function keystroke(v) {
      this.mathField.keystroke(v);
      this.mathField.focus();
      return this.mathField.latex();
    }
  }, {
    key: 'write',
    value: function write(v) {
      this.mathField.write(v);
      this.mathField.focus();
      return this.mathField.latex();
    }
  }, {
    key: 'onInputEdit',
    value: function onInputEdit(event) {
      log('[onInputEdit] ...', event);

      if (!this.mathField) {
        return;
      }
      if (this.latexIsEqual(this.mathField.latex(), this.props.latex)) {
        return;
      }
      this.props.onChange(this.mathField.latex());
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      log('[shouldComponentUpdate] nextProps.latex: ', nextProps.latex, 'current: ', this.mathField.latex());
      var isEqual = this.latexIsEqual(nextProps.latex, this.mathField.latex());
      log('[shouldComponentUpdate] isEqual? ', isEqual);
      return !isEqual;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      log('[render] this.props.latex:', this.props.latex);
      var _props = this.props,
          onClick = _props.onClick,
          onFocus = _props.onFocus,
          onBlur = _props.onBlur,
          className = _props.className;


      return _react2.default.createElement('span', {
        onClick: onClick,
        onFocus: onFocus,
        onBlur: onBlur,
        className: className,
        ref: function ref(r) {
          return _this2.input = r;
        }
      });
    }
  }]);

  return Editor;
}(_react2.default.Component);

Editor.propTypes = {
  onClick: _propTypes2.default.func,
  onChange: _propTypes2.default.func.isRequired,
  latex: _propTypes2.default.string.isRequired,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  className: _propTypes2.default.string
};
exports.default = Editor;