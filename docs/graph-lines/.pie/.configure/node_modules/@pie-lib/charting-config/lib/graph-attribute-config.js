'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _configUi = require('@pie-lib/config-ui');

var _box = require('./box');

var _box2 = _interopRequireDefault(_box);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = function styles() {
  return {
    optionsColumnContainer: {
      display: 'flex',
      justifyContent: 'space-between'
    },
    optionsColumn: {
      display: 'flex',
      flex: 1,
      flexDirection: 'column',
      flexWrap: 'wrap',
      justifyContent: 'flex-start'
    },
    attributeInput: {
      width: '90%'
    },
    graphAttributesContainer: {
      display: 'flex',
      flexDirection: 'column'
    }
  };
};

var GraphAttributeConfig = function (_React$Component) {
  _inherits(GraphAttributeConfig, _React$Component);

  function GraphAttributeConfig() {
    _classCallCheck(this, GraphAttributeConfig);

    return _possibleConstructorReturn(this, (GraphAttributeConfig.__proto__ || Object.getPrototypeOf(GraphAttributeConfig)).apply(this, arguments));
  }

  _createClass(GraphAttributeConfig, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          classes = _props.classes,
          config = _props.config,
          onChange = _props.onChange;


      return React.createElement(
        _box2.default,
        null,
        React.createElement(
          'h2',
          null,
          'Graph Attributes'
        ),
        React.createElement(
          _Typography2.default,
          { type: 'body1' },
          React.createElement(
            'span',
            null,
            'Use this section to setup the graph area. Note: Minimum value may not be greater than 0. Maximum value may not be less than 0. Minimum and maximum values can not be equal.'
          )
        ),
        React.createElement(
          'h3',
          null,
          'Domain (X)'
        ),
        React.createElement(
          'div',
          { className: classes.graphAttributesContainer },
          React.createElement(
            'div',
            { className: classes.optionsColumnContainer },
            React.createElement(
              'div',
              { className: classes.optionsColumn },
              React.createElement(
                _configUi.InputContainer,
                { label: 'Minimum Value' },
                React.createElement(_Input2.default, {
                  inputProps: {
                    max: parseInt(config.domainMax, 10) - 1
                  },
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('domainMin'),
                  value: config.domainMin,
                  placeholder: 'Enter Minimum'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Tick Value' },
                React.createElement(_Input2.default, {
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('domainStepValue'),
                  value: config.domainStepValue,
                  placeholder: 'Enter Tick'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Tick Label Frequency' },
                React.createElement(_Input2.default, {
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('domainLabelFrequency'),
                  value: config.domainLabelFrequency,
                  placeholder: 'Enter Tick Label Frequency'
                })
              )
            ),
            React.createElement(
              'div',
              { className: classes.optionsColumn },
              React.createElement(
                _configUi.InputContainer,
                { label: 'Maximum Value' },
                React.createElement(_Input2.default, {
                  inputProps: {
                    min: parseInt(config.domainMin, 10) + 1
                  },
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('domainMax'),
                  value: config.domainMax,
                  placeholder: 'Enter Maximum'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Snap Value' },
                React.createElement(_Input2.default, {
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('domainSnapValue'),
                  value: config.domainSnapValue,
                  placeholder: 'Enter Snap'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Padding (%)' },
                React.createElement(_Input2.default, {
                  inputProps: {
                    step: 25
                  },
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('domainGraphPadding'),
                  value: config.domainGraphPadding,
                  placeholder: 'Enter Padding'
                })
              )
            )
          )
        ),
        React.createElement(
          'h3',
          null,
          'Range (Y)'
        ),
        React.createElement(
          'div',
          { className: classes.graphAttributesContainer },
          React.createElement(
            'div',
            { className: classes.optionsColumnContainer },
            React.createElement(
              'div',
              { className: classes.optionsColumn },
              React.createElement(
                _configUi.InputContainer,
                { label: 'Minimum Value' },
                React.createElement(_Input2.default, {
                  inputProps: {
                    max: parseInt(config.rangeMax, 10) - 1
                  },
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('rangeMin'),
                  value: config.rangeMin,
                  placeholder: 'Enter Minimum'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Tick Value' },
                React.createElement(_Input2.default, {
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('rangeStepValue'),
                  value: config.rangeStepValue,
                  placeholder: 'Enter Tick'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Tick Label Frequency' },
                React.createElement(_Input2.default, {
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('rangeLabelFrequency'),
                  value: config.rangeLabelFrequency,
                  placeholder: 'Enter Tick Label Frequency'
                })
              )
            ),
            React.createElement(
              'div',
              { className: classes.optionsColumn },
              React.createElement(
                _configUi.InputContainer,
                { label: 'Maximum Value' },
                React.createElement(_Input2.default, {
                  inputProps: {
                    min: parseInt(config.rangeMin, 10) + 1
                  },
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('rangeMax'),
                  value: config.rangeMax,
                  placeholder: 'Enter Maximum'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Snap Value' },
                React.createElement(_Input2.default, {
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('rangeSnapValue'),
                  value: config.rangeSnapValue,
                  placeholder: 'Enter Snap'
                })
              ),
              React.createElement(
                _configUi.InputContainer,
                { label: 'Padding (%)' },
                React.createElement(_Input2.default, {
                  inputProps: {
                    step: 25
                  },
                  className: classes.attributeInput,
                  type: 'number',
                  onChange: onChange('rangeGraphPadding'),
                  value: config.rangeGraphPadding,
                  placeholder: 'Enter Padding'
                })
              )
            )
          )
        )
      );
    }
  }]);

  return GraphAttributeConfig;
}(React.Component);

GraphAttributeConfig.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  config: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired
};
exports.default = (0, _styles.withStyles)(styles)(GraphAttributeConfig);