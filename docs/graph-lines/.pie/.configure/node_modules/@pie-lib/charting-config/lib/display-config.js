'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _configUi = require('@pie-lib/config-ui');

var _box = require('./box');

var _box2 = _interopRequireDefault(_box);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = function styles(theme) {
  return {
    optionsCheckbox: {
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'space-between'
    },
    displayControlsContainer: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      marginBottom: theme.spacing.unit
    },
    displayOptionsContainer: {
      display: 'inline-block',
      marginTop: theme.spacing.unit,
      width: '50%'
    },
    displayInput: {
      width: '90%'
    }
  };
};

var DisplayConfig = function (_React$Component) {
  _inherits(DisplayConfig, _React$Component);

  function DisplayConfig() {
    _classCallCheck(this, DisplayConfig);

    return _possibleConstructorReturn(this, (DisplayConfig.__proto__ || Object.getPrototypeOf(DisplayConfig)).apply(this, arguments));
  }

  _createClass(DisplayConfig, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          classes = _props.classes,
          config = _props.config,
          onChange = _props.onChange,
          resetToDefaults = _props.resetToDefaults;


      return React.createElement(
        _box2.default,
        null,
        React.createElement(
          'h2',
          null,
          'Display'
        ),
        React.createElement(
          'h4',
          null,
          'Graph Labels'
        ),
        React.createElement(
          'div',
          { className: classes.displayControlsContainer },
          React.createElement(
            _configUi.InputContainer,
            { label: 'Top' },
            React.createElement(_Input2.default, {
              className: classes.displayInput,
              type: 'text',
              onChange: onChange('graphTitle', true),
              value: config.graphTitle,
              placeholder: 'Enter Value'
            })
          ),
          React.createElement(
            _configUi.InputContainer,
            { label: 'Left' },
            React.createElement(_Input2.default, {
              className: classes.displayInput,
              type: 'text',
              onChange: onChange('domainLabel', true),
              value: config.domainLabel,
              placeholder: 'Enter Value'
            })
          ),
          React.createElement(
            _configUi.InputContainer,
            { label: 'Bottom' },
            React.createElement(_Input2.default, {
              className: classes.displayInput,
              type: 'text',
              onChange: onChange('rangeLabel', true),
              value: config.rangeLabel,
              placeholder: 'Enter Value'
            })
          )
        ),
        React.createElement(
          'div',
          { className: classes.displayControlsContainer },
          React.createElement(
            _configUi.InputContainer,
            { label: 'Width' },
            React.createElement(_Input2.default, {
              inputProps: {
                step: 10,
                min: 250,
                max: 1000
              },
              className: classes.displayInput,
              type: 'number',
              onChange: onChange('graphWidth'),
              value: config.graphWidth,
              placeholder: 'Enter Value'
            })
          ),
          React.createElement(
            _configUi.InputContainer,
            { label: 'Height' },
            React.createElement(_Input2.default, {
              inputProps: {
                step: 10,
                min: 250,
                max: 1000
              },
              className: classes.displayInput,
              type: 'number',
              onChange: onChange('graphHeight'),
              value: config.graphHeight,
              placeholder: 'Enter Value'
            })
          )
        ),
        React.createElement(
          'div',
          { style: { display: 'flex' } },
          React.createElement(
            'div',
            { className: classes.displayOptionsContainer },
            React.createElement(
              'div',
              { className: classes.optionsCheckbox },
              React.createElement(_configUi.InputCheckbox, {
                label: 'Show Point Labels',
                checked: config.showPointLabels,
                onChange: onChange('showPointLabels', true, true)
              })
            ),
            React.createElement(
              'div',
              { className: classes.optionsCheckbox },
              React.createElement(_configUi.InputCheckbox, {
                label: 'Show Axis Labels',
                checked: config.showAxisLabels,
                onChange: onChange('showAxisLabels', true, true)
              })
            )
          ),
          React.createElement(
            'div',
            { className: classes.displayOptionsContainer },
            React.createElement(
              'div',
              { className: classes.optionsCheckbox },
              React.createElement(_configUi.InputCheckbox, {
                label: 'Show Point Coordinates',
                checked: config.showCoordinates,
                onChange: onChange('showCoordinates', true, true)
              })
            )
          )
        ),
        React.createElement(
          _Button2.default,
          { onClick: resetToDefaults },
          React.createElement(
            'i',
            null,
            'Reset to default values'
          )
        )
      );
    }
  }]);

  return DisplayConfig;
}(React.Component);

DisplayConfig.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  config: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  resetToDefaults: _propTypes2.default.func.isRequired
};
exports.default = (0, _styles.withStyles)(styles)(DisplayConfig);