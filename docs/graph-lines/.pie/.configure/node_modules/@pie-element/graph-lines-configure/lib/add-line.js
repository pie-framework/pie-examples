'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddLineButton = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _styles = require('@material-ui/core/styles');

var _Add = require('@material-ui/icons/Add');

var _Add2 = _interopRequireDefault(_Add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AddLineButton = exports.AddLineButton = function (_React$Component) {
  _inherits(AddLineButton, _React$Component);

  function AddLineButton() {
    _classCallCheck(this, AddLineButton);

    return _possibleConstructorReturn(this, (AddLineButton.__proto__ || Object.getPrototypeOf(AddLineButton)).apply(this, arguments));
  }

  _createClass(AddLineButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          classes = _props.classes,
          onAddClick = _props.onAddClick;


      return _react2.default.createElement(
        _Button2.default,
        { className: classes.button, disabled: false, onClick: onAddClick },
        _react2.default.createElement(_Add2.default, null),
        'Add Another Line'
      );
    }
  }]);

  return AddLineButton;
}(_react2.default.Component);

AddLineButton.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  onAddClick: _propTypes2.default.func.isRequired
};


var styles = function styles(theme) {
  return {
    button: {
      display: 'flex',
      alignSelf: 'flex-start',
      margin: 0,
      marginBottom: theme.spacing.unit * 2
    }
  };
};

exports.default = (0, _styles.withStyles)(styles)(AddLineButton);