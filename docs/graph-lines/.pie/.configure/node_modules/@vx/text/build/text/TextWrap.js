'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var svgNS = "http://www.w3.org/2000/svg";

/**
 * TODO: this is horrible and doesn't work. figure this out.
 */

var TextWrap = function (_React$Component) {
  _inherits(TextWrap, _React$Component);

  function TextWrap() {
    _classCallCheck(this, TextWrap);

    return _possibleConstructorReturn(this, (TextWrap.__proto__ || Object.getPrototypeOf(TextWrap)).apply(this, arguments));
  }

  _createClass(TextWrap, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          text = _props.text,
          width = _props.width,
          _props$y = _props.y,
          y = _props$y === undefined ? 1 : _props$y,
          _props$x = _props.x,
          x = _props$x === undefined ? 1 : _props$x,
          _props$dy = _props.dy,
          dy = _props$dy === undefined ? 0 : _props$dy,
          lineHeight = _props.lineHeight;


      var lineNumber = 0;
      var line = [];
      var word = void 0;
      var tspan = this.tspan;

      var words = text.split(/\s+/).reverse();

      while (word = words.pop()) {
        line.push(word);
        var newText = line.join(" ");
        tspan.textContent = newText;

        if (tspan.getComputedTextLength() > width) {
          line.pop();
          newText = line.join(" ");
          tspan.textContent = newText;

          line = [word];

          var newLine = document.createElementNS(svgNS, 'tspan');
          newLine.setAttributeNS(svgNS, 'x', x);
          newLine.setAttributeNS(svgNS, 'y', y);
          newLine.setAttributeNS(svgNS, 'dy', ++lineNumber * lineHeight + 'em');
          newLine.textContent = ' ' + word;

          this.tspan.parentNode.append(newLine);
          tspan = newLine;
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          text = _props2.text,
          x = _props2.x,
          y = _props2.y,
          dx = _props2.dx,
          dy = _props2.dy,
          lineHeight = _props2.lineHeight,
          width = _props2.width,
          className = _props2.className;

      return _react2.default.createElement(
        'text',
        {
          className: (0, _classnames2.default)('vx-text-wrap', className),
          x: x,
          y: y,
          dx: dx,
          dy: dy
        },
        _react2.default.createElement('tspan', {
          ref: function ref(c) {
            _this2.tspan = c;
          },
          x: x,
          y: y,
          dy: dy
        })
      );
    }
  }]);

  return TextWrap;
}(_react2.default.Component);

exports.default = TextWrap;


TextWrap.defaultProps = {
  lineHeight: 1.1,
  width: 140,
  x: 0,
  y: 0,
  dx: 0,
  dy: 0
};