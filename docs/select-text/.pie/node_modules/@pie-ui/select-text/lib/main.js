'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Main = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _textSelect = require('@pie-lib/text-select');

var _correctAnswerToggle = require('@pie-lib/correct-answer-toggle');

var _correctAnswerToggle2 = _interopRequireDefault(_correctAnswerToggle);

var _renderUi = require('@pie-lib/render-ui');

var _styles = require('@material-ui/core/styles');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-ui:select-text');

const Types = {
  model: _propTypes2.default.object,
  session: _propTypes2.default.object,
  onSelectionChange: _propTypes2.default.func.isRequired
};

class Main extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.toggleShowCorrect = () => {
      this.setState({ showCorrectAnswer: !this.state.showCorrectAnswer });
    };

    this.correctAnswer = () => {
      const model = this.props.model;

      return model.tokens.filter(t => t.correct);
    };

    this.state = {
      showCorrectAnswer: false
    };
  }

  render() {
    var _props = this.props;
    const model = _props.model,
          session = _props.session,
          onSelectionChange = _props.onSelectionChange,
          classes = _props.classes;
    const showCorrectAnswer = this.state.showCorrectAnswer;


    const selectedTokens = showCorrectAnswer ? this.correctAnswer() : session.selectedTokens;

    log('[render] selectedTokens:', selectedTokens);

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_correctAnswerToggle2.default, {
        show: model.disabled && model.incorrect,
        toggled: showCorrectAnswer,
        onToggle: this.toggleShowCorrect
      }),
      _react2.default.createElement(_textSelect.TextSelect, {
        className: classes.textSelect,
        disabled: model.disabled,
        text: model.text,
        tokens: model.tokens,
        selectedTokens: selectedTokens,
        onChange: onSelectionChange,
        highlightChoices: model.highlightChoices,
        maxNoOfSelections: model.maxSelections
      }),
      model.correctness && model.feedback && !showCorrectAnswer && _react2.default.createElement(_renderUi.Feedback, {
        correctness: model.correctness,
        feedback: model.feedback
      })
    );
  }
}

exports.Main = Main;
Main.propTypes = _extends({}, Types, { classes: _propTypes2.default.object.isRequired });
Main.defaultProps = {};
const StyledMain = (0, _styles.withStyles)(theme => ({
  textSelect: {
    marginBottom: theme.spacing.unit,
    marginTop: theme.spacing.unit
  }
}))(Main);

class Stateful extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.change = selectedTokens => {
      const session = _extends({}, this.state.session, { selectedTokens });
      this.setState({ session }, () => {
        this.props.onSelectionChange(this.state.session.selectedTokens);
      });
    };

    this.state = {
      model: props.model,
      session: props.session
    };
  }

  componentWillReceiveProps(nextProps) {
    this.setState({ model: nextProps.model, session: nextProps.session });
  }

  render() {
    var _state = this.state;
    const model = _state.model,
          session = _state.session;

    return _react2.default.createElement(StyledMain, {
      model: model,
      session: session,
      onSelectionChange: this.change
    });
  }
}
exports.default = Stateful;
Stateful.propTypes = Types;