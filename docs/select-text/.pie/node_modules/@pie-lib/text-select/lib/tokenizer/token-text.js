'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _builder = require('./builder');

var _yellow = require('@material-ui/core/colors/yellow');

var _yellow2 = _interopRequireDefault(_yellow);

var _green = require('@material-ui/core/colors/green');

var _green2 = _interopRequireDefault(_green);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _selectionUtils = require('./selection-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('@pie-lib:text-select:token-text');

var Text = exports.Text = (0, _styles.withStyles)(function () {
  return {
    predefined: {
      cursor: 'pointer',
      backgroundColor: _yellow2.default[100],
      border: 'dashed 0px ' + _yellow2.default[700]
    },
    correct: {
      backgroundColor: _green2.default[500]
    }
  };
})(function (_ref) {
  var text = _ref.text,
      predefined = _ref.predefined,
      classes = _ref.classes,
      onClick = _ref.onClick,
      correct = _ref.correct;

  if (predefined) {
    var className = (0, _classnames2.default)(classes.predefined, correct && classes.correct);
    return _react2.default.createElement(
      'span',
      { onClick: onClick, className: className },
      text
    );
  } else {
    return text;
  }
});

var TokenText = function (_React$Component) {
  _inherits(TokenText, _React$Component);

  function TokenText() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, TokenText);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = TokenText.__proto__ || Object.getPrototypeOf(TokenText)).call.apply(_ref2, [this].concat(args))), _this), _this.mouseUp = function (event) {
      event.preventDefault();
      var _this$props = _this.props,
          onSelectToken = _this$props.onSelectToken,
          text = _this$props.text,
          tokens = _this$props.tokens;


      if (typeof window === 'undefined') {
        return;
      }

      var selection = window.getSelection();
      var textSelected = selection.toString();

      if (textSelected.length > 0) {
        if (_this.root) {
          var offset = (0, _selectionUtils.getCaretCharacterOffsetWithin)(_this.root);
          if (offset !== undefined) {
            var endIndex = offset + textSelected.length;

            if (endIndex <= text.length) {
              var i = (0, _builder.intersection)({ start: offset, end: endIndex }, tokens);
              if (i.hasOverlap) {
                log('hasOverlap  - do nothing');
                (0, _selectionUtils.clearSelection)();
              } else {
                var tokensToRemove = i.surroundedTokens;
                var token = {
                  text: textSelected,
                  start: offset,
                  end: endIndex
                };

                onSelectToken(token, tokensToRemove);
                (0, _selectionUtils.clearSelection)();
              }
            }
          }
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TokenText, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          text = _props.text,
          tokens = _props.tokens,
          className = _props.className,
          onTokenClick = _props.onTokenClick;


      var normalized = (0, _builder.normalize)(text, tokens);

      return _react2.default.createElement(
        'div',
        {
          className: className,
          ref: function ref(r) {
            return _this2.root = r;
          },
          onMouseUp: this.mouseUp
        },
        normalized.map(function (t, index) {
          return _react2.default.createElement(Text, _extends({ key: index }, t, { onClick: function onClick() {
              return onTokenClick(t);
            } }));
        })
      );
    }
  }]);

  return TokenText;
}(_react2.default.Component);

TokenText.propTypes = {
  text: _propTypes2.default.string.isRequired,
  tokens: _propTypes2.default.array.isRequired,
  onTokenClick: _propTypes2.default.func.isRequired,
  onSelectToken: _propTypes2.default.func.isRequired,
  className: _propTypes2.default.string
};
exports.default = TokenText;