'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tokenizer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _controls = require('./controls');

var _controls2 = _interopRequireDefault(_controls);

var _styles = require('@material-ui/core/styles');

var _builder = require('./builder');

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _differenceWith = require('lodash/differenceWith');

var _differenceWith2 = _interopRequireDefault(_differenceWith);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _styleUtils = require('@pie-lib/style-utils');

var _tokenText = require('./token-text');

var _tokenText2 = _interopRequireDefault(_tokenText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tokenizer = exports.Tokenizer = function (_React$Component) {
  _inherits(Tokenizer, _React$Component);

  function Tokenizer(props) {
    _classCallCheck(this, Tokenizer);

    var _this = _possibleConstructorReturn(this, (Tokenizer.__proto__ || Object.getPrototypeOf(Tokenizer)).call(this, props));

    _this.onChangeHandler = function (token, mode) {
      _this.props.onChange(token, mode);

      _this.setState({
        mode: mode
      });
    };

    _this.toggleCorrectMode = function () {
      return _this.setState({ setCorrectMode: !_this.state.setCorrectMode });
    };

    _this.clear = function () {
      _this.onChangeHandler([], '');
    };

    _this.buildTokens = function (type, fn) {
      var text = _this.props.text;

      var tokens = fn(text);

      _this.onChangeHandler(tokens, type);
    };

    _this.selectToken = function (newToken, tokensToRemove) {
      var tokens = _this.props.tokens;

      var update = (0, _differenceWith2.default)((0, _clone2.default)(tokens), tokensToRemove, _isEqual2.default);

      update.push(newToken);
      _this.onChangeHandler(update, _this.state.mode);
    };

    _this.tokenClick = function (token) {
      var setCorrectMode = _this.state.setCorrectMode;


      if (setCorrectMode) {
        _this.setCorrect(token);
      } else {
        _this.removeToken(token);
      }
    };

    _this.tokenIndex = function (token) {
      var tokens = _this.props.tokens;

      return tokens.findIndex(function (t) {
        return t.text == token.text && t.start == token.start && t.end == token.end;
      });
    };

    _this.setCorrect = function (token) {
      var tokens = _this.props.tokens;

      var index = _this.tokenIndex(token);
      if (index !== -1) {
        var t = tokens[index];

        t.correct = !t.correct;

        var update = (0, _clone2.default)(tokens);

        update.splice(index, 1, t);
        _this.onChangeHandler(update, _this.state.mode);
      }
    };

    _this.removeToken = function (token) {
      var tokens = _this.props.tokens;


      var index = _this.tokenIndex(token);
      if (index !== -1) {
        var update = (0, _clone2.default)(tokens);

        update.splice(index, 1);

        _this.onChangeHandler(update, _this.state.mode);
      }
    };

    _this.state = {
      setCorrectMode: false,
      mode: ''
    };
    return _this;
  }

  _createClass(Tokenizer, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          text = _props.text,
          tokens = _props.tokens,
          classes = _props.classes,
          className = _props.className;
      var setCorrectMode = this.state.setCorrectMode;


      var tokenClassName = (0, _classnames2.default)(classes.text, setCorrectMode && classes.noselect);

      var rootName = (0, _classnames2.default)(classes.tokenizer, className);

      return _react2.default.createElement(
        'div',
        { className: rootName },
        _react2.default.createElement(_controls2.default, {
          onClear: this.clear,
          onWords: function onWords() {
            return _this2.buildTokens('words', _builder.words);
          },
          onSentences: function onSentences() {
            return _this2.buildTokens('sentence', _builder.sentences);
          },
          onParagraphs: function onParagraphs() {
            return _this2.buildTokens('paragraphs', _builder.paragraphs);
          },
          setCorrectMode: setCorrectMode,
          onToggleCorrectMode: this.toggleCorrectMode
        }),
        _react2.default.createElement(_tokenText2.default, {
          className: tokenClassName,
          text: text,
          tokens: tokens,
          onTokenClick: this.tokenClick,
          onSelectToken: this.selectToken
        })
      );
    }
  }]);

  return Tokenizer;
}(_react2.default.Component);

Tokenizer.propTypes = {
  text: _propTypes2.default.string.isRequired,
  tokens: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    text: _propTypes2.default.string
  })),
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  onChange: _propTypes2.default.func.isRequired
};
Tokenizer.defaultProps = {};
exports.default = (0, _styles.withStyles)(function (theme) {
  return {
    text: {
      marginTop: theme.spacing.unit,
      paddingTop: theme.spacing.unit,
      paddingBottom: theme.spacing.unit
    },
    noselect: _extends({}, (0, _styleUtils.noSelect)())
  };
})(Tokenizer);