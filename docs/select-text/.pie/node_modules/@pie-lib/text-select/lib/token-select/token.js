'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Token = exports.TokenTypes = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TokenTypes = exports.TokenTypes = {
  text: _propTypes2.default.string,
  selectable: _propTypes2.default.bool
};

var Token = exports.Token = function (_React$Component) {
  _inherits(Token, _React$Component);

  function Token() {
    _classCallCheck(this, Token);

    return _possibleConstructorReturn(this, (Token.__proto__ || Object.getPrototypeOf(Token)).apply(this, arguments));
  }

  _createClass(Token, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          onClick = _props.onClick,
          text = _props.text,
          selectable = _props.selectable,
          selected = _props.selected,
          classes = _props.classes,
          classNameProp = _props.className,
          disabled = _props.disabled,
          highlight = _props.highlight;

      var className = (0, _classnames2.default)(classes.token, disabled && classes.disabled, selectable && !disabled && classes.selectable, selected && !disabled && classes.selected, selected && disabled && classes.disabledAndSelected, highlight && selectable && !disabled && !selected && classes.highlight, classNameProp);
      return _react2.default.createElement(
        'span',
        {
          onClick: selectable && !disabled ? onClick : undefined,
          className: className
        },
        text
      );
    }
  }]);

  return Token;
}(_react2.default.Component);

Token.propTypes = _extends({}, TokenTypes, {
  classes: _propTypes2.default.object.isRequired,
  className: _propTypes2.default.string,
  onClick: _propTypes2.default.func.isRequired,
  disabled: _propTypes2.default.bool,
  highlight: _propTypes2.default.bool
});
Token.defaultProps = {};
exports.default = (0, _styles.withStyles)(function (theme) {
  return {
    token: {
      cursor: 'pointer',
      display: 'inline',
      paddingRight: 0,
      transition: 'background-color 100ms ease-in'
    },
    disabled: {
      cursor: 'inherit',
      color: 'grey'
    },
    disabledAndSelected: {
      backgroundColor: 'pink'
    },
    selectable: {
      '&:hover': {
        backgroundColor: theme.palette.secondary.light
      }
    },
    selected: {
      '&:hover': {
        backgroundColor: theme.palette.primary.light
      },
      backgroundColor: theme.palette.primary.light
    },
    highlight: {
      border: 'dashed 1px ' + theme.palette.primary.light
    }
  };
})(Token);