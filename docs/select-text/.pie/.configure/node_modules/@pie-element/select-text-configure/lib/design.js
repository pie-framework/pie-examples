'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Design = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _styles = require('@material-ui/core/styles');

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _textSelect = require('@pie-lib/text-select');

var _configUi = require('@pie-lib/config-ui');

var _Chip = require('@material-ui/core/Chip');

var _Chip2 = _interopRequireDefault(_Chip);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:select-text:configure');

class Design extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.changeText = event => {
      this.apply(u => {
        u.text = event.target.value;
        u.tokens = [];
      });
    }, this.changeTokens = tokens => {
      this.apply(u => {
        u.tokens = tokens;
        const correctTokenCount = tokens.filter(t => t.correct).length;
        const max = isFinite(u.maxSelections) ? u.maxSelections : 0;
        u.maxSelections = Math.max(max, correctTokenCount);
      });
    }, this.changeMaxSelections = (event, max) => {
      this.apply(u => u.maxSelections = max);
    }, this.changeHighlight = () => {
      this.apply(u => u.highlightChoices = !u.highlightChoices);
    }, this.apply = fn => {
      var _props = this.props;
      const onChange = _props.onChange,
            model = _props.model;

      const update = (0, _cloneDeep2.default)(model);
      fn(update);
      onChange(update);
    }, this.changeFeedback = feedback => {
      this.apply(u => u.feedback = feedback);
    }, _temp;
  }

  render() {
    var _props2 = this.props;
    const model = _props2.model,
          classes = _props2.classes,
          className = _props2.className;


    log('[render] maxSelections:', model.maxSelections);

    return _react2.default.createElement(
      'div',
      { className: className },
      _react2.default.createElement(_TextField2.default, {
        label: 'Content',
        className: classes.input,
        multiline: true,
        value: model.text,
        onChange: this.changeText
      }),
      _react2.default.createElement(_configUi.InputCheckbox, {
        label: 'Highlight choices',
        checked: model.highlightChoices,
        onChange: this.changeHighlight
      }),
      _react2.default.createElement(
        _configUi.InputContainer,
        { label: 'Tokens', className: classes.tokenizerContainer },
        _react2.default.createElement(_textSelect.Tokenizer, {
          className: classes.tokenizer,
          text: model.text,
          tokens: model.tokens,
          onChange: this.changeTokens
        })
      ),
      _react2.default.createElement(_Chip2.default, {
        label: `Selections Available: ${model.tokens.length}`,
        className: classes.chip
      }),
      _react2.default.createElement(_Chip2.default, {
        label: `Correct Answers: ${model.tokens.filter(t => t.correct).length}`,
        className: classes.chip
      }),
      _react2.default.createElement(_configUi.NumberTextField, {
        min: 0,
        label: 'Selection count (0:any)',
        max: model.tokens.length,
        value: model.maxSelections,
        onChange: this.changeMaxSelections
      }),
      _react2.default.createElement(_configUi.FeedbackConfig, {
        feedback: model.feedback,
        onChange: this.changeFeedback
      })
    );
  }
}
exports.Design = Design;
Design.propTypes = {
  model: _propTypes2.default.object.isRequired,
  classes: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  className: _propTypes2.default.string
};
Design.defaultProps = {};
exports.default = (0, _styles.withStyles)(theme => ({
  tokenizerContainer: {
    paddingRight: 0,
    marginRight: 0,
    '&:after': {
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      height: '1px',
      content: '""',
      backgroundColor: theme.palette.primary.main
    },
    marginBottom: theme.spacing.unit
  },
  chip: {
    marginRight: theme.spacing.unit * 2
  },
  input: {
    width: '100%',
    paddingBottom: theme.spacing.unit * 3
  },
  tokenizer: {
    marginTop: theme.spacing.unit * 2
  },
  mainOpts: {
    width: '100%',
    justifyContent: 'space-between',
    display: 'flex',
    alignItems: 'baseline'
  }
}))(Design);