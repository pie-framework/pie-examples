'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LanguageControls = exports.RawLangs = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _InputLabel = require('@material-ui/core/InputLabel');

var _InputLabel2 = _interopRequireDefault(_InputLabel);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _styles = require('@material-ui/core/styles');

var _Select = require('@material-ui/core/Select');

var _Select2 = _interopRequireDefault(_Select);

var _MenuItem = require('@material-ui/core/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _FormControl = require('@material-ui/core/FormControl');

var _FormControl2 = _interopRequireDefault(_FormControl);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('pie-elements:config-ui:langs');

var styles = function styles(theme) {
  return {
    root: {
      flexDirection: 'column',
      alignItems: 'start',
      display: 'flex',
      position: 'relative',
      paddingTop: '0px',
      paddingRight: '0px'
    },
    formControl: {
      position: 'initial'
    },
    inputLabel: {
      paddingBottom: theme.spacing.unit
    }
  };
};

var RawLangs = exports.RawLangs = function (_React$Component) {
  _inherits(RawLangs, _React$Component);

  function RawLangs(props) {
    _classCallCheck(this, RawLangs);

    var _this = _possibleConstructorReturn(this, (RawLangs.__proto__ || Object.getPrototypeOf(RawLangs)).call(this, props));

    _this.choose = function (event) {
      log('[choose] event: ', event);
      if (_this.props.onChange) {
        _this.props.onChange(event.target.value);
      }
    };

    _this.uid = props.uid || (Math.random() * 10000).toFixed();
    return _this;
  }

  _createClass(RawLangs, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          langs = _props.langs,
          selected = _props.selected,
          label = _props.label,
          classes = _props.classes;

      log('[render] selected:', selected);
      return _react2.default.createElement(
        'div',
        { className: classes.root },
        _react2.default.createElement(
          _FormControl2.default,
          { className: classes.formControl },
          _react2.default.createElement(
            _InputLabel2.default,
            { className: classes.inputLabel, htmlFor: this.uid },
            label
          ),
          _react2.default.createElement(
            _Select2.default,
            {
              value: selected,
              onChange: this.choose,
              input: _react2.default.createElement(_Input2.default, { id: this.uid })
            },
            langs.map(function (l, index) {
              return _react2.default.createElement(
                _MenuItem2.default,
                { key: index, value: l },
                l
              );
            })
          )
        )
      );
    }
  }]);

  return RawLangs;
}(_react2.default.Component);

RawLangs.propTypes = {
  onChange: _propTypes2.default.func,
  langs: _propTypes2.default.array,
  selected: _propTypes2.default.string,
  label: _propTypes2.default.string,
  classes: _propTypes2.default.object.isRequired,
  uid: _propTypes2.default.string
};


var Langs = (0, _styles.withStyles)(styles, { name: 'Langs' })(RawLangs);
exports.default = Langs;
var LanguageControls = exports.LanguageControls = (0, _styles.withStyles)({
  languageControls: {
    display: 'grid',
    gridAutoFlow: 'column',
    gridAutoColumns: '1fr',
    gridGap: '8px'
  }
})(function (_ref) {
  var classes = _ref.classes,
      langs = _ref.langs,
      activeLang = _ref.activeLang,
      defaultLang = _ref.defaultLang,
      onActiveLangChange = _ref.onActiveLangChange,
      onDefaultLangChange = _ref.onDefaultLangChange,
      className = _ref.className;

  var names = (0, _classnames2.default)(classes.languageControls, className);

  return _react2.default.createElement(
    'div',
    { className: names },
    _react2.default.createElement(Langs, {
      label: 'Choose language to edit',
      langs: langs,
      selected: activeLang,
      onChange: function onChange(l) {
        return onActiveLangChange(l);
      }
    }),
    _react2.default.createElement(Langs, {
      label: 'Default language',
      langs: langs,
      selected: defaultLang,
      onChange: function onChange(l) {
        return onDefaultLangChange(l);
      }
    })
  );
});

LanguageControls.propTypes = {
  langs: _propTypes2.default.array,
  activeLang: _propTypes2.default.string.isRequired,
  defaultLang: _propTypes2.default.string.isRequired,
  onActiveLangChange: _propTypes2.default.func.isRequired,
  onDefaultLangChange: _propTypes2.default.func.isRequired
};