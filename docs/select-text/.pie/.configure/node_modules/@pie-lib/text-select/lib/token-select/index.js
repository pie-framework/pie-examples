'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenSelect = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _token = require('./token');

var _token2 = _interopRequireDefault(_token);

var _styles = require('@material-ui/core/styles');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _styleUtils = require('@pie-lib/style-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('@pie-lib:text-select:token-select');

var TokenSelect = exports.TokenSelect = function (_React$Component) {
  _inherits(TokenSelect, _React$Component);

  function TokenSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TokenSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TokenSelect.__proto__ || Object.getPrototypeOf(TokenSelect)).call.apply(_ref, [this].concat(args))), _this), _this.selectedCount = function () {
      return _this.props.tokens.filter(function (t) {
        return t.selected;
      }).length;
    }, _this.canSelectMore = function (selectedCount) {
      var maxNoOfSelections = _this.props.maxNoOfSelections;

      log('[canSelectMore] maxNoOfSelections: ', maxNoOfSelections, 'selectedCount: ', selectedCount);
      return maxNoOfSelections <= 0 || isFinite(maxNoOfSelections) && selectedCount < maxNoOfSelections;
    }, _this.toggleToken = function (index, t) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          maxNoOfSelections = _this$props.maxNoOfSelections;

      var selected = !t.selected;
      if (selected && maxNoOfSelections > 0 && _this.selectedCount() >= maxNoOfSelections) {
        log('skip toggle max reached');
        return;
      }
      var update = _extends({}, t, { selected: !t.selected });
      var tokens = (0, _clone2.default)(_this.props.tokens);
      tokens.splice(index, 1, update);
      onChange(tokens);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TokenSelect, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          classes = _props.classes,
          tokenComponent = _props.tokenComponent,
          tokens = _props.tokens,
          classNameProp = _props.className,
          disabled = _props.disabled,
          highlightChoices = _props.highlightChoices;


      var TokenComponent = tokenComponent || _token2.default;
      var className = (0, _classnames2.default)(classes.tokenSelect, classNameProp);
      var selectedCount = this.selectedCount();
      return _react2.default.createElement(
        'div',
        { className: className },
        tokens.map(function (t, index) {
          var selectable = t.selected || t.selectable && _this2.canSelectMore(selectedCount);

          return _react2.default.createElement(TokenComponent, _extends({
            key: index,
            disabled: disabled
          }, t, {
            selectable: selectable,
            highlight: highlightChoices,
            onClick: function onClick() {
              return _this2.toggleToken(index, t);
            }
          }));
        })
      );
    }
  }]);

  return TokenSelect;
}(_react2.default.Component);

TokenSelect.propTypes = {
  tokens: _propTypes2.default.arrayOf(_propTypes2.default.shape(_token.TokenTypes)).isRequired,
  className: _propTypes2.default.string,
  classes: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  disabled: _propTypes2.default.bool,
  tokenComponent: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),
  highlightChoices: _propTypes2.default.bool,
  maxNoOfSelections: _propTypes2.default.number
};
TokenSelect.defaultProps = {
  highlightChoices: false,
  maxNoOfSelections: 0
};
exports.default = (0, _styles.withStyles)(function () {
  return {
    tokenSelect: _extends({
      backgroundColor: 'none'
    }, (0, _styleUtils.noSelect)())
  };
})(TokenSelect);