'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tokenSelect = require('./token-select');

var _tokenSelect2 = _interopRequireDefault(_tokenSelect);

var _builder = require('./tokenizer/builder');

var _token = require('./token-select/token');

var _correctnessToken = require('./correctness-token');

var _correctnessToken2 = _interopRequireDefault(_correctnessToken);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _debug2.default)('@pie-lib:text-select');
/**
 * Built on TokenSelect uses build.normalize to build the token set.
 */

var TextSelect = function (_React$Component) {
  _inherits(TextSelect, _React$Component);

  function TextSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TextSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextSelect.__proto__ || Object.getPrototypeOf(TextSelect)).call.apply(_ref, [this].concat(args))), _this), _this.change = function (tokens) {
      var out = tokens.filter(function (t) {
        return t.selected;
      });
      _this.props.onChange(out);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TextSelect, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          text = _props.text,
          disabled = _props.disabled,
          tokens = _props.tokens,
          selectedTokens = _props.selectedTokens,
          className = _props.className,
          highlightChoices = _props.highlightChoices,
          maxNoOfSelections = _props.maxNoOfSelections;


      var normalized = (0, _builder.normalize)(text, tokens);
      log('normalized: ', normalized);
      var prepped = normalized.map(function (t) {
        var selectedIndex = selectedTokens.findIndex(function (s) {
          return s.start === t.start && s.end === t.end && s.text === t.text;
        });
        var selected = selectedIndex !== -1;
        var correct = selected ? t.correct : undefined;
        return _extends({}, t, {
          selectable: !disabled && t.predefined,
          selected: selected,
          correct: correct
        });
      });

      var tokensHaveCorrectInfo = tokens.filter(function (t) {
        return t.hasOwnProperty('correct') > 0 && t.correct !== undefined;
      }).length > 0;

      return _react2.default.createElement(_tokenSelect2.default, {
        highlightChoices: !disabled && highlightChoices,
        className: className,
        tokens: prepped,
        disabled: disabled,
        onChange: this.change,
        maxNoOfSelections: maxNoOfSelections,
        tokenComponent: tokensHaveCorrectInfo ? _correctnessToken2.default : undefined
      });
    }
  }]);

  return TextSelect;
}(_react2.default.Component);

TextSelect.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  disabled: _propTypes2.default.bool,
  tokens: _propTypes2.default.arrayOf(_propTypes2.default.shape(_token.TokenTypes)).isRequired,
  selectedTokens: _propTypes2.default.arrayOf(_propTypes2.default.shape(_token.TokenTypes)).isRequired,
  text: _propTypes2.default.string.isRequired,
  className: _propTypes2.default.string,
  highlightChoices: _propTypes2.default.bool,
  maxNoOfSelections: _propTypes2.default.number
};
exports.default = TextSelect;