'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serialization = undefined;
exports.default = ImagePlugin;

var _slate = require('slate');

var _Image = require('@material-ui/icons/Image');

var _Image2 = _interopRequireDefault(_Image);

var _component = require('./component');

var _component2 = _interopRequireDefault(_component);

var _imageToolbar = require('./image-toolbar');

var _imageToolbar2 = _interopRequireDefault(_imageToolbar);

var _insertImageHandler = require('./insert-image-handler');

var _insertImageHandler2 = _interopRequireDefault(_insertImageHandler);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('@pie-lib:editable-html:plugins:image');

function ImagePlugin(opts) {
  var toolbar = opts.insertImageRequested && {
    icon: _react2.default.createElement(_Image2.default, null),
    onClick: function onClick(value, onChange) {
      log('[toolbar] onClick');
      var block = _slate.Block.create({
        type: 'image',
        isVoid: true,
        data: {
          loaded: false,
          src: undefined
        }
      });

      var change = value.change().insertBlock(block);
      onChange(change);
      opts.insertImageRequested(function (getValue) {
        return new _insertImageHandler2.default(block, getValue, onChange);
      });
    },
    supports: function supports(node) {
      return node.object === 'block' && node.type === 'image';
    },
    customToolbar: function customToolbar() {
      return _imageToolbar2.default;
    }
  };

  return {
    toolbar: toolbar,
    deleteNode: function deleteNode(e, node, value, onChange) {
      e.preventDefault();
      if (opts.onDelete) {
        var update = node.data.merge(_slate.Data.create({ deleteStatus: 'pending' }));

        var change = value.change().setNodeByKey(node.key, { data: update });

        onChange(change);
        opts.onDelete(node.data.get('src'), function (err, v) {
          if (!err) {
            change = v.change().removeNodeByKey(node.key);
          } else {
            log('[error]: ', err);
            change = v.change().setNodeByKey(node.key, node.data.merge(_slate.Data.create({ deleteStatus: 'failed' })));
          }
          onChange(change);
        });
      } else {
        var _change = value.change().removeNodeByKey(node.key);
        onChange(_change);
      }
    },
    stopReset: function stopReset(value) {
      var imgPendingInsertion = value.document.findDescendant(function (n) {
        if (n.type !== 'image') {
          return;
        }
        return n.data.get('loaded') === false;
      });
      /** don't reset if there is an image pending insertion */
      return imgPendingInsertion !== undefined && imgPendingInsertion !== null;
    },
    renderNode: function renderNode(props) {
      if (props.node.type === 'image') {
        var all = Object.assign({
          onDelete: opts.onDelete,
          onFocus: opts.onFocus,
          onBlur: opts.onBlur
        }, props);
        return _react2.default.createElement(_component2.default, all);
      }
    },
    onKeyDown: function onKeyDown(event, change /*,editor*/) {
      log('[onKeyDown] ...');
      var startKey = change.value.selection.startKey;

      var n = change.value.document.getDescendant(startKey);
      var p = change.value.document.getParent(n.key);

      if (p.type === 'image') {
        var block = _slate.Block.fromJSON({ type: 'div' });
        var range = _slate.Range.fromJSON({
          anchorKey: block.key,
          anchorOffset: 0,
          focusKey: block.key,
          focusOffset: 0,
          isFocused: true,
          isBackward: false
        });
        change.insertBlockAtRange(change.value.selection, block).select(range);
      }
    }
  };
}

var serialization = exports.serialization = {
  deserialize: function deserialize(el /*, next*/) {
    var name = el.tagName.toLowerCase();
    if (name !== 'img') return;

    log('deserialize: ', name);
    var style = el.style || { width: '', height: '' };
    var width = parseInt(style.width.replace('px', ''), 10) || null;
    var height = parseInt(style.height.replace('px', ''), 10) || null;

    var out = {
      object: 'block',
      type: 'image',
      isVoid: true,
      nodes: [],
      data: {
        src: el.getAttribute('src'),
        width: width,
        height: height
      }
    };
    log('return object: ', out);
    return out;
  },
  serialize: function serialize(object /*, children*/) {
    if (object.type !== 'image') return;

    var data = object.data;

    var src = data.get('src');
    var width = data.get('width');
    var height = data.get('height');
    var style = {};
    if (width) {
      style.width = width + 'px';
    }

    if (height) {
      style.height = height + 'px';
    }

    var props = {
      src: src,
      style: style
    };

    return _react2.default.createElement('img', props);
  }
};