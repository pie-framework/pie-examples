'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _configUi = require('@pie-lib/config-ui');

var _editableHtml = require('@pie-lib/editable-html');

var _editableHtml2 = _interopRequireDefault(_editableHtml);

var _reactDnd = require('react-dnd');

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RemoveCircle = require('@material-ui/icons/RemoveCircle');

var _RemoveCircle2 = _interopRequireDefault(_RemoveCircle);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:placement-ordering:configure:choice-tile');

class ChoiceTile extends _react2.default.Component {

  constructor(props) {
    super(props);

    this.onLabelChange = label => {
      var _props = this.props;
      const choice = _props.choice,
            onChoiceChange = _props.onChoiceChange;

      choice.label = label;
      onChoiceChange(choice);
    };

    this.onMoveOnDragChange = (event, value) => {
      var _props2 = this.props;
      const choice = _props2.choice,
            onChoiceChange = _props2.onChoiceChange;

      choice.moveOnDrag = value;
      onChoiceChange(choice);
    };
  }

  render() {
    var _props3 = this.props;
    const choice = _props3.choice,
          connectDragSource = _props3.connectDragSource,
          connectDropTarget = _props3.connectDropTarget,
          isDragging = _props3.isDragging,
          classes = _props3.classes,
          onDelete = _props3.onDelete,
          imageSupport = _props3.imageSupport;


    const opacity = isDragging ? 0 : 1;
    const markup = _react2.default.createElement(
      'div',
      { className: classes.choiceTile, style: { opacity: opacity } },
      _react2.default.createElement(_editableHtml2.default, {
        style: { display: 'inline-block' },
        placeholder: 'Enter a choice',
        markup: choice.label,
        imageSupport: imageSupport,
        onChange: this.onLabelChange
      }),
      _react2.default.createElement(
        'div',
        { className: classes.controls },
        _react2.default.createElement(_configUi.Checkbox, {
          label: 'Remove tile after placing',
          checked: choice.moveOnDrag === true,
          onChange: this.onMoveOnDragChange
        }),
        _react2.default.createElement(
          _IconButton2.default,
          { color: 'primary', onClick: onDelete },
          _react2.default.createElement(_RemoveCircle2.default, {
            classes: {
              root: classes.removeCircle
            }
          })
        )
      )
    );

    return connectDragSource(connectDropTarget(markup));
  }
}

ChoiceTile.propTypes = {
  imageSupport: _propTypes2.default.shape({
    add: _propTypes2.default.func.isRequired,
    delete: _propTypes2.default.func.isRequired
  }),
  choice: _propTypes2.default.object,
  onChoiceChange: _propTypes2.default.func.isRequired,
  connectDragSource: _propTypes2.default.func.isRequired,
  connectDropTarget: _propTypes2.default.func.isRequired,
  isDragging: _propTypes2.default.bool,
  classes: _propTypes2.default.object.isRequired,
  onDelete: _propTypes2.default.func.isRequired
};
const Styled = (0, _styles.withStyles)(theme => ({
  removeCircle: {
    fill: theme.palette.error[500]
  },
  choiceTile: {
    cursor: 'move',
    backgroundColor: 'white',
    border: '1px solid #c2c2c2',
    marginTop: '5px',
    marginBottom: '5px',
    padding: '5px'
  },
  controls: {
    display: 'flex',
    justifyContent: 'space-between'
  }
}))(ChoiceTile);

const NAME = 'choice-config';

const choiceSource = {
  beginDrag(props) {
    return {
      id: props.choice.id,
      index: props.index
    };
  }
};

const StyledSource = (0, _reactDnd.DragSource)(NAME, choiceSource, (connect, monitor) => ({
  connectDragSource: connect.dragSource(),
  isDragging: monitor.isDragging()
}))(Styled);

const choiceTarget = {
  hover() {
    log('[hover]');
  },
  drop(props, monitor) {
    const item = monitor.getItem();
    log('[drop] item: ', item, 'didDrop?', monitor.didDrop());
    props.onMoveChoice(item.index, props.index);
  }
};

const StyledSourceAndTarget = (0, _reactDnd.DropTarget)(NAME, choiceTarget, connect => ({
  connectDropTarget: connect.dropTarget()
}))(StyledSource);

exports.default = StyledSourceAndTarget;