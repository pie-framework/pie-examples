'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _configUi = require('@pie-lib/config-ui');

var _editableHtml = require('@pie-lib/editable-html');

var _editableHtml2 = _interopRequireDefault(_editableHtml);

var _nestedProperty = require('nested-property');

var _choiceEditor = require('./choice-editor');

var _choiceEditor2 = _interopRequireDefault(_choiceEditor);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug2.default)('@pie-element:placement-ordering:design');

class Design extends _react2.default.Component {
  constructor(props) {
    super(props);

    this.state = {
      allMoveOnDrag: false
    };

    this.applyUpdate = modelFn => {
      var _props = this.props;
      const model = _props.model,
            onModelChange = _props.onModelChange;

      const update = modelFn((0, _cloneDeep2.default)(model));
      onModelChange(update);
    };

    this.changeHandler = (modelPath, valuePath) => {
      return value => {
        log('[changeHandler] value: ', value);
        const v = valuePath ? (0, _nestedProperty.get)(value, valuePath) : value;
        this.applyUpdate(model => {
          (0, _nestedProperty.set)(model, modelPath, v);
          return model;
        });
      };
    };

    this.onLayoutChange = layout => {
      this.applyUpdate(model => {
        model.choiceAreaLayout = layout;
        return model;
      });
    };

    this.onPlacementTypeChange = event => {
      const includePlacment = event.currentTarget.checked;
      this.applyUpdate(model => {
        model.placementType = includePlacment ? 'placement' : 'none';
        return model;
      });
    };

    this.onDefaultLangChange = defaultLang => {
      this.applyUpdate(model => {
        model.defaultLang = defaultLang;
        return model;
      });
    };

    this.onPromptChange = this.changeHandler('prompt');
    this.onChoiceAreaLabelChange = this.changeHandler('choiceAreaLabel', 'target.value');
    this.onAnswerAreaLabelChange = this.changeHandler('answerAreaLabel', 'target.value');
    this.onFeedbackChange = this.changeHandler('feedback');
    this.onShuffleChange = this.changeHandler('shuffle', 'target.checked');
    this.onShowOrderingChange = this.changeHandler('showOrdering', 'target.checked');

    this.onChoiceEditorChange = (choices, correctResponse) => {
      var _props2 = this.props;
      const model = _props2.model,
            onModelChange = _props2.onModelChange;

      const update = (0, _cloneDeep2.default)(model);
      update.choices = choices;
      update.correctResponse = correctResponse;
      onModelChange(update);
    };
  }

  render() {
    var _props3 = this.props;
    const model = _props3.model,
          classes = _props3.classes,
          imageSupport = _props3.imageSupport;
    var _model$configure = model.configure;
    const orientationLabel = _model$configure.orientationLabel,
          shuffleLabel = _model$configure.shuffleLabel,
          includePlacementAreaLabel = _model$configure.includePlacementAreaLabel,
          numberedGuidesLabel = _model$configure.numberedGuidesLabel,
          promptLabel = _model$configure.promptLabel,
          choiceLabel = _model$configure.choiceLabel,
          choicesLabel = _model$configure.choicesLabel,
          enableOrientationChange = _model$configure.enableOrientationChange,
          enableShuffleChange = _model$configure.enableShuffleChange,
          enablePlacementAreaChange = _model$configure.enablePlacementAreaChange,
          enableNumberedGuideChange = _model$configure.enableNumberedGuideChange,
          enablePromptChange = _model$configure.enablePromptChange,
          enableChoiceLabelChange = _model$configure.enableChoiceLabelChange,
          enableChoicesLabelChange = _model$configure.enableChoicesLabelChange,
          enableFeedback = _model$configure.enableFeedback,
          removeTilesLabel = _model$configure.removeTilesLabel,
          enableRemoveTiles = _model$configure.enableRemoveTiles;
    const allMoveOnDrag = this.state.allMoveOnDrag;


    return _react2.default.createElement(
      'div',
      { className: classes.design },
      enableOrientationChange && _react2.default.createElement(
        'div',
        { className: classes.row },
        _react2.default.createElement(_configUi.TwoChoice, {
          className: classes.orientation,
          header: orientationLabel,
          value: model.choiceAreaLayout,
          onChange: this.onLayoutChange,
          one: { label: 'vertical', value: 'vertical' },
          two: { label: 'horizontal', value: 'horizontal' }
        })
      ),
      _react2.default.createElement(
        'div',
        { className: classes.row },
        enableShuffleChange && _react2.default.createElement(_configUi.InputCheckbox, {
          label: shuffleLabel,
          checked: model.shuffle,
          onChange: this.onShuffleChange,
          'aria-label': 'shuffle'
        }),
        enablePlacementAreaChange && _react2.default.createElement(_configUi.InputCheckbox, {
          label: includePlacementAreaLabel,
          checked: model.placementType === 'placement',
          onChange: this.onPlacementTypeChange,
          'aria-label': 'include-placment'
        }),
        enableNumberedGuideChange && _react2.default.createElement(_configUi.InputCheckbox, {
          disabled: model.placementType !== 'placement',
          label: numberedGuidesLabel,
          checked: model.showOrdering,
          onChange: this.onShowOrderingChange,
          'aria-label': 'shuffle'
        })
      ),
      enablePromptChange && _react2.default.createElement(
        _configUi.InputContainer,
        { label: promptLabel, className: classes.promptHolder },
        _react2.default.createElement(_editableHtml2.default, {
          className: classes.prompt,
          markup: model.prompt,
          onChange: this.onPromptChange,
          imageSupport: imageSupport
        })
      ),
      _react2.default.createElement(
        'div',
        { className: classes.row },
        enableChoiceLabelChange && _react2.default.createElement(_TextField2.default, {
          className: classes.choiceLabel,
          label: choiceLabel,
          value: model.choiceAreaLabel,
          onChange: this.onChoiceAreaLabelChange,
          fullWidth: true
        }),
        model.placementType === 'placement' && _react2.default.createElement(_TextField2.default, {
          label: 'Answer label',
          value: model.answerAreaLabel,
          onChange: this.onAnswerAreaLabelChange,
          fullWidth: true
        })
      ),
      enableChoicesLabelChange && _react2.default.createElement(
        _configUi.FormSection,
        { label: choicesLabel },
        _react2.default.createElement(_choiceEditor2.default, {
          correctResponse: model.correctResponse,
          choices: model.choices,
          configuration: {
            removeTilesLabel,
            enableRemoveTiles
          },
          onChange: this.onChoiceEditorChange,
          imageSupport: imageSupport
        })
      ),
      enableFeedback && _react2.default.createElement(_configUi.FeedbackConfig, {
        feedback: model.feedback,
        onChange: this.onFeedbackChange,
        imageSupport: imageSupport
      })
    );
  }
}

Design.propTypes = {
  model: _propTypes2.default.object.isRequired,
  onModelChange: _propTypes2.default.func.isRequired
};

exports.default = (0, _styles.withStyles)(theme => ({
  promptHolder: {
    width: '100%'
  },
  prompt: {
    paddingTop: theme.spacing.unit * 2,
    paddingBottom: theme.spacing.unit
  },
  row: {
    display: 'grid',
    gridAutoFlow: 'column',
    gridAutoColumns: '1fr',
    gridGap: '8px'
  },
  design: {
    paddingTop: '10px'
  },
  langControls: {
    marginTop: '0px',
    marginBottom: '0px'
  },
  choices: {
    marginTop: '20px',
    marginBottom: '20px'
  },
  orientation: {
    marginTop: '0px',
    marginBottom: '0px'
  }
}))(Design);