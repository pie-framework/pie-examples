'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VerticalTiler = exports.HorizontalTiler = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _tile = require('./tile');

var _tile2 = _interopRequireDefault(_tile);

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const common = {
  tiler: {
    display: 'grid',
    gridGap: '10px'
  }
};

const types = {
  choiceLabel: _propTypes2.default.string,
  targetLabel: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  onDropChoice: _propTypes2.default.func.isRequired,
  tiles: _propTypes2.default.array.isRequired,
  tileSize: _propTypes2.default.string,
  addGuide: _propTypes2.default.bool
};

const defaults = {
  tileSize: '1fr',
  disabled: false,
  addGuide: false
};

const buildTiles = props => {
  const T = (tile, index) => {
    tile.onDropChoice = (source, index) => props.onDropChoice(tile, source, index);
    tile.onRemoveChoice = () => props.onRemoveChoice(tile);
    tile.instanceId = props.instanceId;
    tile.disabled = props.disabled;
    tile.guideIndex = props.addGuide ? tile.index + 1 : undefined;
    return _react2.default.createElement(_tile2.default, _extends({}, tile, { key: index }));
  };

  T.propTypes = _extends({}, types);
  return T;
};

class HTiler extends _react2.default.Component {
  render() {
    var _props = this.props;
    const includeTargets = _props.includeTargets,
          choiceLabel = _props.choiceLabel,
          targetLabel = _props.targetLabel,
          tiles = _props.tiles,
          classes = _props.classes,
          tileSize = _props.tileSize;


    const rows = includeTargets ? `auto ${tileSize} auto ${tileSize}` : `auto ${tileSize} auto`;
    const columns = includeTargets ? tiles.length / 2 : tiles.length;

    const style = {
      gridTemplateColumns: `repeat(${columns}, ${tileSize})`,
      gridTemplateRows: rows
    };

    const labelStyle = {
      gridColumn: `1/${columns + 1}`
    };

    return _react2.default.createElement(
      'div',
      { className: classes.htiler, style: style },
      _react2.default.createElement(
        'div',
        { className: classes.choiceLabel, style: labelStyle },
        choiceLabel
      ),
      includeTargets && _react2.default.createElement(
        'div',
        { className: classes.targetLabel, style: labelStyle },
        targetLabel
      ),
      tiles.map(buildTiles(this.props))
    );
  }
}

HTiler.propTypes = _extends({}, types);
HTiler.defaultProps = _extends({}, defaults);
const horizontalStyles = {
  htiler: common.tiler,
  choiceLabel: {
    textAlign: 'center'
  },
  targetLabel: {
    textAlign: 'center',
    gridRow: '3/4'
  }
};

const HorizontalTiler = exports.HorizontalTiler = (0, _styles.withStyles)(horizontalStyles)(HTiler);

class VTiler extends _react2.default.Component {
  render() {
    var _props2 = this.props;
    const includeTargets = _props2.includeTargets,
          choiceLabel = _props2.choiceLabel,
          targetLabel = _props2.targetLabel,
          tiles = _props2.tiles,
          classes = _props2.classes,
          tileSize = _props2.tileSize;


    const columns = includeTargets ? 2 : 1;
    const rows = includeTargets ? tiles.length / 2 : tiles.length;

    const style = {
      gridTemplateColumns: `repeat(${columns}, ${tileSize})`,
      gridTemplateRows: `auto repeat(${rows}, ${tileSize})`
    };

    return _react2.default.createElement(
      'div',
      { className: classes.vtiler, style: style },
      _react2.default.createElement(
        'div',
        { className: classes.choiceLabel },
        choiceLabel
      ),
      includeTargets && _react2.default.createElement(
        'div',
        { className: classes.targetLabel },
        targetLabel
      ),
      tiles.map(buildTiles(this.props))
    );
  }
}

VTiler.propTypes = _extends({}, types);
VTiler.defaultProps = _extends({}, defaults);
const verticalStyles = {
  vtiler: _extends({ gridAutoFlow: 'column' }, common.tiler),
  choiceLabel: {
    gridColumn: '1/2',
    textAlign: 'center'
  },
  targetLabel: {
    gridColumn: '2/3',
    textAlign: 'center'
  }
};

const VerticalTiler = exports.VerticalTiler = (0, _styles.withStyles)(verticalStyles)(VTiler);