'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _iconRoot = require('./icon-root');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Action, Emoji) {
  var IconBase = function (_React$Component) {
    _inherits(IconBase, _React$Component);

    function IconBase(props) {
      _classCallCheck(this, IconBase);

      var _this = _possibleConstructorReturn(this, (IconBase.__proto__ || Object.getPrototypeOf(IconBase)).call(this, props));

      var _this$props = _this.props,
          classes = _this$props.classes,
          size = _this$props.size;


      _this.icons = {
        feedback: {
          round: {
            check: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(_iconRoot.RoundFeedbackBox, { className: classes.bg }),
              _react2.default.createElement(Action, { className: classes.fg })
            ),
            emoji: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(_iconRoot.RoundFeedbackBox, { className: classes.bg }),
              _react2.default.createElement(Emoji, { className: classes.fg })
            ),
            open: {
              check: _react2.default.createElement(
                _iconRoot.IconRoot,
                { size: size },
                _react2.default.createElement(Action, { className: classes.bg })
              ),
              emoji: _react2.default.createElement(
                _iconRoot.IconRoot,
                { size: size },
                _react2.default.createElement(Emoji, { className: classes.bg })
              )
            }
          },
          square: {
            check: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(_iconRoot.SquareFeedbackBox, { className: classes.bg }),
              _react2.default.createElement(Action, { className: classes.fg })
            ),
            emoji: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(_iconRoot.SquareFeedbackBox, { className: classes.bg }),
              _react2.default.createElement(Emoji, { className: classes.fg })
            ),
            open: {
              check: _react2.default.createElement(
                _iconRoot.IconRoot,
                { size: size },
                _react2.default.createElement(Action, { className: classes.bg })
              ),
              emoji: _react2.default.createElement(
                _iconRoot.IconRoot,
                { size: size },
                _react2.default.createElement(Emoji, { className: classes.bg })
              )
            }
          }
        },
        round: {
          check: _react2.default.createElement(
            _iconRoot.IconRoot,
            { size: size },
            _react2.default.createElement(_iconRoot.Circle, { className: classes.bg }),
            _react2.default.createElement(Action, { className: classes.fg })
          ),
          emoji: _react2.default.createElement(
            _iconRoot.IconRoot,
            { size: size },
            _react2.default.createElement(_iconRoot.Circle, { className: classes.bg }),
            _react2.default.createElement(Emoji, { className: classes.fg })
          ),
          open: {
            check: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(Action, { className: classes.bg })
            ),
            emoji: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(Emoji, { className: classes.bg })
            )
          }
        },
        square: {
          check: _react2.default.createElement(
            _iconRoot.IconRoot,
            { size: size },
            _react2.default.createElement(_iconRoot.Square, { className: classes.bg }),
            _react2.default.createElement(Action, { className: classes.fg })
          ),
          emoji: _react2.default.createElement(
            _iconRoot.IconRoot,
            { size: size },
            _react2.default.createElement(_iconRoot.Square, { className: classes.bg }),
            _react2.default.createElement(Emoji, { className: classes.fg })
          ),
          open: {
            check: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(Action, { className: classes.bg })
            ),
            emoji: _react2.default.createElement(
              _iconRoot.IconRoot,
              { size: size },
              _react2.default.createElement(Emoji, { className: classes.bg })
            )
          }
        }
      };
      return _this;
    }

    _createClass(IconBase, [{
      key: 'render',
      value: function render() {
        if (this.props.category === undefined) {
          if (this.props.open === true) {
            return this.icons[this.props.shape].open[this.props.iconSet];
          } else {
            return this.icons[this.props.shape][this.props.iconSet];
          }
        } else {
          if (this.props.open === true) {
            return this.icons.feedback[this.props.shape].open[this.props.iconSet];
          } else {
            return this.icons.feedback[this.props.shape][this.props.iconSet];
          }
        }
      }
    }]);

    return IconBase;
  }(_react2.default.Component);

  IconBase.propTypes = {
    classes: _propTypes2.default.object.isRequired,
    size: _propTypes2.default.number
  };


  IconBase.propTypes = {
    iconSet: _propTypes2.default.oneOf(['emoji', 'check']),
    shape: _propTypes2.default.oneOf(['round', 'square']),
    category: _propTypes2.default.oneOf(['feedback', undefined]),
    open: _propTypes2.default.bool
  };

  IconBase.defaultProps = {
    iconSet: 'check',
    shape: 'round',
    category: undefined,
    open: false
  };

  return IconBase;
};