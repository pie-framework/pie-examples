'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _pieConfigureEvents = require('@pie-framework/pie-configure-events');

var _main = require('./main');

var _main2 = _interopRequireDefault(_main);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _defaultConfiguration = require('./defaultConfiguration');

var _defaultConfiguration2 = _interopRequireDefault(_defaultConfiguration);

var _defaults = require('lodash/defaults');

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const prepareCustomizationObject = model => {
  return _extends({}, model, {
    configure: (0, _defaults2.default)(model.configure, _defaultConfiguration2.default)
  });
};

class PlacementOrdering extends HTMLElement {
  constructor() {
    super();
    this.onModelChange = (model, resetSession) => {
      this._model = model;
      this.dispatchUpdate(resetSession);
    };

    this.insertImage = handler => {
      this.dispatchEvent(new _pieConfigureEvents.InsertImageEvent(handler));
    };

    this.deleteImage = (src, done) => {
      this.dispatchEvent(new _pieConfigureEvents.DeleteImageEvent(src, done));
    };
  }

  dispatchUpdate(reset) {
    const detail = { update: this._model, reset };
    this.dispatchEvent(new _pieConfigureEvents.ModelUpdatedEvent(this._model, reset));
  }

  set model(s) {
    this._model = prepareCustomizationObject(s);
    this._rerender();
  }

  _rerender() {
    let element = _react2.default.createElement(_main2.default, {
      initialModel: this._model,
      onModelChange: this.onModelChange,
      imageSupport: {
        add: this.insertImage,
        delete: this.deleteImage
      }
    });
    _reactDom2.default.render(element, this);
  }
}
exports.default = PlacementOrdering;