'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _configUi = require('@pie-lib/config-ui');

var _AddCircle = require('@material-ui/icons/AddCircle');

var _AddCircle2 = _interopRequireDefault(_AddCircle);

var _choiceTile = require('./choice-tile');

var _choiceTile2 = _interopRequireDefault(_choiceTile);

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _compact = require('lodash/compact');

var _compact2 = _interopRequireDefault(_compact);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _placementOrdering = require('@pie-ui/placement-ordering');

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findFreeChoiceSlot(choices) {
  let slot = 1;
  const ids = choices.map(c => c.id);
  while (ids.includes(`c${slot}`)) {
    slot++;
  }
  return slot;
}

const log = (0, _debug2.default)('@pie-element:placement-ordering:configure:choice-editor');

class ChoiceEditor extends _react2.default.Component {

  constructor(props) {
    super(props);
    this.moveChoice = (from, to) => {
      var _props = this.props;
      const correctResponse = _props.correctResponse,
            onChange = _props.onChange,
            choices = _props.choices;

      log('[moveChoice]: ', from, to);
      const update = (0, _placementOrdering.swap)(correctResponse, from, to);
      log('update: ', update);
      onChange(choices, update);
    };

    this.onChoiceChange = choice => {
      var _props2 = this.props;
      const choices = _props2.choices,
            onChange = _props2.onChange,
            correctResponse = _props2.correctResponse;

      const index = choices.findIndex(c => c.id === choice.id);
      choices.splice(index, 1, choice);
      onChange(choices, correctResponse);
    };

    this.onDelete = choice => {
      var _props3 = this.props;
      const choices = _props3.choices,
            onChange = _props3.onChange,
            correctResponse = _props3.correctResponse;

      const updatedChoices = choices.filter(c => c.id !== choice.id);
      const updatedCorrectResponse = correctResponse.filter(v => v.id !== choice.id);
      onChange(updatedChoices, updatedCorrectResponse);
    };

    this.addChoice = () => {
      var _props4 = this.props;
      const choices = _props4.choices,
            correctResponse = _props4.correctResponse,
            onChange = _props4.onChange;

      const freeId = findFreeChoiceSlot(choices);
      const id = `c${freeId}`;
      const newChoice = { id, label: '' };

      const newCorrectResponse = {
        id,
        /**
         * Note: weights are not configurable in the existing component
         * so we'll want do disable this in the controller and ignore it for now.
         */
        weight: 0
      };

      const updatedChoices = choices.concat([newChoice]);
      const updatedCorrectResponse = correctResponse.concat([newCorrectResponse]);
      onChange(updatedChoices, updatedCorrectResponse);
    };

    this.toggleAllOnDrag = () => {
      var _props5 = this.props;
      const correctResponse = _props5.correctResponse,
            choices = _props5.choices,
            onChange = _props5.onChange;

      const allMoveOnDrag = choices.find(c => c.moveOnDrag === false) === undefined;
      choices.forEach(c => c.moveOnDrag = !allMoveOnDrag);
      onChange(choices, correctResponse);
    };
  }

  render() {
    var _props6 = this.props;
    const classes = _props6.classes,
          correctResponse = _props6.correctResponse,
          choices = _props6.choices,
          imageSupport = _props6.imageSupport;


    const sortedChoices = (0, _compact2.default)(correctResponse.map(cr => choices.find(c => c.id === cr.id)));

    const allMoveOnDrag = choices.find(c => c.moveOnDrag === false) === undefined;

    return _react2.default.createElement(
      'div',
      { className: classes.choiceEditor },
      sortedChoices.map((c, index) => _react2.default.createElement(_choiceTile2.default, {
        choice: c,
        onMoveChoice: this.moveChoice,
        onDelete: this.onDelete.bind(this, c),
        onChoiceChange: this.onChoiceChange,
        index: index,
        key: index,
        imageSupport: imageSupport
      })),
      _react2.default.createElement(
        'div',
        { className: classes.controls },
        _react2.default.createElement(_configUi.InputSwitch, {
          className: classes.allToggle,
          checked: allMoveOnDrag,
          onChange: this.toggleAllOnDrag,
          value: 'allMoveOnDrag',
          label: 'Remove all tiles after placing'
        }),
        _react2.default.createElement(
          _IconButton2.default,
          {
            onClick: this.addChoice,
            classes: {
              root: classes.addButtonRoot,
              label: classes.addButtonLabel
            }
          },
          _react2.default.createElement(_AddCircle2.default, { classes: { root: classes.root } })
        )
      )
    );
  }
}

ChoiceEditor.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  correctResponse: _propTypes2.default.array.isRequired,
  choices: _propTypes2.default.array.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  imageSupport: _propTypes2.default.shape({
    add: _propTypes2.default.func.isRequired,
    delete: _propTypes2.default.func.isRequired
  })
};
const styles = theme => ({
  allToggle: {},
  choiceEditor: {
    marginTop: '10px'
  },
  controls: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  root: {
    width: '30px',
    height: '30px',
    fill: theme.palette.primary[500]
  },
  addButtonRoot: {
    top: '-5px'
  },
  addButtonLabel: {
    transition: 'opacity 200ms linear',
    '&:hover': {
      opacity: 0.3
    }
  }
});

exports.default = (0, _styles.withStyles)(styles)(ChoiceEditor);